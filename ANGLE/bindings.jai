//
// This file was auto-generated using the following command:
//
// jai generate.jai - -compile
//



__egl_h_ :: 1;

EGL_EGL_PROTOTYPES :: 1;

EGL_VERSION_1_0 :: 1;

EGL_ALPHA_SIZE :: 0x3021;
EGL_BAD_ACCESS :: 0x3002;
EGL_BAD_ALLOC :: 0x3003;
EGL_BAD_ATTRIBUTE :: 0x3004;
EGL_BAD_CONFIG :: 0x3005;
EGL_BAD_CONTEXT :: 0x3006;
EGL_BAD_CURRENT_SURFACE :: 0x3007;
EGL_BAD_DISPLAY :: 0x3008;
EGL_BAD_MATCH :: 0x3009;
EGL_BAD_NATIVE_PIXMAP :: 0x300A;
EGL_BAD_NATIVE_WINDOW :: 0x300B;
EGL_BAD_PARAMETER :: 0x300C;
EGL_BAD_SURFACE :: 0x300D;
EGL_BLUE_SIZE :: 0x3022;
EGL_BUFFER_SIZE :: 0x3020;
EGL_CONFIG_CAVEAT :: 0x3027;
EGL_CONFIG_ID :: 0x3028;
EGL_CORE_NATIVE_ENGINE :: 0x305B;
EGL_DEPTH_SIZE :: 0x3025;

EGL_DRAW :: 0x3059;
EGL_EXTENSIONS :: 0x3055;
EGL_FALSE :: 0;
EGL_GREEN_SIZE :: 0x3023;
EGL_HEIGHT :: 0x3056;
EGL_LARGEST_PBUFFER :: 0x3058;
EGL_LEVEL :: 0x3029;
EGL_MAX_PBUFFER_HEIGHT :: 0x302A;
EGL_MAX_PBUFFER_PIXELS :: 0x302B;
EGL_MAX_PBUFFER_WIDTH :: 0x302C;
EGL_NATIVE_RENDERABLE :: 0x302D;
EGL_NATIVE_VISUAL_ID :: 0x302E;
EGL_NATIVE_VISUAL_TYPE :: 0x302F;
EGL_NONE :: 0x3038;
EGL_NON_CONFORMANT_CONFIG :: 0x3051;
EGL_NOT_INITIALIZED :: 0x3001;

EGL_PBUFFER_BIT :: 0x0001;
EGL_PIXMAP_BIT :: 0x0002;
EGL_READ :: 0x305A;
EGL_RED_SIZE :: 0x3024;
EGL_SAMPLES :: 0x3031;
EGL_SAMPLE_BUFFERS :: 0x3032;
EGL_SLOW_CONFIG :: 0x3050;
EGL_STENCIL_SIZE :: 0x3026;
EGL_SUCCESS :: 0x3000;
EGL_SURFACE_TYPE :: 0x3033;
EGL_TRANSPARENT_BLUE_VALUE :: 0x3035;
EGL_TRANSPARENT_GREEN_VALUE :: 0x3036;
EGL_TRANSPARENT_RED_VALUE :: 0x3037;
EGL_TRANSPARENT_RGB :: 0x3052;
EGL_TRANSPARENT_TYPE :: 0x3034;
EGL_TRUE :: 1;
EGL_VENDOR :: 0x3053;
EGL_VERSION :: 0x3054;
EGL_WIDTH :: 0x3057;
EGL_WINDOW_BIT :: 0x0004;

EGL_VERSION_1_1 :: 1;
EGL_BACK_BUFFER :: 0x3084;
EGL_BIND_TO_TEXTURE_RGB :: 0x3039;
EGL_BIND_TO_TEXTURE_RGBA :: 0x303A;
EGL_CONTEXT_LOST :: 0x300E;
EGL_MIN_SWAP_INTERVAL :: 0x303B;
EGL_MAX_SWAP_INTERVAL :: 0x303C;
EGL_MIPMAP_TEXTURE :: 0x3082;
EGL_MIPMAP_LEVEL :: 0x3083;
EGL_NO_TEXTURE :: 0x305C;
EGL_TEXTURE_2D :: 0x305F;
EGL_TEXTURE_FORMAT :: 0x3080;
EGL_TEXTURE_RGB :: 0x305D;
EGL_TEXTURE_RGBA :: 0x305E;
EGL_TEXTURE_TARGET :: 0x3081;

EGL_VERSION_1_2 :: 1;

EGL_ALPHA_FORMAT :: 0x3088;
EGL_ALPHA_FORMAT_NONPRE :: 0x308B;
EGL_ALPHA_FORMAT_PRE :: 0x308C;
EGL_ALPHA_MASK_SIZE :: 0x303E;
EGL_BUFFER_PRESERVED :: 0x3094;
EGL_BUFFER_DESTROYED :: 0x3095;
EGL_CLIENT_APIS :: 0x308D;
EGL_COLORSPACE :: 0x3087;
EGL_COLORSPACE_sRGB :: 0x3089;
EGL_COLORSPACE_LINEAR :: 0x308A;
EGL_COLOR_BUFFER_TYPE :: 0x303F;
EGL_CONTEXT_CLIENT_TYPE :: 0x3097;
EGL_DISPLAY_SCALING :: 10000;
EGL_HORIZONTAL_RESOLUTION :: 0x3090;
EGL_LUMINANCE_BUFFER :: 0x308F;
EGL_LUMINANCE_SIZE :: 0x303D;
EGL_OPENGL_ES_BIT :: 0x0001;
EGL_OPENVG_BIT :: 0x0002;
EGL_OPENGL_ES_API :: 0x30A0;
EGL_OPENVG_API :: 0x30A1;
EGL_OPENVG_IMAGE :: 0x3096;
EGL_PIXEL_ASPECT_RATIO :: 0x3092;
EGL_RENDERABLE_TYPE :: 0x3040;
EGL_RENDER_BUFFER :: 0x3086;
EGL_RGB_BUFFER :: 0x308E;
EGL_SINGLE_BUFFER :: 0x3085;
EGL_SWAP_BEHAVIOR :: 0x3093;

EGL_VERTICAL_RESOLUTION :: 0x3091;

EGL_VERSION_1_3 :: 1;
EGL_CONFORMANT :: 0x3042;
EGL_CONTEXT_CLIENT_VERSION :: 0x3098;
EGL_MATCH_NATIVE_PIXMAP :: 0x3041;
EGL_OPENGL_ES2_BIT :: 0x0004;
EGL_VG_ALPHA_FORMAT :: 0x3088;
EGL_VG_ALPHA_FORMAT_NONPRE :: 0x308B;
EGL_VG_ALPHA_FORMAT_PRE :: 0x308C;
EGL_VG_ALPHA_FORMAT_PRE_BIT :: 0x0040;
EGL_VG_COLORSPACE :: 0x3087;
EGL_VG_COLORSPACE_sRGB :: 0x3089;
EGL_VG_COLORSPACE_LINEAR :: 0x308A;
EGL_VG_COLORSPACE_LINEAR_BIT :: 0x0020;

EGL_VERSION_1_4 :: 1;

EGL_MULTISAMPLE_RESOLVE_BOX_BIT :: 0x0200;
EGL_MULTISAMPLE_RESOLVE :: 0x3099;
EGL_MULTISAMPLE_RESOLVE_DEFAULT :: 0x309A;
EGL_MULTISAMPLE_RESOLVE_BOX :: 0x309B;
EGL_OPENGL_API :: 0x30A2;
EGL_OPENGL_BIT :: 0x0008;
EGL_SWAP_BEHAVIOR_PRESERVED_BIT :: 0x0400;

EGL_VERSION_1_5 :: 1;

EGL_CONTEXT_MAJOR_VERSION :: 0x3098;
EGL_CONTEXT_MINOR_VERSION :: 0x30FB;
EGL_CONTEXT_OPENGL_PROFILE_MASK :: 0x30FD;
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY :: 0x31BD;
EGL_NO_RESET_NOTIFICATION :: 0x31BE;
EGL_LOSE_CONTEXT_ON_RESET :: 0x31BF;
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT :: 0x00000001;
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
EGL_CONTEXT_OPENGL_DEBUG :: 0x31B0;
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE :: 0x31B1;
EGL_CONTEXT_OPENGL_ROBUST_ACCESS :: 0x31B2;
EGL_OPENGL_ES3_BIT :: 0x00000040;
EGL_CL_EVENT_HANDLE :: 0x309C;
EGL_SYNC_CL_EVENT :: 0x30FE;
EGL_SYNC_CL_EVENT_COMPLETE :: 0x30FF;
EGL_SYNC_PRIOR_COMMANDS_COMPLETE :: 0x30F0;
EGL_SYNC_TYPE :: 0x30F7;
EGL_SYNC_STATUS :: 0x30F1;
EGL_SYNC_CONDITION :: 0x30F8;
EGL_SIGNALED :: 0x30F2;
EGL_UNSIGNALED :: 0x30F3;
EGL_SYNC_FLUSH_COMMANDS_BIT :: 0x0001;
EGL_FOREVER :: 0xFFFFFFFFFFFFFFFF;
EGL_TIMEOUT_EXPIRED :: 0x30F5;
EGL_CONDITION_SATISFIED :: 0x30F6;

EGL_SYNC_FENCE :: 0x30F9;
EGL_GL_COLORSPACE :: 0x309D;
EGL_GL_COLORSPACE_SRGB :: 0x3089;
EGL_GL_COLORSPACE_LINEAR :: 0x308A;
EGL_GL_RENDERBUFFER :: 0x30B9;
EGL_GL_TEXTURE_2D :: 0x30B1;
EGL_GL_TEXTURE_LEVEL :: 0x30BC;
EGL_GL_TEXTURE_3D :: 0x30B2;
EGL_GL_TEXTURE_ZOFFSET :: 0x30BD;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x30B3;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x30B4;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x30B5;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x30B6;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x30B7;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x30B8;
EGL_IMAGE_PRESERVED :: 0x30D2;

__eglext_h_ :: 1;

EGL_EGLEXT_VERSION :: 20230622;

EGL_KHR_cl_event :: 1;
EGL_CL_EVENT_HANDLE_KHR :: 0x309C;
EGL_SYNC_CL_EVENT_KHR :: 0x30FE;
EGL_SYNC_CL_EVENT_COMPLETE_KHR :: 0x30FF;

EGL_KHR_cl_event2 :: 1;

EGL_KHR_client_get_all_proc_addresses :: 1;

EGL_KHR_config_attribs :: 1;
EGL_CONFORMANT_KHR :: 0x3042;
EGL_VG_COLORSPACE_LINEAR_BIT_KHR :: 0x0020;
EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR :: 0x0040;

EGL_KHR_context_flush_control :: 1;
EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR :: 0;
EGL_CONTEXT_RELEASE_BEHAVIOR_KHR :: 0x2097;
EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR :: 0x2098;

EGL_KHR_create_context :: 1;
EGL_CONTEXT_MAJOR_VERSION_KHR :: 0x3098;
EGL_CONTEXT_MINOR_VERSION_KHR :: 0x30FB;
EGL_CONTEXT_FLAGS_KHR :: 0x30FC;
EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR :: 0x30FD;
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR :: 0x31BD;
EGL_NO_RESET_NOTIFICATION_KHR :: 0x31BE;
EGL_LOSE_CONTEXT_ON_RESET_KHR :: 0x31BF;
EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR :: 0x00000001;
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR :: 0x00000002;
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR :: 0x00000004;
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR :: 0x00000001;
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR :: 0x00000002;
EGL_OPENGL_ES3_BIT_KHR :: 0x00000040;

EGL_KHR_create_context_no_error :: 1;
EGL_CONTEXT_OPENGL_NO_ERROR_KHR :: 0x31B3;

EGL_KHR_debug :: 1;

EGL_OBJECT_THREAD_KHR :: 0x33B0;
EGL_OBJECT_DISPLAY_KHR :: 0x33B1;
EGL_OBJECT_CONTEXT_KHR :: 0x33B2;
EGL_OBJECT_SURFACE_KHR :: 0x33B3;
EGL_OBJECT_IMAGE_KHR :: 0x33B4;
EGL_OBJECT_SYNC_KHR :: 0x33B5;
EGL_OBJECT_STREAM_KHR :: 0x33B6;
EGL_DEBUG_MSG_CRITICAL_KHR :: 0x33B9;
EGL_DEBUG_MSG_ERROR_KHR :: 0x33BA;
EGL_DEBUG_MSG_WARN_KHR :: 0x33BB;
EGL_DEBUG_MSG_INFO_KHR :: 0x33BC;
EGL_DEBUG_CALLBACK_KHR :: 0x33B8;

EGL_KHR_display_reference :: 1;
EGL_TRACK_REFERENCES_KHR :: 0x3352;

EGL_KHR_fence_sync :: 1;

EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR :: 0x30F0;
EGL_SYNC_CONDITION_KHR :: 0x30F8;
EGL_SYNC_FENCE_KHR :: 0x30F9;

EGL_KHR_get_all_proc_addresses :: 1;

EGL_KHR_gl_colorspace :: 1;
EGL_GL_COLORSPACE_KHR :: 0x309D;
EGL_GL_COLORSPACE_SRGB_KHR :: 0x3089;
EGL_GL_COLORSPACE_LINEAR_KHR :: 0x308A;

EGL_KHR_gl_renderbuffer_image :: 1;
EGL_GL_RENDERBUFFER_KHR :: 0x30B9;

EGL_KHR_gl_texture_2D_image :: 1;
EGL_GL_TEXTURE_2D_KHR :: 0x30B1;
EGL_GL_TEXTURE_LEVEL_KHR :: 0x30BC;

EGL_KHR_gl_texture_3D_image :: 1;
EGL_GL_TEXTURE_3D_KHR :: 0x30B2;
EGL_GL_TEXTURE_ZOFFSET_KHR :: 0x30BD;

EGL_KHR_gl_texture_cubemap_image :: 1;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR :: 0x30B3;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR :: 0x30B4;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR :: 0x30B5;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR :: 0x30B6;
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR :: 0x30B7;
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR :: 0x30B8;

EGL_KHR_image :: 1;

EGL_NATIVE_PIXMAP_KHR :: 0x30B0;

EGL_KHR_image_base :: 1;
EGL_IMAGE_PRESERVED_KHR :: 0x30D2;

EGL_KHR_image_pixmap :: 1;

EGL_KHR_lock_surface :: 1;
EGL_READ_SURFACE_BIT_KHR :: 0x0001;
EGL_WRITE_SURFACE_BIT_KHR :: 0x0002;
EGL_LOCK_SURFACE_BIT_KHR :: 0x0080;
EGL_OPTIMAL_FORMAT_BIT_KHR :: 0x0100;
EGL_MATCH_FORMAT_KHR :: 0x3043;
EGL_FORMAT_RGB_565_EXACT_KHR :: 0x30C0;
EGL_FORMAT_RGB_565_KHR :: 0x30C1;
EGL_FORMAT_RGBA_8888_EXACT_KHR :: 0x30C2;
EGL_FORMAT_RGBA_8888_KHR :: 0x30C3;
EGL_MAP_PRESERVE_PIXELS_KHR :: 0x30C4;
EGL_LOCK_USAGE_HINT_KHR :: 0x30C5;
EGL_BITMAP_POINTER_KHR :: 0x30C6;
EGL_BITMAP_PITCH_KHR :: 0x30C7;
EGL_BITMAP_ORIGIN_KHR :: 0x30C8;
EGL_BITMAP_PIXEL_RED_OFFSET_KHR :: 0x30C9;
EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR :: 0x30CA;
EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR :: 0x30CB;
EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR :: 0x30CC;
EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR :: 0x30CD;
EGL_LOWER_LEFT_KHR :: 0x30CE;
EGL_UPPER_LEFT_KHR :: 0x30CF;

EGL_KHR_lock_surface2 :: 1;
EGL_BITMAP_PIXEL_SIZE_KHR :: 0x3110;

EGL_KHR_lock_surface3 :: 1;

EGL_KHR_mutable_render_buffer :: 1;
EGL_MUTABLE_RENDER_BUFFER_BIT_KHR :: 0x1000;

EGL_KHR_no_config_context :: 1;

EGL_KHR_partial_update :: 1;
EGL_BUFFER_AGE_KHR :: 0x313D;

EGL_KHR_platform_android :: 1;
EGL_PLATFORM_ANDROID_KHR :: 0x3141;

EGL_KHR_platform_gbm :: 1;
EGL_PLATFORM_GBM_KHR :: 0x31D7;

EGL_KHR_platform_wayland :: 1;
EGL_PLATFORM_WAYLAND_KHR :: 0x31D8;

EGL_KHR_platform_x11 :: 1;
EGL_PLATFORM_X11_KHR :: 0x31D5;
EGL_PLATFORM_X11_SCREEN_KHR :: 0x31D6;

EGL_KHR_reusable_sync :: 1;

EGL_SYNC_STATUS_KHR :: 0x30F1;
EGL_SIGNALED_KHR :: 0x30F2;
EGL_UNSIGNALED_KHR :: 0x30F3;
EGL_TIMEOUT_EXPIRED_KHR :: 0x30F5;
EGL_CONDITION_SATISFIED_KHR :: 0x30F6;
EGL_SYNC_TYPE_KHR :: 0x30F7;
EGL_SYNC_REUSABLE_KHR :: 0x30FA;
EGL_SYNC_FLUSH_COMMANDS_BIT_KHR :: 0x0001;
EGL_FOREVER_KHR :: 0xFFFFFFFFFFFFFFFF;

EGL_KHR_stream :: 1;

EGL_CONSUMER_LATENCY_USEC_KHR :: 0x3210;
EGL_PRODUCER_FRAME_KHR :: 0x3212;
EGL_CONSUMER_FRAME_KHR :: 0x3213;
EGL_STREAM_STATE_KHR :: 0x3214;
EGL_STREAM_STATE_CREATED_KHR :: 0x3215;
EGL_STREAM_STATE_CONNECTING_KHR :: 0x3216;
EGL_STREAM_STATE_EMPTY_KHR :: 0x3217;
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR :: 0x3218;
EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR :: 0x3219;
EGL_STREAM_STATE_DISCONNECTED_KHR :: 0x321A;
EGL_BAD_STREAM_KHR :: 0x321B;
EGL_BAD_STATE_KHR :: 0x321C;

EGL_KHR_stream_attrib :: 1;

EGL_KHR_stream_consumer_gltexture :: 1;

EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR :: 0x321E;

EGL_KHR_stream_cross_process_fd :: 1;

EGL_KHR_stream_fifo :: 1;

EGL_STREAM_FIFO_LENGTH_KHR :: 0x31FC;
EGL_STREAM_TIME_NOW_KHR :: 0x31FD;
EGL_STREAM_TIME_CONSUMER_KHR :: 0x31FE;
EGL_STREAM_TIME_PRODUCER_KHR :: 0x31FF;

EGL_KHR_stream_producer_aldatalocator :: 1;

EGL_KHR_stream_producer_eglsurface :: 1;

EGL_STREAM_BIT_KHR :: 0x0800;

EGL_KHR_surfaceless_context :: 1;

EGL_KHR_swap_buffers_with_damage :: 1;

EGL_KHR_vg_parent_image :: 1;
EGL_VG_PARENT_IMAGE_KHR :: 0x30BA;

EGL_KHR_wait_sync :: 1;

EGL_ANDROID_GLES_layers :: 1;

EGL_ANDROID_blob_cache :: 1;

EGL_ANDROID_create_native_client_buffer :: 1;
EGL_NATIVE_BUFFER_USAGE_ANDROID :: 0x3143;
EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID :: 0x00000001;
EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID :: 0x00000002;
EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID :: 0x00000004;

EGL_ANDROID_framebuffer_target :: 1;
EGL_FRAMEBUFFER_TARGET_ANDROID :: 0x3147;

EGL_ANDROID_front_buffer_auto_refresh :: 1;
EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID :: 0x314C;

EGL_ANDROID_get_frame_timestamps :: 1;

EGL_TIMESTAMPS_ANDROID :: 0x3430;
EGL_COMPOSITE_DEADLINE_ANDROID :: 0x3431;
EGL_COMPOSITE_INTERVAL_ANDROID :: 0x3432;
EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID :: 0x3433;
EGL_REQUESTED_PRESENT_TIME_ANDROID :: 0x3434;
EGL_RENDERING_COMPLETE_TIME_ANDROID :: 0x3435;
EGL_COMPOSITION_LATCH_TIME_ANDROID :: 0x3436;
EGL_FIRST_COMPOSITION_START_TIME_ANDROID :: 0x3437;
EGL_LAST_COMPOSITION_START_TIME_ANDROID :: 0x3438;
EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID :: 0x3439;
EGL_DISPLAY_PRESENT_TIME_ANDROID :: 0x343A;
EGL_DEQUEUE_READY_TIME_ANDROID :: 0x343B;
EGL_READS_DONE_TIME_ANDROID :: 0x343C;

EGL_ANDROID_get_native_client_buffer :: 1;

EGL_ANDROID_image_native_buffer :: 1;
EGL_NATIVE_BUFFER_ANDROID :: 0x3140;

EGL_ANDROID_native_fence_sync :: 1;
EGL_SYNC_NATIVE_FENCE_ANDROID :: 0x3144;
EGL_SYNC_NATIVE_FENCE_FD_ANDROID :: 0x3145;
EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID :: 0x3146;
EGL_NO_NATIVE_FENCE_FD_ANDROID :: -1;

EGL_ANDROID_presentation_time :: 1;

EGL_ANDROID_recordable :: 1;
EGL_RECORDABLE_ANDROID :: 0x3142;

EGL_ANGLE_d3d_share_handle_client_buffer :: 1;
EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE :: 0x3200;

EGL_ANGLE_device_d3d :: 1;
EGL_D3D9_DEVICE_ANGLE :: 0x33A0;
EGL_D3D11_DEVICE_ANGLE :: 0x33A1;

EGL_ANGLE_query_surface_pointer :: 1;

EGL_ANGLE_surface_d3d_texture_2d_share_handle :: 1;

EGL_ANGLE_sync_control_rate :: 1;

EGL_ANGLE_window_fixed_size :: 1;
EGL_FIXED_SIZE_ANGLE :: 0x3201;

EGL_ARM_image_format :: 1;
EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM :: 0x3287;
EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM :: 0x3288;

EGL_ARM_implicit_external_sync :: 1;
EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM :: 0x328A;

EGL_ARM_pixmap_multisample_discard :: 1;
EGL_DISCARD_SAMPLES_ARM :: 0x3286;

EGL_EXT_bind_to_front :: 1;
EGL_FRONT_BUFFER_EXT :: 0x3464;

EGL_EXT_buffer_age :: 1;
EGL_BUFFER_AGE_EXT :: 0x313D;

EGL_EXT_client_extensions :: 1;

EGL_EXT_client_sync :: 1;
EGL_SYNC_CLIENT_EXT :: 0x3364;
EGL_SYNC_CLIENT_SIGNAL_EXT :: 0x3365;

EGL_EXT_compositor :: 1;
EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT :: 0x3460;
EGL_EXTERNAL_REF_ID_EXT :: 0x3461;
EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT :: 0x3462;
EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT :: 0x3463;

EGL_EXT_config_select_group :: 1;
EGL_CONFIG_SELECT_GROUP_EXT :: 0x34C0;

EGL_EXT_create_context_robustness :: 1;
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT :: 0x30BF;
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT :: 0x3138;
EGL_NO_RESET_NOTIFICATION_EXT :: 0x31BE;
EGL_LOSE_CONTEXT_ON_RESET_EXT :: 0x31BF;

EGL_EXT_device_base :: 1;

EGL_BAD_DEVICE_EXT :: 0x322B;
EGL_DEVICE_EXT :: 0x322C;

EGL_EXT_device_drm :: 1;
EGL_DRM_DEVICE_FILE_EXT :: 0x3233;
EGL_DRM_MASTER_FD_EXT :: 0x333C;

EGL_EXT_device_drm_render_node :: 1;
EGL_DRM_RENDER_NODE_FILE_EXT :: 0x3377;

EGL_EXT_device_enumeration :: 1;

EGL_EXT_device_openwf :: 1;
EGL_OPENWF_DEVICE_ID_EXT :: 0x3237;
EGL_OPENWF_DEVICE_EXT :: 0x333D;

EGL_EXT_device_persistent_id :: 1;
EGL_DEVICE_UUID_EXT :: 0x335C;
EGL_DRIVER_UUID_EXT :: 0x335D;
EGL_DRIVER_NAME_EXT :: 0x335E;

EGL_EXT_device_query :: 1;

EGL_EXT_device_query_name :: 1;
EGL_RENDERER_EXT :: 0x335F;

EGL_EXT_explicit_device :: 1;

EGL_EXT_gl_colorspace_bt2020_hlg :: 1;
EGL_GL_COLORSPACE_BT2020_HLG_EXT :: 0x3540;

EGL_EXT_gl_colorspace_bt2020_linear :: 1;
EGL_GL_COLORSPACE_BT2020_LINEAR_EXT :: 0x333F;

EGL_EXT_gl_colorspace_bt2020_pq :: 1;
EGL_GL_COLORSPACE_BT2020_PQ_EXT :: 0x3340;

EGL_EXT_gl_colorspace_display_p3 :: 1;
EGL_GL_COLORSPACE_DISPLAY_P3_EXT :: 0x3363;

EGL_EXT_gl_colorspace_display_p3_linear :: 1;
EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT :: 0x3362;

EGL_EXT_gl_colorspace_display_p3_passthrough :: 1;
EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT :: 0x3490;

EGL_EXT_gl_colorspace_scrgb :: 1;
EGL_GL_COLORSPACE_SCRGB_EXT :: 0x3351;

EGL_EXT_gl_colorspace_scrgb_linear :: 1;
EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT :: 0x3350;

EGL_EXT_image_dma_buf_import :: 1;
EGL_LINUX_DMA_BUF_EXT :: 0x3270;
EGL_LINUX_DRM_FOURCC_EXT :: 0x3271;
EGL_DMA_BUF_PLANE0_FD_EXT :: 0x3272;
EGL_DMA_BUF_PLANE0_OFFSET_EXT :: 0x3273;
EGL_DMA_BUF_PLANE0_PITCH_EXT :: 0x3274;
EGL_DMA_BUF_PLANE1_FD_EXT :: 0x3275;
EGL_DMA_BUF_PLANE1_OFFSET_EXT :: 0x3276;
EGL_DMA_BUF_PLANE1_PITCH_EXT :: 0x3277;
EGL_DMA_BUF_PLANE2_FD_EXT :: 0x3278;
EGL_DMA_BUF_PLANE2_OFFSET_EXT :: 0x3279;
EGL_DMA_BUF_PLANE2_PITCH_EXT :: 0x327A;
EGL_YUV_COLOR_SPACE_HINT_EXT :: 0x327B;
EGL_SAMPLE_RANGE_HINT_EXT :: 0x327C;
EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT :: 0x327D;
EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT :: 0x327E;
EGL_ITU_REC601_EXT :: 0x327F;
EGL_ITU_REC709_EXT :: 0x3280;
EGL_ITU_REC2020_EXT :: 0x3281;
EGL_YUV_FULL_RANGE_EXT :: 0x3282;
EGL_YUV_NARROW_RANGE_EXT :: 0x3283;
EGL_YUV_CHROMA_SITING_0_EXT :: 0x3284;
EGL_YUV_CHROMA_SITING_0_5_EXT :: 0x3285;

EGL_EXT_image_dma_buf_import_modifiers :: 1;
EGL_DMA_BUF_PLANE3_FD_EXT :: 0x3440;
EGL_DMA_BUF_PLANE3_OFFSET_EXT :: 0x3441;
EGL_DMA_BUF_PLANE3_PITCH_EXT :: 0x3442;
EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT :: 0x3443;
EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT :: 0x3444;
EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT :: 0x3445;
EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT :: 0x3446;
EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT :: 0x3447;
EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT :: 0x3448;
EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT :: 0x3449;
EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT :: 0x344A;

EGL_EXT_image_gl_colorspace :: 1;
EGL_GL_COLORSPACE_DEFAULT_EXT :: 0x314D;

EGL_EXT_image_implicit_sync_control :: 1;
EGL_IMPORT_SYNC_TYPE_EXT :: 0x3470;
EGL_IMPORT_IMPLICIT_SYNC_EXT :: 0x3471;
EGL_IMPORT_EXPLICIT_SYNC_EXT :: 0x3472;

EGL_EXT_multiview_window :: 1;
EGL_MULTIVIEW_VIEW_COUNT_EXT :: 0x3134;

EGL_EXT_output_base :: 1;

EGL_BAD_OUTPUT_LAYER_EXT :: 0x322D;
EGL_BAD_OUTPUT_PORT_EXT :: 0x322E;
EGL_SWAP_INTERVAL_EXT :: 0x322F;

EGL_EXT_output_drm :: 1;
EGL_DRM_CRTC_EXT :: 0x3234;
EGL_DRM_PLANE_EXT :: 0x3235;
EGL_DRM_CONNECTOR_EXT :: 0x3236;

EGL_EXT_output_openwf :: 1;
EGL_OPENWF_PIPELINE_ID_EXT :: 0x3238;
EGL_OPENWF_PORT_ID_EXT :: 0x3239;

EGL_EXT_pixel_format_float :: 1;
EGL_COLOR_COMPONENT_TYPE_EXT :: 0x3339;
EGL_COLOR_COMPONENT_TYPE_FIXED_EXT :: 0x333A;
EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT :: 0x333B;

EGL_EXT_platform_base :: 1;

EGL_EXT_platform_device :: 1;
EGL_PLATFORM_DEVICE_EXT :: 0x313F;

EGL_EXT_platform_wayland :: 1;
EGL_PLATFORM_WAYLAND_EXT :: 0x31D8;

EGL_EXT_platform_x11 :: 1;
EGL_PLATFORM_X11_EXT :: 0x31D5;
EGL_PLATFORM_X11_SCREEN_EXT :: 0x31D6;

EGL_EXT_platform_xcb :: 1;
EGL_PLATFORM_XCB_EXT :: 0x31DC;
EGL_PLATFORM_XCB_SCREEN_EXT :: 0x31DE;

EGL_EXT_present_opaque :: 1;
EGL_PRESENT_OPAQUE_EXT :: 0x31DF;

EGL_EXT_protected_content :: 1;
EGL_PROTECTED_CONTENT_EXT :: 0x32C0;

EGL_EXT_protected_surface :: 1;

EGL_EXT_stream_consumer_egloutput :: 1;

EGL_EXT_surface_CTA861_3_metadata :: 1;
EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT :: 0x3360;
EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT :: 0x3361;

EGL_EXT_surface_SMPTE2086_metadata :: 1;
EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT :: 0x3341;
EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT :: 0x3342;
EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT :: 0x3343;
EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT :: 0x3344;
EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT :: 0x3345;
EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT :: 0x3346;
EGL_SMPTE2086_WHITE_POINT_X_EXT :: 0x3347;
EGL_SMPTE2086_WHITE_POINT_Y_EXT :: 0x3348;
EGL_SMPTE2086_MAX_LUMINANCE_EXT :: 0x3349;
EGL_SMPTE2086_MIN_LUMINANCE_EXT :: 0x334A;
EGL_METADATA_SCALING_EXT :: 50000;

EGL_EXT_surface_compression :: 1;
EGL_SURFACE_COMPRESSION_EXT :: 0x34B0;
EGL_SURFACE_COMPRESSION_PLANE1_EXT :: 0x328E;
EGL_SURFACE_COMPRESSION_PLANE2_EXT :: 0x328F;
EGL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT :: 0x34B1;
EGL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT :: 0x34B2;
EGL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT :: 0x34B4;
EGL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT :: 0x34B5;
EGL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT :: 0x34B6;
EGL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT :: 0x34B7;
EGL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT :: 0x34B8;
EGL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT :: 0x34B9;
EGL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT :: 0x34BA;
EGL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT :: 0x34BB;
EGL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT :: 0x34BC;
EGL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT :: 0x34BD;
EGL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT :: 0x34BE;
EGL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT :: 0x34BF;

EGL_EXT_swap_buffers_with_damage :: 1;

EGL_EXT_sync_reuse :: 1;

EGL_EXT_yuv_surface :: 1;
EGL_YUV_ORDER_EXT :: 0x3301;
EGL_YUV_NUMBER_OF_PLANES_EXT :: 0x3311;
EGL_YUV_SUBSAMPLE_EXT :: 0x3312;
EGL_YUV_DEPTH_RANGE_EXT :: 0x3317;
EGL_YUV_CSC_STANDARD_EXT :: 0x330A;
EGL_YUV_PLANE_BPP_EXT :: 0x331A;
EGL_YUV_BUFFER_EXT :: 0x3300;
EGL_YUV_ORDER_YUV_EXT :: 0x3302;
EGL_YUV_ORDER_YVU_EXT :: 0x3303;
EGL_YUV_ORDER_YUYV_EXT :: 0x3304;
EGL_YUV_ORDER_UYVY_EXT :: 0x3305;
EGL_YUV_ORDER_YVYU_EXT :: 0x3306;
EGL_YUV_ORDER_VYUY_EXT :: 0x3307;
EGL_YUV_ORDER_AYUV_EXT :: 0x3308;
EGL_YUV_SUBSAMPLE_4_2_0_EXT :: 0x3313;
EGL_YUV_SUBSAMPLE_4_2_2_EXT :: 0x3314;
EGL_YUV_SUBSAMPLE_4_4_4_EXT :: 0x3315;
EGL_YUV_DEPTH_RANGE_LIMITED_EXT :: 0x3318;
EGL_YUV_DEPTH_RANGE_FULL_EXT :: 0x3319;
EGL_YUV_CSC_STANDARD_601_EXT :: 0x330B;
EGL_YUV_CSC_STANDARD_709_EXT :: 0x330C;
EGL_YUV_CSC_STANDARD_2020_EXT :: 0x330D;
EGL_YUV_PLANE_BPP_0_EXT :: 0x331B;
EGL_YUV_PLANE_BPP_8_EXT :: 0x331C;
EGL_YUV_PLANE_BPP_10_EXT :: 0x331D;

EGL_HI_clientpixmap :: 1;

EGL_CLIENT_PIXMAP_POINTER_HI :: 0x8F74;

EGL_HI_colorformats :: 1;
EGL_COLOR_FORMAT_HI :: 0x8F70;
EGL_COLOR_RGB_HI :: 0x8F71;
EGL_COLOR_RGBA_HI :: 0x8F72;
EGL_COLOR_ARGB_HI :: 0x8F73;

EGL_IMG_context_priority :: 1;
EGL_CONTEXT_PRIORITY_LEVEL_IMG :: 0x3100;
EGL_CONTEXT_PRIORITY_HIGH_IMG :: 0x3101;
EGL_CONTEXT_PRIORITY_MEDIUM_IMG :: 0x3102;
EGL_CONTEXT_PRIORITY_LOW_IMG :: 0x3103;

EGL_IMG_image_plane_attribs :: 1;
EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG :: 0x3105;
EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG :: 0x3106;

EGL_MESA_drm_image :: 1;
EGL_DRM_BUFFER_FORMAT_MESA :: 0x31D0;
EGL_DRM_BUFFER_USE_MESA :: 0x31D1;
EGL_DRM_BUFFER_FORMAT_ARGB32_MESA :: 0x31D2;
EGL_DRM_BUFFER_MESA :: 0x31D3;
EGL_DRM_BUFFER_STRIDE_MESA :: 0x31D4;
EGL_DRM_BUFFER_USE_SCANOUT_MESA :: 0x00000001;
EGL_DRM_BUFFER_USE_SHARE_MESA :: 0x00000002;
EGL_DRM_BUFFER_USE_CURSOR_MESA :: 0x00000004;

EGL_MESA_image_dma_buf_export :: 1;

EGL_MESA_platform_gbm :: 1;
EGL_PLATFORM_GBM_MESA :: 0x31D7;

EGL_MESA_platform_surfaceless :: 1;
EGL_PLATFORM_SURFACELESS_MESA :: 0x31DD;

EGL_MESA_query_driver :: 1;

EGL_NOK_swap_region :: 1;

EGL_NOK_swap_region2 :: 1;

EGL_NOK_texture_from_pixmap :: 1;
EGL_Y_INVERTED_NOK :: 0x307F;

EGL_NV_3dvision_surface :: 1;
EGL_AUTO_STEREO_NV :: 0x3136;

EGL_NV_context_priority_realtime :: 1;
EGL_CONTEXT_PRIORITY_REALTIME_NV :: 0x3357;

EGL_NV_coverage_sample :: 1;
EGL_COVERAGE_BUFFERS_NV :: 0x30E0;
EGL_COVERAGE_SAMPLES_NV :: 0x30E1;

EGL_NV_coverage_sample_resolve :: 1;
EGL_COVERAGE_SAMPLE_RESOLVE_NV :: 0x3131;
EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV :: 0x3132;
EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV :: 0x3133;

EGL_NV_cuda_event :: 1;
EGL_CUDA_EVENT_HANDLE_NV :: 0x323B;
EGL_SYNC_CUDA_EVENT_NV :: 0x323C;
EGL_SYNC_CUDA_EVENT_COMPLETE_NV :: 0x323D;

EGL_NV_depth_nonlinear :: 1;
EGL_DEPTH_ENCODING_NV :: 0x30E2;
EGL_DEPTH_ENCODING_NONE_NV :: 0;
EGL_DEPTH_ENCODING_NONLINEAR_NV :: 0x30E3;

EGL_NV_device_cuda :: 1;
EGL_CUDA_DEVICE_NV :: 0x323A;

EGL_NV_native_query :: 1;

EGL_NV_post_convert_rounding :: 1;

EGL_NV_post_sub_buffer :: 1;
EGL_POST_SUB_BUFFER_SUPPORTED_NV :: 0x30BE;

EGL_NV_quadruple_buffer :: 1;
EGL_QUADRUPLE_BUFFER_NV :: 0x3231;

EGL_NV_robustness_video_memory_purge :: 1;
EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV :: 0x334C;

EGL_NV_stream_consumer_eglimage :: 1;
EGL_STREAM_CONSUMER_IMAGE_NV :: 0x3373;
EGL_STREAM_IMAGE_ADD_NV :: 0x3374;
EGL_STREAM_IMAGE_REMOVE_NV :: 0x3375;
EGL_STREAM_IMAGE_AVAILABLE_NV :: 0x3376;

EGL_NV_stream_consumer_eglimage_use_scanout_attrib :: 1;
EGL_STREAM_CONSUMER_IMAGE_USE_SCANOUT_NV :: 0x3378;

EGL_NV_stream_consumer_gltexture_yuv :: 1;
EGL_YUV_PLANE0_TEXTURE_UNIT_NV :: 0x332C;
EGL_YUV_PLANE1_TEXTURE_UNIT_NV :: 0x332D;
EGL_YUV_PLANE2_TEXTURE_UNIT_NV :: 0x332E;

EGL_NV_stream_cross_display :: 1;
EGL_STREAM_CROSS_DISPLAY_NV :: 0x334E;

EGL_NV_stream_cross_object :: 1;
EGL_STREAM_CROSS_OBJECT_NV :: 0x334D;

EGL_NV_stream_cross_partition :: 1;
EGL_STREAM_CROSS_PARTITION_NV :: 0x323F;

EGL_NV_stream_cross_process :: 1;
EGL_STREAM_CROSS_PROCESS_NV :: 0x3245;

EGL_NV_stream_cross_system :: 1;
EGL_STREAM_CROSS_SYSTEM_NV :: 0x334F;

EGL_NV_stream_dma :: 1;
EGL_STREAM_DMA_NV :: 0x3371;
EGL_STREAM_DMA_SERVER_NV :: 0x3372;

EGL_NV_stream_fifo_next :: 1;
EGL_PENDING_FRAME_NV :: 0x3329;
EGL_STREAM_TIME_PENDING_NV :: 0x332A;

EGL_NV_stream_fifo_synchronous :: 1;
EGL_STREAM_FIFO_SYNCHRONOUS_NV :: 0x3336;

EGL_NV_stream_flush :: 1;

EGL_NV_stream_frame_limits :: 1;
EGL_PRODUCER_MAX_FRAME_HINT_NV :: 0x3337;
EGL_CONSUMER_MAX_FRAME_HINT_NV :: 0x3338;

EGL_NV_stream_metadata :: 1;
EGL_MAX_STREAM_METADATA_BLOCKS_NV :: 0x3250;
EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV :: 0x3251;
EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV :: 0x3252;
EGL_PRODUCER_METADATA_NV :: 0x3253;
EGL_CONSUMER_METADATA_NV :: 0x3254;
EGL_PENDING_METADATA_NV :: 0x3328;
EGL_METADATA0_SIZE_NV :: 0x3255;
EGL_METADATA1_SIZE_NV :: 0x3256;
EGL_METADATA2_SIZE_NV :: 0x3257;
EGL_METADATA3_SIZE_NV :: 0x3258;
EGL_METADATA0_TYPE_NV :: 0x3259;
EGL_METADATA1_TYPE_NV :: 0x325A;
EGL_METADATA2_TYPE_NV :: 0x325B;
EGL_METADATA3_TYPE_NV :: 0x325C;

EGL_NV_stream_origin :: 1;
EGL_STREAM_FRAME_ORIGIN_X_NV :: 0x3366;
EGL_STREAM_FRAME_ORIGIN_Y_NV :: 0x3367;
EGL_STREAM_FRAME_MAJOR_AXIS_NV :: 0x3368;
EGL_CONSUMER_AUTO_ORIENTATION_NV :: 0x3369;
EGL_PRODUCER_AUTO_ORIENTATION_NV :: 0x336A;
EGL_LEFT_NV :: 0x336B;
EGL_RIGHT_NV :: 0x336C;
EGL_TOP_NV :: 0x336D;
EGL_BOTTOM_NV :: 0x336E;
EGL_X_AXIS_NV :: 0x336F;
EGL_Y_AXIS_NV :: 0x3370;

EGL_NV_stream_remote :: 1;
EGL_STREAM_STATE_INITIALIZING_NV :: 0x3240;
EGL_STREAM_TYPE_NV :: 0x3241;
EGL_STREAM_PROTOCOL_NV :: 0x3242;
EGL_STREAM_ENDPOINT_NV :: 0x3243;
EGL_STREAM_LOCAL_NV :: 0x3244;
EGL_STREAM_PRODUCER_NV :: 0x3247;
EGL_STREAM_CONSUMER_NV :: 0x3248;
EGL_STREAM_PROTOCOL_FD_NV :: 0x3246;

EGL_NV_stream_reset :: 1;
EGL_SUPPORT_RESET_NV :: 0x3334;
EGL_SUPPORT_REUSE_NV :: 0x3335;

EGL_NV_stream_socket :: 1;
EGL_STREAM_PROTOCOL_SOCKET_NV :: 0x324B;
EGL_SOCKET_HANDLE_NV :: 0x324C;
EGL_SOCKET_TYPE_NV :: 0x324D;

EGL_NV_stream_socket_inet :: 1;
EGL_SOCKET_TYPE_INET_NV :: 0x324F;

EGL_NV_stream_socket_unix :: 1;
EGL_SOCKET_TYPE_UNIX_NV :: 0x324E;

EGL_NV_stream_sync :: 1;
EGL_SYNC_NEW_FRAME_NV :: 0x321F;

EGL_NV_sync :: 1;

EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV :: 0x30E6;
EGL_SYNC_STATUS_NV :: 0x30E7;
EGL_SIGNALED_NV :: 0x30E8;
EGL_UNSIGNALED_NV :: 0x30E9;
EGL_SYNC_FLUSH_COMMANDS_BIT_NV :: 0x0001;
EGL_FOREVER_NV :: 0xFFFFFFFFFFFFFFFF;
EGL_ALREADY_SIGNALED_NV :: 0x30EA;
EGL_TIMEOUT_EXPIRED_NV :: 0x30EB;
EGL_CONDITION_SATISFIED_NV :: 0x30EC;
EGL_SYNC_TYPE_NV :: 0x30ED;
EGL_SYNC_CONDITION_NV :: 0x30EE;
EGL_SYNC_FENCE_NV :: 0x30EF;

EGL_NV_system_time :: 1;

EGL_NV_triple_buffer :: 1;
EGL_TRIPLE_BUFFER_NV :: 0x3230;

EGL_QNX_image_native_buffer :: 1;
EGL_NATIVE_BUFFER_QNX :: 0x3551;

EGL_QNX_platform_screen :: 1;
EGL_PLATFORM_SCREEN_QNX :: 0x3550;

EGL_TIZEN_image_native_buffer :: 1;
EGL_NATIVE_BUFFER_TIZEN :: 0x32A0;

EGL_TIZEN_image_native_surface :: 1;
EGL_NATIVE_SURFACE_TIZEN :: 0x32A1;

EGL_WL_bind_wayland_display :: 1;
PFNEGLBINDWAYLANDDISPLAYWL :: PFNEGLBINDWAYLANDDISPLAYWLPROC;
PFNEGLUNBINDWAYLANDDISPLAYWL :: PFNEGLUNBINDWAYLANDDISPLAYWLPROC;
PFNEGLQUERYWAYLANDBUFFERWL :: PFNEGLQUERYWAYLANDBUFFERWLPROC;

EGL_WAYLAND_BUFFER_WL :: 0x31D5;
EGL_WAYLAND_PLANE_WL :: 0x31D6;
EGL_TEXTURE_Y_U_V_WL :: 0x31D7;
EGL_TEXTURE_Y_UV_WL :: 0x31D8;
EGL_TEXTURE_Y_XUXV_WL :: 0x31D9;
EGL_TEXTURE_EXTERNAL_WL :: 0x31DA;
EGL_WAYLAND_Y_INVERTED_WL :: 0x31DB;

EGL_WL_create_wayland_buffer_from_image :: 1;
PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL :: PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC;

EGL_ANGLE_robust_resource_initialization :: 1;
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE :: 0x3453;

EGL_ANGLE_keyed_mutex :: 1;
EGL_DXGI_KEYED_MUTEX_ANGLE :: 0x33A2;

EGL_ANGLE_d3d_texture_client_buffer :: 1;
EGL_D3D_TEXTURE_ANGLE :: 0x33A3;
EGL_TEXTURE_OFFSET_X_ANGLE :: 0x3490;
EGL_TEXTURE_OFFSET_Y_ANGLE :: 0x3491;
EGL_D3D11_TEXTURE_PLANE_ANGLE :: 0x3492;
EGL_D3D11_TEXTURE_ARRAY_SLICE_ANGLE :: 0x3493;

EGL_ANGLE_software_display :: 1;
EGL_SOFTWARE_DISPLAY_ANGLE :: cast,trunc(EGLNativeDisplayType) -1;

EGL_ANGLE_direct3d_display :: 1;
EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE :: cast,trunc(EGLNativeDisplayType) -2;
EGL_D3D11_ONLY_DISPLAY_ANGLE :: cast,trunc(EGLNativeDisplayType) -3;

EGL_ANGLE_direct_composition :: 1;
EGL_DIRECT_COMPOSITION_ANGLE :: 0x33A5;

EGL_ANGLE_platform_angle :: 1;
EGL_PLATFORM_ANGLE_ANGLE :: 0x3202;
EGL_PLATFORM_ANGLE_TYPE_ANGLE :: 0x3203;
EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE :: 0x3204;
EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE :: 0x3205;
EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE :: 0x3206;
EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED_ANGLE :: 0x3451;
EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE :: 0x3209;
EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE :: 0x320A;
EGL_PLATFORM_ANGLE_DEVICE_TYPE_NULL_ANGLE :: 0x345E;
EGL_PLATFORM_ANGLE_NATIVE_PLATFORM_TYPE_ANGLE :: 0x348F;

EGL_ANGLE_platform_angle_d3d :: 1;
EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE :: 0x3207;
EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE :: 0x3208;
EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE :: 0x320B;
EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_REFERENCE_ANGLE :: 0x320C;
EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE :: 0x320F;

EGL_ANGLE_platform_angle_d3d_luid :: 1;
EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE :: 0x34A0;
EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE :: 0x34A1;

EGL_ANGLE_platform_angle_d3d11on12 :: 1;
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE :: 0x3488;

EGL_ANGLE_platform_angle_opengl :: 1;
EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE :: 0x320D;
EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE :: 0x320E;
EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE :: 0x3480;

EGL_ANGLE_platform_angle_null :: 1;
EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE :: 0x33AE;

EGL_ANGLE_platform_angle_webgpu :: 1;
EGL_PLATFORM_ANGLE_TYPE_WEBGPU_ANGLE :: 0x34DD;
EGL_PLATFORM_ANGLE_DAWN_PROC_TABLE_ANGLE :: 0x3468;
EGL_PLATFORM_ANGLE_WEBGPU_DEVICE_ANGLE :: 0x34F6;

EGL_ANGLE_platform_angle_vulkan :: 1;
EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE :: 0x3450;
EGL_PLATFORM_VULKAN_DISPLAY_MODE_SIMPLE_ANGLE :: 0x34A4;
EGL_PLATFORM_VULKAN_DISPLAY_MODE_HEADLESS_ANGLE :: 0x34A5;

EGL_ANGLE_platform_angle_vulkan_device_uuid :: 1;
EGL_PLATFORM_ANGLE_VULKAN_DEVICE_UUID_ANGLE :: 0x34F0;
EGL_PLATFORM_ANGLE_VULKAN_DRIVER_UUID_ANGLE :: 0x34F1;
EGL_PLATFORM_ANGLE_VULKAN_DRIVER_ID_ANGLE :: 0x34F2;

EGL_ANGLE_platform_angle_metal :: 1;
EGL_PLATFORM_ANGLE_TYPE_METAL_ANGLE :: 0x3489;

EGL_PLATFORM_ANGLE_DEVICE_TYPE_SWIFTSHADER_ANGLE :: 0x3487;

EGL_PLATFORM_ANGLE_DEVICE_TYPE_EGL_ANGLE :: 0x348E;

EGL_ANGLE_context_virtualization :: 1;
EGL_CONTEXT_VIRTUALIZATION_GROUP_ANGLE :: 0x3481;

EGL_ANGLE_platform_angle_device_context_volatile_eagl :: 1;
EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_EAGL_ANGLE :: 0x34A2;

EGL_ANGLE_platform_angle_device_context_volatile_cgl :: 1;
EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_CGL_ANGLE :: 0x34A3;

EGL_PLATFORM_ANGLE_DEVICE_ID_HIGH_ANGLE :: 0x34D6;
EGL_PLATFORM_ANGLE_DEVICE_ID_LOW_ANGLE :: 0x34D7;
EGL_PLATFORM_ANGLE_DISPLAY_KEY_ANGLE :: 0x34DC;

EGL_X11_VISUAL_ID_ANGLE :: 0x33A3;

EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE :: 0x33A7;
EGL_SURFACE_ORIENTATION_ANGLE :: 0x33A8;
EGL_SURFACE_ORIENTATION_INVERT_X_ANGLE :: 0x0001;
EGL_SURFACE_ORIENTATION_INVERT_Y_ANGLE :: 0x0002;

EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE :: 0x33A4;
EGL_EXPERIMENTAL_PRESENT_PATH_FAST_ANGLE :: 0x33A9;
EGL_EXPERIMENTAL_PRESENT_PATH_COPY_ANGLE :: 0x33AA;

EGL_D3D_TEXTURE_SUBRESOURCE_ID_ANGLE :: 0x33AB;

EGL_ANGLE_create_context_webgl_compatibility :: 1;
EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE :: 0x33AC;

EGL_ANGLE_display_texture_share_group :: 1;
EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE :: 0x33AF;

EGL_CHROMIUM_create_context_bind_generates_resource :: 1;
EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM :: 0x33AD;

EGL_ANGLE_metal_create_context_ownership_identity :: 1;
EGL_CONTEXT_METAL_OWNERSHIP_IDENTITY_ANGLE :: 0x34D2;

EGL_ANGLE_create_context_client_arrays :: 1;
EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE :: 0x3452;

EGL_ANGLE_device_creation :: 1;

EGL_ANGLE_program_cache_control :: 1;
EGL_PROGRAM_CACHE_SIZE_ANGLE :: 0x3455;
EGL_PROGRAM_CACHE_KEY_LENGTH_ANGLE :: 0x3456;
EGL_PROGRAM_CACHE_RESIZE_ANGLE :: 0x3457;
EGL_PROGRAM_CACHE_TRIM_ANGLE :: 0x3458;
EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE :: 0x3459;

EGL_ANGLE_iosurface_client_buffer :: 1;
EGL_IOSURFACE_ANGLE :: 0x3454;
EGL_IOSURFACE_PLANE_ANGLE :: 0x345A;
EGL_TEXTURE_RECTANGLE_ANGLE :: 0x345B;
EGL_TEXTURE_TYPE_ANGLE :: 0x345C;
EGL_TEXTURE_INTERNAL_FORMAT_ANGLE :: 0x345D;
EGL_IOSURFACE_USAGE_HINT_ANGLE :: 0x348A;
EGL_IOSURFACE_READ_HINT_ANGLE :: 0x0001;
EGL_IOSURFACE_WRITE_HINT_ANGLE :: 0x0002;
EGL_BIND_TO_TEXTURE_TARGET_ANGLE :: 0x348D;

ANGLE_metal_texture_client_buffer :: 1;
EGL_METAL_TEXTURE_ANGLE :: 0x34A7;
EGL_METAL_TEXTURE_ARRAY_SLICE_ANGLE :: 0x34DD;

EGL_ANGLE_create_context_extensions_enabled :: 1;
EGL_EXTENSIONS_ENABLED_ANGLE :: 0x345F;

EGL_CHROMIUM_sync_control :: 1;

EGL_ANGLE_power_preference :: 1;
EGL_POWER_PREFERENCE_ANGLE :: 0x3482;
EGL_LOW_POWER_ANGLE :: 0x0001;
EGL_HIGH_POWER_ANGLE :: 0x0002;

EGL_ANGLE_wait_until_work_scheduled :: 1;

EGL_ANGLE_feature_control :: 1;
EGL_FEATURE_NAME_ANGLE :: 0x3460;
EGL_FEATURE_CATEGORY_ANGLE :: 0x3461;
EGL_FEATURE_STATUS_ANGLE :: 0x3464;
EGL_FEATURE_COUNT_ANGLE :: 0x3465;
EGL_FEATURE_OVERRIDES_ENABLED_ANGLE :: 0x3466;
EGL_FEATURE_OVERRIDES_DISABLED_ANGLE :: 0x3467;
EGL_FEATURE_ALL_DISABLED_ANGLE :: 0x3469;

EGL_D3D11_TEXTURE_ANGLE :: 0x3484;

EGL_ANGLE_create_context_backwards_compatible :: 1;
EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE :: 0x3483;

EGL_ANGLE_device_cgl :: 1;
EGL_CGL_CONTEXT_ANGLE :: 0x3485;
EGL_CGL_PIXEL_FORMAT_ANGLE :: 0x3486;

EGL_ANGLE_prepare_swap_buffers :: 1;

EGL_ANGLE_device_eagl :: 1;
EGL_EAGL_CONTEXT_ANGLE :: 0x348C;

EGL_ANGLE_device_metal :: 1;
EGL_METAL_DEVICE_ANGLE :: 0x34A6;

EGL_ANGLE_display_semaphore_share_group :: 1;
EGL_DISPLAY_SEMAPHORE_SHARE_GROUP_ANGLE :: 0x348D;

EGL_ANGLE_external_context_and_surface :: 1;
EGL_EXTERNAL_CONTEXT_ANGLE :: 0x348E;
EGL_EXTERNAL_SURFACE_ANGLE :: 0x348F;

EGL_ANGLE_create_surface_swap_interval :: 1;
EGL_SWAP_INTERVAL_ANGLE :: 0x322F;

EGL_ANGLE_device_vulkan :: 1;
EGL_VULKAN_VERSION_ANGLE :: 0x34A8;
EGL_VULKAN_INSTANCE_ANGLE :: 0x34A9;
EGL_VULKAN_INSTANCE_EXTENSIONS_ANGLE :: 0x34AA;
EGL_VULKAN_PHYSICAL_DEVICE_ANGLE :: 0x34AB;
EGL_VULKAN_DEVICE_ANGLE :: 0x34AC;
EGL_VULKAN_DEVICE_EXTENSIONS_ANGLE :: 0x34AD;
EGL_VULKAN_FEATURES_ANGLE :: 0x34AE;
EGL_VULKAN_QUEUE_ANGLE :: 0x34AF;
EGL_VULKAN_QUEUE_FAMILIY_INDEX_ANGLE :: 0x34D0;
EGL_VULKAN_GET_INSTANCE_PROC_ADDR :: 0x34D1;

EGL_VULKAN_IMAGE_ANGLE :: 0x34D3;
EGL_VULKAN_IMAGE_CREATE_INFO_HI_ANGLE :: 0x34D4;
EGL_VULKAN_IMAGE_CREATE_INFO_LO_ANGLE :: 0x34D5;

EGL_ANGLE_metal_hared_event_sync :: 1;
EGL_SYNC_METAL_SHARED_EVENT_ANGLE :: 0x34D8;
EGL_SYNC_METAL_SHARED_EVENT_OBJECT_ANGLE :: 0x34D9;
EGL_SYNC_METAL_SHARED_EVENT_SIGNAL_VALUE_LO_ANGLE :: 0x34DA;
EGL_SYNC_METAL_SHARED_EVENT_SIGNAL_VALUE_HI_ANGLE :: 0x34DB;
EGL_SYNC_METAL_SHARED_EVENT_SIGNALED_ANGLE :: 0x34DC;

EGL_ANGLE_global_fence_sync :: 1;
EGL_SYNC_GLOBAL_FENCE_ANGLE :: 0x34DE;

EGL_ANGLE_no_error :: 1;

EGL_ANGLE_memory_usage_report :: 1;
EGL_CONTEXT_MEMORY_USAGE_ANGLE :: 0x3462;

EGL_ANGLE_device_webgpu :: 1;
EGL_WEBGPU_DEVICE_ANGLE :: 0x34F3;
EGL_WEBGPU_ADAPTER_ANGLE :: 0x34F4;

ANGLE_webgpu_texture_client_buffer :: 1;
EGL_WEBGPU_TEXTURE_ANGLE :: 0x34F5;

__gles2_gl2_h_ :: 1;

GL_GLES_PROTOTYPES :: 1;

GL_ES_VERSION_2_0 :: 1;

GL_DEPTH_BUFFER_BIT :: 0x00000100;
GL_STENCIL_BUFFER_BIT :: 0x00000400;
GL_COLOR_BUFFER_BIT :: 0x00004000;
GL_FALSE :: 0;
GL_TRUE :: 1;
GL_POINTS :: 0x0000;
GL_LINES :: 0x0001;
GL_LINE_LOOP :: 0x0002;
GL_LINE_STRIP :: 0x0003;
GL_TRIANGLES :: 0x0004;
GL_TRIANGLE_STRIP :: 0x0005;
GL_TRIANGLE_FAN :: 0x0006;
GL_ZERO :: 0;
GL_ONE :: 1;
GL_SRC_COLOR :: 0x0300;
GL_ONE_MINUS_SRC_COLOR :: 0x0301;
GL_SRC_ALPHA :: 0x0302;
GL_ONE_MINUS_SRC_ALPHA :: 0x0303;
GL_DST_ALPHA :: 0x0304;
GL_ONE_MINUS_DST_ALPHA :: 0x0305;
GL_DST_COLOR :: 0x0306;
GL_ONE_MINUS_DST_COLOR :: 0x0307;
GL_SRC_ALPHA_SATURATE :: 0x0308;
GL_FUNC_ADD :: 0x8006;
GL_BLEND_EQUATION :: 0x8009;
GL_BLEND_EQUATION_RGB :: 0x8009;
GL_BLEND_EQUATION_ALPHA :: 0x883D;
GL_FUNC_SUBTRACT :: 0x800A;
GL_FUNC_REVERSE_SUBTRACT :: 0x800B;
GL_BLEND_DST_RGB :: 0x80C8;
GL_BLEND_SRC_RGB :: 0x80C9;
GL_BLEND_DST_ALPHA :: 0x80CA;
GL_BLEND_SRC_ALPHA :: 0x80CB;
GL_CONSTANT_COLOR :: 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002;
GL_CONSTANT_ALPHA :: 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
GL_BLEND_COLOR :: 0x8005;
GL_ARRAY_BUFFER :: 0x8892;
GL_ELEMENT_ARRAY_BUFFER :: 0x8893;
GL_ARRAY_BUFFER_BINDING :: 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895;
GL_STREAM_DRAW :: 0x88E0;
GL_STATIC_DRAW :: 0x88E4;
GL_DYNAMIC_DRAW :: 0x88E8;
GL_BUFFER_SIZE :: 0x8764;
GL_BUFFER_USAGE :: 0x8765;
GL_CURRENT_VERTEX_ATTRIB :: 0x8626;
GL_FRONT :: 0x0404;
GL_BACK :: 0x0405;
GL_FRONT_AND_BACK :: 0x0408;
GL_TEXTURE_2D :: 0x0DE1;
GL_CULL_FACE :: 0x0B44;
GL_BLEND :: 0x0BE2;
GL_DITHER :: 0x0BD0;
GL_STENCIL_TEST :: 0x0B90;
GL_DEPTH_TEST :: 0x0B71;
GL_SCISSOR_TEST :: 0x0C11;
GL_POLYGON_OFFSET_FILL :: 0x8037;
GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809E;
GL_SAMPLE_COVERAGE :: 0x80A0;
GL_NO_ERROR :: 0;
GL_INVALID_ENUM :: 0x0500;
GL_INVALID_VALUE :: 0x0501;
GL_INVALID_OPERATION :: 0x0502;
GL_OUT_OF_MEMORY :: 0x0505;
GL_CW :: 0x0900;
GL_CCW :: 0x0901;
GL_LINE_WIDTH :: 0x0B21;
GL_ALIASED_POINT_SIZE_RANGE :: 0x846D;
GL_ALIASED_LINE_WIDTH_RANGE :: 0x846E;
GL_CULL_FACE_MODE :: 0x0B45;
GL_FRONT_FACE :: 0x0B46;
GL_DEPTH_RANGE :: 0x0B70;
GL_DEPTH_WRITEMASK :: 0x0B72;
GL_DEPTH_CLEAR_VALUE :: 0x0B73;
GL_DEPTH_FUNC :: 0x0B74;
GL_STENCIL_CLEAR_VALUE :: 0x0B91;
GL_STENCIL_FUNC :: 0x0B92;
GL_STENCIL_FAIL :: 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS :: 0x0B96;
GL_STENCIL_REF :: 0x0B97;
GL_STENCIL_VALUE_MASK :: 0x0B93;
GL_STENCIL_WRITEMASK :: 0x0B98;
GL_STENCIL_BACK_FUNC :: 0x8800;
GL_STENCIL_BACK_FAIL :: 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803;
GL_STENCIL_BACK_REF :: 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK :: 0x8CA4;
GL_STENCIL_BACK_WRITEMASK :: 0x8CA5;
GL_VIEWPORT :: 0x0BA2;
GL_SCISSOR_BOX :: 0x0C10;
GL_COLOR_CLEAR_VALUE :: 0x0C22;
GL_COLOR_WRITEMASK :: 0x0C23;
GL_UNPACK_ALIGNMENT :: 0x0CF5;
GL_PACK_ALIGNMENT :: 0x0D05;
GL_MAX_TEXTURE_SIZE :: 0x0D33;
GL_MAX_VIEWPORT_DIMS :: 0x0D3A;
GL_SUBPIXEL_BITS :: 0x0D50;
GL_RED_BITS :: 0x0D52;
GL_GREEN_BITS :: 0x0D53;
GL_BLUE_BITS :: 0x0D54;
GL_ALPHA_BITS :: 0x0D55;
GL_DEPTH_BITS :: 0x0D56;
GL_STENCIL_BITS :: 0x0D57;
GL_POLYGON_OFFSET_UNITS :: 0x2A00;
GL_POLYGON_OFFSET_FACTOR :: 0x8038;
GL_TEXTURE_BINDING_2D :: 0x8069;
GL_SAMPLE_BUFFERS :: 0x80A8;
GL_SAMPLES :: 0x80A9;
GL_SAMPLE_COVERAGE_VALUE :: 0x80AA;
GL_SAMPLE_COVERAGE_INVERT :: 0x80AB;
GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A3;
GL_DONT_CARE :: 0x1100;
GL_FASTEST :: 0x1101;
GL_NICEST :: 0x1102;
GL_GENERATE_MIPMAP_HINT :: 0x8192;
GL_BYTE :: 0x1400;
GL_UNSIGNED_BYTE :: 0x1401;
GL_SHORT :: 0x1402;
GL_UNSIGNED_SHORT :: 0x1403;
GL_INT :: 0x1404;
GL_UNSIGNED_INT :: 0x1405;
GL_FLOAT :: 0x1406;
GL_FIXED :: 0x140C;
GL_DEPTH_COMPONENT :: 0x1902;
GL_ALPHA :: 0x1906;
GL_RGB :: 0x1907;
GL_RGBA :: 0x1908;
GL_LUMINANCE :: 0x1909;
GL_LUMINANCE_ALPHA :: 0x190A;
GL_UNSIGNED_SHORT_4_4_4_4 :: 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1 :: 0x8034;
GL_UNSIGNED_SHORT_5_6_5 :: 0x8363;
GL_FRAGMENT_SHADER :: 0x8B30;
GL_VERTEX_SHADER :: 0x8B31;
GL_MAX_VERTEX_ATTRIBS :: 0x8869;
GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
GL_MAX_VARYING_VECTORS :: 0x8DFC;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
GL_MAX_TEXTURE_IMAGE_UNITS :: 0x8872;
GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
GL_SHADER_TYPE :: 0x8B4F;
GL_DELETE_STATUS :: 0x8B80;
GL_LINK_STATUS :: 0x8B82;
GL_VALIDATE_STATUS :: 0x8B83;
GL_ATTACHED_SHADERS :: 0x8B85;
GL_ACTIVE_UNIFORMS :: 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87;
GL_ACTIVE_ATTRIBUTES :: 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A;
GL_SHADING_LANGUAGE_VERSION :: 0x8B8C;
GL_CURRENT_PROGRAM :: 0x8B8D;
GL_NEVER :: 0x0200;
GL_LESS :: 0x0201;
GL_EQUAL :: 0x0202;
GL_LEQUAL :: 0x0203;
GL_GREATER :: 0x0204;
GL_NOTEQUAL :: 0x0205;
GL_GEQUAL :: 0x0206;
GL_ALWAYS :: 0x0207;
GL_KEEP :: 0x1E00;
GL_REPLACE :: 0x1E01;
GL_INCR :: 0x1E02;
GL_DECR :: 0x1E03;
GL_INVERT :: 0x150A;
GL_INCR_WRAP :: 0x8507;
GL_DECR_WRAP :: 0x8508;
GL_VENDOR :: 0x1F00;
GL_RENDERER :: 0x1F01;
GL_VERSION :: 0x1F02;
GL_EXTENSIONS :: 0x1F03;
GL_NEAREST :: 0x2600;
GL_LINEAR :: 0x2601;
GL_NEAREST_MIPMAP_NEAREST :: 0x2700;
GL_LINEAR_MIPMAP_NEAREST :: 0x2701;
GL_NEAREST_MIPMAP_LINEAR :: 0x2702;
GL_LINEAR_MIPMAP_LINEAR :: 0x2703;
GL_TEXTURE_MAG_FILTER :: 0x2800;
GL_TEXTURE_MIN_FILTER :: 0x2801;
GL_TEXTURE_WRAP_S :: 0x2802;
GL_TEXTURE_WRAP_T :: 0x2803;
GL_TEXTURE :: 0x1702;
GL_TEXTURE_CUBE_MAP :: 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A;
GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C;
GL_TEXTURE0 :: 0x84C0;
GL_TEXTURE1 :: 0x84C1;
GL_TEXTURE2 :: 0x84C2;
GL_TEXTURE3 :: 0x84C3;
GL_TEXTURE4 :: 0x84C4;
GL_TEXTURE5 :: 0x84C5;
GL_TEXTURE6 :: 0x84C6;
GL_TEXTURE7 :: 0x84C7;
GL_TEXTURE8 :: 0x84C8;
GL_TEXTURE9 :: 0x84C9;
GL_TEXTURE10 :: 0x84CA;
GL_TEXTURE11 :: 0x84CB;
GL_TEXTURE12 :: 0x84CC;
GL_TEXTURE13 :: 0x84CD;
GL_TEXTURE14 :: 0x84CE;
GL_TEXTURE15 :: 0x84CF;
GL_TEXTURE16 :: 0x84D0;
GL_TEXTURE17 :: 0x84D1;
GL_TEXTURE18 :: 0x84D2;
GL_TEXTURE19 :: 0x84D3;
GL_TEXTURE20 :: 0x84D4;
GL_TEXTURE21 :: 0x84D5;
GL_TEXTURE22 :: 0x84D6;
GL_TEXTURE23 :: 0x84D7;
GL_TEXTURE24 :: 0x84D8;
GL_TEXTURE25 :: 0x84D9;
GL_TEXTURE26 :: 0x84DA;
GL_TEXTURE27 :: 0x84DB;
GL_TEXTURE28 :: 0x84DC;
GL_TEXTURE29 :: 0x84DD;
GL_TEXTURE30 :: 0x84DE;
GL_TEXTURE31 :: 0x84DF;
GL_ACTIVE_TEXTURE :: 0x84E0;
GL_REPEAT :: 0x2901;
GL_CLAMP_TO_EDGE :: 0x812F;
GL_MIRRORED_REPEAT :: 0x8370;
GL_FLOAT_VEC2 :: 0x8B50;
GL_FLOAT_VEC3 :: 0x8B51;
GL_FLOAT_VEC4 :: 0x8B52;
GL_INT_VEC2 :: 0x8B53;
GL_INT_VEC3 :: 0x8B54;
GL_INT_VEC4 :: 0x8B55;
GL_BOOL :: 0x8B56;
GL_BOOL_VEC2 :: 0x8B57;
GL_BOOL_VEC3 :: 0x8B58;
GL_BOOL_VEC4 :: 0x8B59;
GL_FLOAT_MAT2 :: 0x8B5A;
GL_FLOAT_MAT3 :: 0x8B5B;
GL_FLOAT_MAT4 :: 0x8B5C;
GL_SAMPLER_2D :: 0x8B5E;
GL_SAMPLER_CUBE :: 0x8B60;
GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F;
GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
GL_COMPILE_STATUS :: 0x8B81;
GL_INFO_LOG_LENGTH :: 0x8B84;
GL_SHADER_SOURCE_LENGTH :: 0x8B88;
GL_SHADER_COMPILER :: 0x8DFA;
GL_SHADER_BINARY_FORMATS :: 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
GL_LOW_FLOAT :: 0x8DF0;
GL_MEDIUM_FLOAT :: 0x8DF1;
GL_HIGH_FLOAT :: 0x8DF2;
GL_LOW_INT :: 0x8DF3;
GL_MEDIUM_INT :: 0x8DF4;
GL_HIGH_INT :: 0x8DF5;
GL_FRAMEBUFFER :: 0x8D40;
GL_RENDERBUFFER :: 0x8D41;
GL_RGBA4 :: 0x8056;
GL_RGB5_A1 :: 0x8057;
GL_RGB565 :: 0x8D62;
GL_DEPTH_COMPONENT16 :: 0x81A5;
GL_STENCIL_INDEX8 :: 0x8D48;
GL_RENDERBUFFER_WIDTH :: 0x8D42;
GL_RENDERBUFFER_HEIGHT :: 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
GL_RENDERBUFFER_RED_SIZE :: 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
GL_COLOR_ATTACHMENT0 :: 0x8CE0;
GL_DEPTH_ATTACHMENT :: 0x8D00;
GL_STENCIL_ATTACHMENT :: 0x8D20;
GL_NONE :: 0;
GL_FRAMEBUFFER_COMPLETE :: 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :: 0x8CD9;
GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
GL_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_RENDERBUFFER_BINDING :: 0x8CA7;
GL_MAX_RENDERBUFFER_SIZE :: 0x84E8;
GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506;

__gles2_gl2ext_h_ :: 1;

GL_KHR_blend_equation_advanced :: 1;
GL_MULTIPLY_KHR :: 0x9294;
GL_SCREEN_KHR :: 0x9295;
GL_OVERLAY_KHR :: 0x9296;
GL_DARKEN_KHR :: 0x9297;
GL_LIGHTEN_KHR :: 0x9298;
GL_COLORDODGE_KHR :: 0x9299;
GL_COLORBURN_KHR :: 0x929A;
GL_HARDLIGHT_KHR :: 0x929B;
GL_SOFTLIGHT_KHR :: 0x929C;
GL_DIFFERENCE_KHR :: 0x929E;
GL_EXCLUSION_KHR :: 0x92A0;
GL_HSL_HUE_KHR :: 0x92AD;
GL_HSL_SATURATION_KHR :: 0x92AE;
GL_HSL_COLOR_KHR :: 0x92AF;
GL_HSL_LUMINOSITY_KHR :: 0x92B0;

GL_KHR_blend_equation_advanced_coherent :: 1;
GL_BLEND_ADVANCED_COHERENT_KHR :: 0x9285;

GL_KHR_context_flush_control :: 1;
GL_CONTEXT_RELEASE_BEHAVIOR_KHR :: 0x82FB;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR :: 0x82FC;

GL_KHR_debug :: 1;

GL_SAMPLER :: 0x82E6;
GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION_KHR :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM_KHR :: 0x8245;
GL_DEBUG_SOURCE_API_KHR :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER_KHR :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY_KHR :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION_KHR :: 0x824A;
GL_DEBUG_SOURCE_OTHER_KHR :: 0x824B;
GL_DEBUG_TYPE_ERROR_KHR :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY_KHR :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE_KHR :: 0x8250;
GL_DEBUG_TYPE_OTHER_KHR :: 0x8251;
GL_DEBUG_TYPE_MARKER_KHR :: 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP_KHR :: 0x8269;
GL_DEBUG_TYPE_POP_GROUP_KHR :: 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION_KHR :: 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826D;
GL_BUFFER_KHR :: 0x82E0;
GL_SHADER_KHR :: 0x82E1;
GL_PROGRAM_KHR :: 0x82E2;
GL_VERTEX_ARRAY_KHR :: 0x8074;
GL_QUERY_KHR :: 0x82E3;
GL_PROGRAM_PIPELINE_KHR :: 0x82E4;
GL_SAMPLER_KHR :: 0x82E6;
GL_MAX_LABEL_LENGTH_KHR :: 0x82E8;
GL_MAX_DEBUG_MESSAGE_LENGTH_KHR :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES_KHR :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES_KHR :: 0x9145;
GL_DEBUG_SEVERITY_HIGH_KHR :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM_KHR :: 0x9147;
GL_DEBUG_SEVERITY_LOW_KHR :: 0x9148;
GL_DEBUG_OUTPUT_KHR :: 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT_KHR :: 0x00000002;
GL_STACK_OVERFLOW_KHR :: 0x0503;
GL_STACK_UNDERFLOW_KHR :: 0x0504;

GL_KHR_no_error :: 1;
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR :: 0x00000008;

GL_KHR_parallel_shader_compile :: 1;
GL_MAX_SHADER_COMPILER_THREADS_KHR :: 0x91B0;
GL_COMPLETION_STATUS_KHR :: 0x91B1;

GL_KHR_robust_buffer_access_behavior :: 1;

GL_KHR_robustness :: 1;
GL_CONTEXT_ROBUST_ACCESS_KHR :: 0x90F3;
GL_LOSE_CONTEXT_ON_RESET_KHR :: 0x8252;
GL_GUILTY_CONTEXT_RESET_KHR :: 0x8253;
GL_INNOCENT_CONTEXT_RESET_KHR :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET_KHR :: 0x8255;
GL_RESET_NOTIFICATION_STRATEGY_KHR :: 0x8256;
GL_NO_RESET_NOTIFICATION_KHR :: 0x8261;
GL_CONTEXT_LOST_KHR :: 0x0507;

GL_KHR_shader_subgroup :: 1;
GL_SUBGROUP_SIZE_KHR :: 0x9532;
GL_SUBGROUP_SUPPORTED_STAGES_KHR :: 0x9533;
GL_SUBGROUP_SUPPORTED_FEATURES_KHR :: 0x9534;
GL_SUBGROUP_QUAD_ALL_STAGES_KHR :: 0x9535;
GL_SUBGROUP_FEATURE_BASIC_BIT_KHR :: 0x00000001;
GL_SUBGROUP_FEATURE_VOTE_BIT_KHR :: 0x00000002;
GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR :: 0x00000004;
GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR :: 0x00000008;
GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR :: 0x00000010;
GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR :: 0x00000020;
GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR :: 0x00000040;
GL_SUBGROUP_FEATURE_QUAD_BIT_KHR :: 0x00000080;

GL_KHR_texture_compression_astc_hdr :: 1;
GL_COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
GL_COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
GL_COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
GL_COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
GL_COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
GL_COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
GL_COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
GL_COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
GL_COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
GL_COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
GL_COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
GL_COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
GL_COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
GL_COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;

GL_KHR_texture_compression_astc_ldr :: 1;

GL_KHR_texture_compression_astc_sliced_3d :: 1;

GL_OES_EGL_image :: 1;

GL_OES_EGL_image_external :: 1;
GL_TEXTURE_EXTERNAL_OES :: 0x8D65;
GL_TEXTURE_BINDING_EXTERNAL_OES :: 0x8D67;
GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES :: 0x8D68;
GL_SAMPLER_EXTERNAL_OES :: 0x8D66;

GL_OES_EGL_image_external_essl3 :: 1;

GL_OES_compressed_ETC1_RGB8_sub_texture :: 1;

GL_OES_compressed_ETC1_RGB8_texture :: 1;
GL_ETC1_RGB8_OES :: 0x8D64;

GL_OES_compressed_paletted_texture :: 1;
GL_PALETTE4_RGB8_OES :: 0x8B90;
GL_PALETTE4_RGBA8_OES :: 0x8B91;
GL_PALETTE4_R5_G6_B5_OES :: 0x8B92;
GL_PALETTE4_RGBA4_OES :: 0x8B93;
GL_PALETTE4_RGB5_A1_OES :: 0x8B94;
GL_PALETTE8_RGB8_OES :: 0x8B95;
GL_PALETTE8_RGBA8_OES :: 0x8B96;
GL_PALETTE8_R5_G6_B5_OES :: 0x8B97;
GL_PALETTE8_RGBA4_OES :: 0x8B98;
GL_PALETTE8_RGB5_A1_OES :: 0x8B99;

GL_OES_copy_image :: 1;

GL_OES_depth24 :: 1;
GL_DEPTH_COMPONENT24_OES :: 0x81A6;

GL_OES_depth32 :: 1;
GL_DEPTH_COMPONENT32_OES :: 0x81A7;

GL_OES_depth_texture :: 1;

GL_OES_draw_buffers_indexed :: 1;
GL_MIN :: 0x8007;
GL_MAX :: 0x8008;

GL_OES_draw_elements_base_vertex :: 1;

GL_OES_element_index_uint :: 1;

GL_OES_fbo_render_mipmap :: 1;

GL_OES_fragment_precision_high :: 1;

GL_OES_geometry_point_size :: 1;

GL_OES_geometry_shader :: 1;
GL_GEOMETRY_SHADER_OES :: 0x8DD9;
GL_GEOMETRY_SHADER_BIT_OES :: 0x00000004;
GL_GEOMETRY_LINKED_VERTICES_OUT_OES :: 0x8916;
GL_GEOMETRY_LINKED_INPUT_TYPE_OES :: 0x8917;
GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES :: 0x8918;
GL_GEOMETRY_SHADER_INVOCATIONS_OES :: 0x887F;
GL_LAYER_PROVOKING_VERTEX_OES :: 0x825E;
GL_LINES_ADJACENCY_OES :: 0x000A;
GL_LINE_STRIP_ADJACENCY_OES :: 0x000B;
GL_TRIANGLES_ADJACENCY_OES :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY_OES :: 0x000D;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES :: 0x8DDF;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES :: 0x8A2C;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES :: 0x8A32;
GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES :: 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES :: 0x9124;
GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES :: 0x8DE1;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES :: 0x8E5A;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES :: 0x8C29;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES :: 0x92CF;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES :: 0x92D5;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES :: 0x90CD;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES :: 0x90D7;
GL_FIRST_VERTEX_CONVENTION_OES :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION_OES :: 0x8E4E;
GL_UNDEFINED_VERTEX_OES :: 0x8260;
GL_PRIMITIVES_GENERATED_OES :: 0x8C87;
GL_FRAMEBUFFER_DEFAULT_LAYERS_OES :: 0x9312;
GL_MAX_FRAMEBUFFER_LAYERS_OES :: 0x9317;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES :: 0x8DA8;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES :: 0x8DA7;
GL_REFERENCED_BY_GEOMETRY_SHADER_OES :: 0x9309;

GL_OES_get_program_binary :: 1;
GL_PROGRAM_BINARY_LENGTH_OES :: 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS_OES :: 0x87FE;
GL_PROGRAM_BINARY_FORMATS_OES :: 0x87FF;

GL_OES_gpu_shader5 :: 1;

GL_OES_mapbuffer :: 1;
GL_WRITE_ONLY_OES :: 0x88B9;
GL_BUFFER_ACCESS_OES :: 0x88BB;
GL_BUFFER_MAPPED_OES :: 0x88BC;
GL_BUFFER_MAP_POINTER_OES :: 0x88BD;

GL_OES_packed_depth_stencil :: 1;
GL_DEPTH_STENCIL_OES :: 0x84F9;
GL_UNSIGNED_INT_24_8_OES :: 0x84FA;
GL_DEPTH24_STENCIL8_OES :: 0x88F0;

GL_OES_primitive_bounding_box :: 1;
GL_PRIMITIVE_BOUNDING_BOX_OES :: 0x92BE;

GL_OES_required_internalformat :: 1;
GL_ALPHA8_OES :: 0x803C;
GL_DEPTH_COMPONENT16_OES :: 0x81A5;
GL_LUMINANCE4_ALPHA4_OES :: 0x8043;
GL_LUMINANCE8_ALPHA8_OES :: 0x8045;
GL_LUMINANCE8_OES :: 0x8040;
GL_RGBA4_OES :: 0x8056;
GL_RGB5_A1_OES :: 0x8057;
GL_RGB565_OES :: 0x8D62;
GL_RGB8_OES :: 0x8051;
GL_RGBA8_OES :: 0x8058;
GL_RGB10_EXT :: 0x8052;
GL_RGB10_A2_EXT :: 0x8059;

GL_OES_rgb8_rgba8 :: 1;

GL_OES_sample_shading :: 1;
GL_SAMPLE_SHADING_OES :: 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE_OES :: 0x8C37;

GL_OES_sample_variables :: 1;

GL_OES_shader_image_atomic :: 1;

GL_OES_shader_io_blocks :: 1;

GL_OES_shader_multisample_interpolation :: 1;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES :: 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES :: 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES :: 0x8E5D;

GL_OES_standard_derivatives :: 1;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES :: 0x8B8B;

GL_OES_stencil1 :: 1;
GL_STENCIL_INDEX1_OES :: 0x8D46;

GL_OES_stencil4 :: 1;
GL_STENCIL_INDEX4_OES :: 0x8D47;

GL_OES_surfaceless_context :: 1;
GL_FRAMEBUFFER_UNDEFINED_OES :: 0x8219;

GL_OES_tessellation_point_size :: 1;

GL_OES_tessellation_shader :: 1;
GL_PATCHES_OES :: 0x000E;
GL_PATCH_VERTICES_OES :: 0x8E72;
GL_TESS_CONTROL_OUTPUT_VERTICES_OES :: 0x8E75;
GL_TESS_GEN_MODE_OES :: 0x8E76;
GL_TESS_GEN_SPACING_OES :: 0x8E77;
GL_TESS_GEN_VERTEX_ORDER_OES :: 0x8E78;
GL_TESS_GEN_POINT_MODE_OES :: 0x8E79;
GL_ISOLINES_OES :: 0x8E7A;
GL_QUADS_OES :: 0x0007;
GL_FRACTIONAL_ODD_OES :: 0x8E7B;
GL_FRACTIONAL_EVEN_OES :: 0x8E7C;
GL_MAX_PATCH_VERTICES_OES :: 0x8E7D;
GL_MAX_TESS_GEN_LEVEL_OES :: 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES :: 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES :: 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES :: 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES :: 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES :: 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS_OES :: 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES :: 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES :: 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES :: 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES :: 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES :: 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES :: 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES :: 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES :: 0x8E1F;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES :: 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES :: 0x92CE;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES :: 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES :: 0x92D4;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES :: 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES :: 0x90CC;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES :: 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES :: 0x90D9;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES :: 0x8221;
GL_IS_PER_PATCH_OES :: 0x92E7;
GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES :: 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES :: 0x9308;
GL_TESS_CONTROL_SHADER_OES :: 0x8E88;
GL_TESS_EVALUATION_SHADER_OES :: 0x8E87;
GL_TESS_CONTROL_SHADER_BIT_OES :: 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT_OES :: 0x00000010;

GL_OES_texture_3D :: 1;
GL_TEXTURE_WRAP_R_OES :: 0x8072;
GL_TEXTURE_3D_OES :: 0x806F;
GL_TEXTURE_BINDING_3D_OES :: 0x806A;
GL_MAX_3D_TEXTURE_SIZE_OES :: 0x8073;
GL_SAMPLER_3D_OES :: 0x8B5F;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES :: 0x8CD4;

GL_OES_texture_border_clamp :: 1;
GL_TEXTURE_BORDER_COLOR_OES :: 0x1004;
GL_CLAMP_TO_BORDER_OES :: 0x812D;

GL_OES_texture_buffer :: 1;
GL_TEXTURE_BUFFER_OES :: 0x8C2A;
GL_TEXTURE_BUFFER_BINDING_OES :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE_OES :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER_OES :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES :: 0x8C2D;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES :: 0x919F;
GL_SAMPLER_BUFFER_OES :: 0x8DC2;
GL_INT_SAMPLER_BUFFER_OES :: 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_BUFFER_OES :: 0x8DD8;
GL_IMAGE_BUFFER_OES :: 0x9051;
GL_INT_IMAGE_BUFFER_OES :: 0x905C;
GL_UNSIGNED_INT_IMAGE_BUFFER_OES :: 0x9067;
GL_TEXTURE_BUFFER_OFFSET_OES :: 0x919D;
GL_TEXTURE_BUFFER_SIZE_OES :: 0x919E;

GL_OES_texture_compression_astc :: 1;
GL_COMPRESSED_RGBA_ASTC_3x3x3_OES :: 0x93C0;
GL_COMPRESSED_RGBA_ASTC_4x3x3_OES :: 0x93C1;
GL_COMPRESSED_RGBA_ASTC_4x4x3_OES :: 0x93C2;
GL_COMPRESSED_RGBA_ASTC_4x4x4_OES :: 0x93C3;
GL_COMPRESSED_RGBA_ASTC_5x4x4_OES :: 0x93C4;
GL_COMPRESSED_RGBA_ASTC_5x5x4_OES :: 0x93C5;
GL_COMPRESSED_RGBA_ASTC_5x5x5_OES :: 0x93C6;
GL_COMPRESSED_RGBA_ASTC_6x5x5_OES :: 0x93C7;
GL_COMPRESSED_RGBA_ASTC_6x6x5_OES :: 0x93C8;
GL_COMPRESSED_RGBA_ASTC_6x6x6_OES :: 0x93C9;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES :: 0x93E0;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES :: 0x93E1;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES :: 0x93E2;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES :: 0x93E3;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES :: 0x93E4;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES :: 0x93E5;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES :: 0x93E6;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES :: 0x93E7;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES :: 0x93E8;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES :: 0x93E9;

GL_OES_texture_cube_map_array :: 1;
GL_TEXTURE_CUBE_MAP_ARRAY_OES :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES :: 0x900A;
GL_SAMPLER_CUBE_MAP_ARRAY_OES :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES :: 0x900F;
GL_IMAGE_CUBE_MAP_ARRAY_OES :: 0x9054;
GL_INT_IMAGE_CUBE_MAP_ARRAY_OES :: 0x905F;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES :: 0x906A;

GL_OES_texture_float :: 1;

GL_OES_texture_float_linear :: 1;

GL_OES_texture_half_float :: 1;
GL_HALF_FLOAT_OES :: 0x8D61;

GL_OES_texture_half_float_linear :: 1;

GL_OES_texture_npot :: 1;

GL_OES_texture_stencil8 :: 1;
GL_STENCIL_INDEX_OES :: 0x1901;
GL_STENCIL_INDEX8_OES :: 0x8D48;

GL_OES_texture_storage_multisample_2d_array :: 1;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES :: 0x9102;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES :: 0x9105;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES :: 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES :: 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES :: 0x910D;

GL_OES_texture_view :: 1;
GL_TEXTURE_VIEW_MIN_LEVEL_OES :: 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS_OES :: 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER_OES :: 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS_OES :: 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;

GL_OES_vertex_array_object :: 1;
GL_VERTEX_ARRAY_BINDING_OES :: 0x85B5;

GL_OES_vertex_half_float :: 1;

GL_OES_vertex_type_10_10_10_2 :: 1;
GL_UNSIGNED_INT_10_10_10_2_OES :: 0x8DF6;
GL_INT_10_10_10_2_OES :: 0x8DF7;

GL_OES_viewport_array :: 1;
GL_MAX_VIEWPORTS_OES :: 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS_OES :: 0x825C;
GL_VIEWPORT_BOUNDS_RANGE_OES :: 0x825D;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES :: 0x825F;

GL_AMD_compressed_3DC_texture :: 1;
GL_3DC_X_AMD :: 0x87F9;
GL_3DC_XY_AMD :: 0x87FA;

GL_AMD_compressed_ATC_texture :: 1;
GL_ATC_RGB_AMD :: 0x8C92;
GL_ATC_RGBA_EXPLICIT_ALPHA_AMD :: 0x8C93;
GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD :: 0x87EE;

GL_AMD_framebuffer_multisample_advanced :: 1;
GL_RENDERBUFFER_STORAGE_SAMPLES_AMD :: 0x91B2;
GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD :: 0x91B3;
GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD :: 0x91B4;
GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD :: 0x91B5;
GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD :: 0x91B6;
GL_SUPPORTED_MULTISAMPLE_MODES_AMD :: 0x91B7;

GL_AMD_performance_monitor :: 1;
GL_COUNTER_TYPE_AMD :: 0x8BC0;
GL_COUNTER_RANGE_AMD :: 0x8BC1;
GL_UNSIGNED_INT64_AMD :: 0x8BC2;
GL_PERCENTAGE_AMD :: 0x8BC3;
GL_PERFMON_RESULT_AVAILABLE_AMD :: 0x8BC4;
GL_PERFMON_RESULT_SIZE_AMD :: 0x8BC5;
GL_PERFMON_RESULT_AMD :: 0x8BC6;

GL_AMD_program_binary_Z400 :: 1;
GL_Z400_BINARY_AMD :: 0x8740;

GL_ANDROID_extension_pack_es31a :: 1;

GL_ANGLE_depth_texture :: 1;

GL_ANGLE_framebuffer_blit :: 1;
GL_READ_FRAMEBUFFER_ANGLE :: 0x8CA8;
GL_DRAW_FRAMEBUFFER_ANGLE :: 0x8CA9;
GL_DRAW_FRAMEBUFFER_BINDING_ANGLE :: 0x8CA6;
GL_READ_FRAMEBUFFER_BINDING_ANGLE :: 0x8CAA;

GL_ANGLE_framebuffer_multisample :: 1;
GL_RENDERBUFFER_SAMPLES_ANGLE :: 0x8CAB;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE :: 0x8D56;
GL_MAX_SAMPLES_ANGLE :: 0x8D57;

GL_ANGLE_instanced_arrays :: 1;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE :: 0x88FE;

GL_ANGLE_pack_reverse_row_order :: 1;
GL_PACK_REVERSE_ROW_ORDER_ANGLE :: 0x93A4;

GL_ANGLE_program_binary :: 1;
GL_PROGRAM_BINARY_ANGLE :: 0x93A6;

GL_ANGLE_texture_compression_dxt3 :: 1;
GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE :: 0x83F2;

GL_ANGLE_texture_compression_dxt5 :: 1;
GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE :: 0x83F3;

GL_ANGLE_texture_usage :: 1;
GL_TEXTURE_USAGE_ANGLE :: 0x93A2;
GL_FRAMEBUFFER_ATTACHMENT_ANGLE :: 0x93A3;

GL_ANGLE_translated_shader_source :: 1;
GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE :: 0x93A0;

GL_APPLE_clip_distance :: 1;
GL_MAX_CLIP_DISTANCES_APPLE :: 0x0D32;
GL_CLIP_DISTANCE0_APPLE :: 0x3000;
GL_CLIP_DISTANCE1_APPLE :: 0x3001;
GL_CLIP_DISTANCE2_APPLE :: 0x3002;
GL_CLIP_DISTANCE3_APPLE :: 0x3003;
GL_CLIP_DISTANCE4_APPLE :: 0x3004;
GL_CLIP_DISTANCE5_APPLE :: 0x3005;
GL_CLIP_DISTANCE6_APPLE :: 0x3006;
GL_CLIP_DISTANCE7_APPLE :: 0x3007;

GL_APPLE_color_buffer_packed_float :: 1;

GL_APPLE_copy_texture_levels :: 1;

GL_APPLE_framebuffer_multisample :: 1;
GL_RENDERBUFFER_SAMPLES_APPLE :: 0x8CAB;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE :: 0x8D56;
GL_MAX_SAMPLES_APPLE :: 0x8D57;
GL_READ_FRAMEBUFFER_APPLE :: 0x8CA8;
GL_DRAW_FRAMEBUFFER_APPLE :: 0x8CA9;
GL_DRAW_FRAMEBUFFER_BINDING_APPLE :: 0x8CA6;
GL_READ_FRAMEBUFFER_BINDING_APPLE :: 0x8CAA;

GL_APPLE_rgb_422 :: 1;
GL_RGB_422_APPLE :: 0x8A1F;
GL_UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
GL_UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;
GL_RGB_RAW_422_APPLE :: 0x8A51;

GL_APPLE_sync :: 1;
GL_SYNC_OBJECT_APPLE :: 0x8A53;
GL_MAX_SERVER_WAIT_TIMEOUT_APPLE :: 0x9111;
GL_OBJECT_TYPE_APPLE :: 0x9112;
GL_SYNC_CONDITION_APPLE :: 0x9113;
GL_SYNC_STATUS_APPLE :: 0x9114;
GL_SYNC_FLAGS_APPLE :: 0x9115;
GL_SYNC_FENCE_APPLE :: 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE :: 0x9117;
GL_UNSIGNALED_APPLE :: 0x9118;
GL_SIGNALED_APPLE :: 0x9119;
GL_ALREADY_SIGNALED_APPLE :: 0x911A;
GL_TIMEOUT_EXPIRED_APPLE :: 0x911B;
GL_CONDITION_SATISFIED_APPLE :: 0x911C;
GL_WAIT_FAILED_APPLE :: 0x911D;
GL_SYNC_FLUSH_COMMANDS_BIT_APPLE :: 0x00000001;
GL_TIMEOUT_IGNORED_APPLE :: 0xFFFFFFFFFFFFFFFF;

GL_APPLE_texture_format_BGRA8888 :: 1;
GL_BGRA_EXT :: 0x80E1;
GL_BGRA8_EXT :: 0x93A1;

GL_APPLE_texture_max_level :: 1;
GL_TEXTURE_MAX_LEVEL_APPLE :: 0x813D;

GL_APPLE_texture_packed_float :: 1;
GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE :: 0x8C3B;
GL_UNSIGNED_INT_5_9_9_9_REV_APPLE :: 0x8C3E;
GL_R11F_G11F_B10F_APPLE :: 0x8C3A;
GL_RGB9_E5_APPLE :: 0x8C3D;

GL_ARM_mali_program_binary :: 1;
GL_MALI_PROGRAM_BINARY_ARM :: 0x8F61;

GL_ARM_mali_shader_binary :: 1;
GL_MALI_SHADER_BINARY_ARM :: 0x8F60;

GL_ARM_rgba8 :: 1;

GL_ARM_shader_core_properties :: 1;
GL_SHADER_CORE_COUNT_ARM :: 0x96F0;
GL_SHADER_CORE_ACTIVE_COUNT_ARM :: 0x96F1;
GL_SHADER_CORE_PRESENT_MASK_ARM :: 0x96F2;
GL_SHADER_CORE_MAX_WARP_COUNT_ARM :: 0x96F3;
GL_SHADER_CORE_PIXEL_RATE_ARM :: 0x96F4;
GL_SHADER_CORE_TEXEL_RATE_ARM :: 0x96F5;
GL_SHADER_CORE_FMA_RATE_ARM :: 0x96F6;

GL_ARM_shader_framebuffer_fetch :: 1;
GL_FETCH_PER_SAMPLE_ARM :: 0x8F65;
GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM :: 0x8F66;

GL_ARM_shader_framebuffer_fetch_depth_stencil :: 1;

GL_ARM_texture_unnormalized_coordinates :: 1;
GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM :: 0x8F6A;

GL_DMP_program_binary :: 1;
GL_SMAPHS30_PROGRAM_BINARY_DMP :: 0x9251;
GL_SMAPHS_PROGRAM_BINARY_DMP :: 0x9252;
GL_DMP_PROGRAM_BINARY_DMP :: 0x9253;

GL_DMP_shader_binary :: 1;
GL_SHADER_BINARY_DMP :: 0x9250;

GL_EXT_EGL_image_array :: 1;

GL_EXT_EGL_image_storage :: 1;

GL_EXT_EGL_image_storage_compression :: 1;
GL_SURFACE_COMPRESSION_EXT :: 0x96C0;
GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT :: 0x96C1;
GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT :: 0x96C2;

GL_EXT_YUV_target :: 1;
GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT :: 0x8BE7;

GL_EXT_base_instance :: 1;

GL_EXT_blend_func_extended :: 1;
GL_SRC1_COLOR_EXT :: 0x88F9;
GL_SRC1_ALPHA_EXT :: 0x8589;
GL_ONE_MINUS_SRC1_COLOR_EXT :: 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA_EXT :: 0x88FB;
GL_SRC_ALPHA_SATURATE_EXT :: 0x0308;
GL_LOCATION_INDEX_EXT :: 0x930F;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT :: 0x88FC;

GL_EXT_blend_minmax :: 1;
GL_MIN_EXT :: 0x8007;
GL_MAX_EXT :: 0x8008;

GL_EXT_buffer_storage :: 1;
GL_MAP_READ_BIT :: 0x0001;
GL_MAP_WRITE_BIT :: 0x0002;
GL_MAP_PERSISTENT_BIT_EXT :: 0x0040;
GL_MAP_COHERENT_BIT_EXT :: 0x0080;
GL_DYNAMIC_STORAGE_BIT_EXT :: 0x0100;
GL_CLIENT_STORAGE_BIT_EXT :: 0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT :: 0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE_EXT :: 0x821F;
GL_BUFFER_STORAGE_FLAGS_EXT :: 0x8220;

GL_EXT_clear_texture :: 1;

GL_EXT_clip_control :: 1;
GL_LOWER_LEFT_EXT :: 0x8CA1;
GL_UPPER_LEFT_EXT :: 0x8CA2;
GL_NEGATIVE_ONE_TO_ONE_EXT :: 0x935E;
GL_ZERO_TO_ONE_EXT :: 0x935F;
GL_CLIP_ORIGIN_EXT :: 0x935C;
GL_CLIP_DEPTH_MODE_EXT :: 0x935D;

GL_EXT_clip_cull_distance :: 1;
GL_MAX_CLIP_DISTANCES_EXT :: 0x0D32;
GL_MAX_CULL_DISTANCES_EXT :: 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT :: 0x82FA;
GL_CLIP_DISTANCE0_EXT :: 0x3000;
GL_CLIP_DISTANCE1_EXT :: 0x3001;
GL_CLIP_DISTANCE2_EXT :: 0x3002;
GL_CLIP_DISTANCE3_EXT :: 0x3003;
GL_CLIP_DISTANCE4_EXT :: 0x3004;
GL_CLIP_DISTANCE5_EXT :: 0x3005;
GL_CLIP_DISTANCE6_EXT :: 0x3006;
GL_CLIP_DISTANCE7_EXT :: 0x3007;

GL_EXT_color_buffer_float :: 1;

GL_EXT_color_buffer_half_float :: 1;
GL_RGBA16F_EXT :: 0x881A;
GL_RGB16F_EXT :: 0x881B;
GL_RG16F_EXT :: 0x822F;
GL_R16F_EXT :: 0x822D;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :: 0x8211;
GL_UNSIGNED_NORMALIZED_EXT :: 0x8C17;

GL_EXT_conservative_depth :: 1;

GL_EXT_copy_image :: 1;

GL_EXT_debug_label :: 1;
GL_PROGRAM_PIPELINE_OBJECT_EXT :: 0x8A4F;
GL_PROGRAM_OBJECT_EXT :: 0x8B40;
GL_SHADER_OBJECT_EXT :: 0x8B48;
GL_BUFFER_OBJECT_EXT :: 0x9151;
GL_QUERY_OBJECT_EXT :: 0x9153;
GL_VERTEX_ARRAY_OBJECT_EXT :: 0x9154;
GL_TRANSFORM_FEEDBACK :: 0x8E22;

GL_EXT_debug_marker :: 1;

GL_EXT_depth_clamp :: 1;
GL_DEPTH_CLAMP_EXT :: 0x864F;

GL_EXT_discard_framebuffer :: 1;
GL_COLOR_EXT :: 0x1800;
GL_DEPTH_EXT :: 0x1801;
GL_STENCIL_EXT :: 0x1802;

GL_EXT_disjoint_timer_query :: 1;
GL_QUERY_COUNTER_BITS_EXT :: 0x8864;
GL_CURRENT_QUERY_EXT :: 0x8865;
GL_QUERY_RESULT_EXT :: 0x8866;
GL_QUERY_RESULT_AVAILABLE_EXT :: 0x8867;
GL_TIME_ELAPSED_EXT :: 0x88BF;
GL_TIMESTAMP_EXT :: 0x8E28;
GL_GPU_DISJOINT_EXT :: 0x8FBB;

GL_EXT_draw_buffers :: 1;
GL_MAX_COLOR_ATTACHMENTS_EXT :: 0x8CDF;
GL_MAX_DRAW_BUFFERS_EXT :: 0x8824;
GL_DRAW_BUFFER0_EXT :: 0x8825;
GL_DRAW_BUFFER1_EXT :: 0x8826;
GL_DRAW_BUFFER2_EXT :: 0x8827;
GL_DRAW_BUFFER3_EXT :: 0x8828;
GL_DRAW_BUFFER4_EXT :: 0x8829;
GL_DRAW_BUFFER5_EXT :: 0x882A;
GL_DRAW_BUFFER6_EXT :: 0x882B;
GL_DRAW_BUFFER7_EXT :: 0x882C;
GL_DRAW_BUFFER8_EXT :: 0x882D;
GL_DRAW_BUFFER9_EXT :: 0x882E;
GL_DRAW_BUFFER10_EXT :: 0x882F;
GL_DRAW_BUFFER11_EXT :: 0x8830;
GL_DRAW_BUFFER12_EXT :: 0x8831;
GL_DRAW_BUFFER13_EXT :: 0x8832;
GL_DRAW_BUFFER14_EXT :: 0x8833;
GL_DRAW_BUFFER15_EXT :: 0x8834;
GL_COLOR_ATTACHMENT0_EXT :: 0x8CE0;
GL_COLOR_ATTACHMENT1_EXT :: 0x8CE1;
GL_COLOR_ATTACHMENT2_EXT :: 0x8CE2;
GL_COLOR_ATTACHMENT3_EXT :: 0x8CE3;
GL_COLOR_ATTACHMENT4_EXT :: 0x8CE4;
GL_COLOR_ATTACHMENT5_EXT :: 0x8CE5;
GL_COLOR_ATTACHMENT6_EXT :: 0x8CE6;
GL_COLOR_ATTACHMENT7_EXT :: 0x8CE7;
GL_COLOR_ATTACHMENT8_EXT :: 0x8CE8;
GL_COLOR_ATTACHMENT9_EXT :: 0x8CE9;
GL_COLOR_ATTACHMENT10_EXT :: 0x8CEA;
GL_COLOR_ATTACHMENT11_EXT :: 0x8CEB;
GL_COLOR_ATTACHMENT12_EXT :: 0x8CEC;
GL_COLOR_ATTACHMENT13_EXT :: 0x8CED;
GL_COLOR_ATTACHMENT14_EXT :: 0x8CEE;
GL_COLOR_ATTACHMENT15_EXT :: 0x8CEF;

GL_EXT_draw_buffers_indexed :: 1;

GL_EXT_draw_elements_base_vertex :: 1;

GL_EXT_draw_instanced :: 1;

GL_EXT_draw_transform_feedback :: 1;

GL_EXT_external_buffer :: 1;

GL_EXT_float_blend :: 1;

GL_EXT_fragment_shading_rate :: 1;
GL_SHADING_RATE_1X1_PIXELS_EXT :: 0x96A6;
GL_SHADING_RATE_1X2_PIXELS_EXT :: 0x96A7;
GL_SHADING_RATE_2X1_PIXELS_EXT :: 0x96A8;
GL_SHADING_RATE_2X2_PIXELS_EXT :: 0x96A9;
GL_SHADING_RATE_1X4_PIXELS_EXT :: 0x96AA;
GL_SHADING_RATE_4X1_PIXELS_EXT :: 0x96AB;
GL_SHADING_RATE_4X2_PIXELS_EXT :: 0x96AC;
GL_SHADING_RATE_2X4_PIXELS_EXT :: 0x96AD;
GL_SHADING_RATE_4X4_PIXELS_EXT :: 0x96AE;
GL_SHADING_RATE_EXT :: 0x96D0;
GL_SHADING_RATE_ATTACHMENT_EXT :: 0x96D1;
GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT :: 0x96D2;
GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT :: 0x96D3;
GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT :: 0x96D4;
GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT :: 0x96D5;
GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT :: 0x96D6;
GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT :: 0x96D7;
GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT :: 0x96D8;
GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT :: 0x96D9;
GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT :: 0x96DA;
GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT :: 0x96DB;
GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT :: 0x96DC;
GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT :: 0x96DD;
GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT :: 0x96DE;
GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT :: 0x96DF;
GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT :: 0x8F6F;

GL_EXT_framebuffer_blit_layers :: 1;

GL_EXT_geometry_point_size :: 1;

GL_EXT_geometry_shader :: 1;
GL_GEOMETRY_SHADER_EXT :: 0x8DD9;
GL_GEOMETRY_SHADER_BIT_EXT :: 0x00000004;
GL_GEOMETRY_LINKED_VERTICES_OUT_EXT :: 0x8916;
GL_GEOMETRY_LINKED_INPUT_TYPE_EXT :: 0x8917;
GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT :: 0x8918;
GL_GEOMETRY_SHADER_INVOCATIONS_EXT :: 0x887F;
GL_LAYER_PROVOKING_VERTEX_EXT :: 0x825E;
GL_LINES_ADJACENCY_EXT :: 0x000A;
GL_LINE_STRIP_ADJACENCY_EXT :: 0x000B;
GL_TRIANGLES_ADJACENCY_EXT :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY_EXT :: 0x000D;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT :: 0x8DDF;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT :: 0x8A2C;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT :: 0x8A32;
GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT :: 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT :: 0x9124;
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT :: 0x8DE1;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT :: 0x8E5A;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT :: 0x8C29;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT :: 0x92CF;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT :: 0x92D5;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT :: 0x90CD;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT :: 0x90D7;
GL_FIRST_VERTEX_CONVENTION_EXT :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION_EXT :: 0x8E4E;
GL_UNDEFINED_VERTEX_EXT :: 0x8260;
GL_PRIMITIVES_GENERATED_EXT :: 0x8C87;
GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT :: 0x9312;
GL_MAX_FRAMEBUFFER_LAYERS_EXT :: 0x9317;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT :: 0x8DA8;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT :: 0x8DA7;
GL_REFERENCED_BY_GEOMETRY_SHADER_EXT :: 0x9309;

GL_EXT_gpu_shader5 :: 1;

GL_EXT_instanced_arrays :: 1;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT :: 0x88FE;

GL_EXT_map_buffer_range :: 1;
GL_MAP_READ_BIT_EXT :: 0x0001;
GL_MAP_WRITE_BIT_EXT :: 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT_EXT :: 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT_EXT :: 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT_EXT :: 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT_EXT :: 0x0020;

GL_EXT_memory_object :: 1;
GL_TEXTURE_TILING_EXT :: 0x9580;
GL_DEDICATED_MEMORY_OBJECT_EXT :: 0x9581;
GL_PROTECTED_MEMORY_OBJECT_EXT :: 0x959B;
GL_NUM_TILING_TYPES_EXT :: 0x9582;
GL_TILING_TYPES_EXT :: 0x9583;
GL_OPTIMAL_TILING_EXT :: 0x9584;
GL_LINEAR_TILING_EXT :: 0x9585;
GL_NUM_DEVICE_UUIDS_EXT :: 0x9596;
GL_DEVICE_UUID_EXT :: 0x9597;
GL_DRIVER_UUID_EXT :: 0x9598;
GL_UUID_SIZE_EXT :: 16;

GL_EXT_memory_object_fd :: 1;
GL_HANDLE_TYPE_OPAQUE_FD_EXT :: 0x9586;

GL_EXT_memory_object_win32 :: 1;
GL_HANDLE_TYPE_OPAQUE_WIN32_EXT :: 0x9587;
GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT :: 0x9588;
GL_DEVICE_LUID_EXT :: 0x9599;
GL_DEVICE_NODE_MASK_EXT :: 0x959A;
GL_LUID_SIZE_EXT :: 8;
GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT :: 0x9589;
GL_HANDLE_TYPE_D3D12_RESOURCE_EXT :: 0x958A;
GL_HANDLE_TYPE_D3D11_IMAGE_EXT :: 0x958B;
GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT :: 0x958C;

GL_EXT_multi_draw_arrays :: 1;

GL_EXT_multi_draw_indirect :: 1;

GL_EXT_multisampled_compatibility :: 1;
GL_MULTISAMPLE_EXT :: 0x809D;
GL_SAMPLE_ALPHA_TO_ONE_EXT :: 0x809F;

GL_EXT_multisampled_render_to_texture :: 1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT :: 0x8D6C;
GL_RENDERBUFFER_SAMPLES_EXT :: 0x8CAB;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT :: 0x8D56;
GL_MAX_SAMPLES_EXT :: 0x8D57;

GL_EXT_multisampled_render_to_texture2 :: 1;

GL_EXT_multiview_draw_buffers :: 1;
GL_COLOR_ATTACHMENT_EXT :: 0x90F0;
GL_MULTIVIEW_EXT :: 0x90F1;
GL_DRAW_BUFFER_EXT :: 0x0C01;
GL_READ_BUFFER_EXT :: 0x0C02;
GL_MAX_MULTIVIEW_BUFFERS_EXT :: 0x90F2;

GL_EXT_multiview_tessellation_geometry_shader :: 1;

GL_EXT_multiview_texture_multisample :: 1;

GL_EXT_multiview_timer_query :: 1;

GL_EXT_occlusion_query_boolean :: 1;
GL_ANY_SAMPLES_PASSED_EXT :: 0x8C2F;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT :: 0x8D6A;

GL_EXT_polygon_offset_clamp :: 1;
GL_POLYGON_OFFSET_CLAMP_EXT :: 0x8E1B;

GL_EXT_post_depth_coverage :: 1;

GL_EXT_primitive_bounding_box :: 1;
GL_PRIMITIVE_BOUNDING_BOX_EXT :: 0x92BE;

GL_EXT_protected_textures :: 1;
GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT :: 0x00000010;
GL_TEXTURE_PROTECTED_EXT :: 0x8BFA;

GL_EXT_pvrtc_sRGB :: 1;
GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT :: 0x8A54;
GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT :: 0x8A55;
GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT :: 0x8A56;
GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT :: 0x8A57;
GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG :: 0x93F0;
GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG :: 0x93F1;

GL_EXT_raster_multisample :: 1;
GL_RASTER_MULTISAMPLE_EXT :: 0x9327;
GL_RASTER_SAMPLES_EXT :: 0x9328;
GL_MAX_RASTER_SAMPLES_EXT :: 0x9329;
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
GL_EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;

GL_EXT_read_format_bgra :: 1;
GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT :: 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT :: 0x8366;

GL_EXT_render_snorm :: 1;
GL_R8_SNORM :: 0x8F94;
GL_RG8_SNORM :: 0x8F95;
GL_RGBA8_SNORM :: 0x8F97;
GL_R16_SNORM_EXT :: 0x8F98;
GL_RG16_SNORM_EXT :: 0x8F99;
GL_RGBA16_SNORM_EXT :: 0x8F9B;

GL_EXT_robustness :: 1;
GL_GUILTY_CONTEXT_RESET_EXT :: 0x8253;
GL_INNOCENT_CONTEXT_RESET_EXT :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET_EXT :: 0x8255;
GL_CONTEXT_ROBUST_ACCESS_EXT :: 0x90F3;
GL_RESET_NOTIFICATION_STRATEGY_EXT :: 0x8256;
GL_LOSE_CONTEXT_ON_RESET_EXT :: 0x8252;
GL_NO_RESET_NOTIFICATION_EXT :: 0x8261;

GL_EXT_sRGB :: 1;
GL_SRGB_EXT :: 0x8C40;
GL_SRGB_ALPHA_EXT :: 0x8C42;
GL_SRGB8_ALPHA8_EXT :: 0x8C43;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :: 0x8210;

GL_EXT_sRGB_write_control :: 1;
GL_FRAMEBUFFER_SRGB_EXT :: 0x8DB9;

GL_EXT_semaphore :: 1;
GL_LAYOUT_GENERAL_EXT :: 0x958D;
GL_LAYOUT_COLOR_ATTACHMENT_EXT :: 0x958E;
GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT :: 0x958F;
GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT :: 0x9590;
GL_LAYOUT_SHADER_READ_ONLY_EXT :: 0x9591;
GL_LAYOUT_TRANSFER_SRC_EXT :: 0x9592;
GL_LAYOUT_TRANSFER_DST_EXT :: 0x9593;
GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT :: 0x9530;
GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT :: 0x9531;

GL_EXT_semaphore_fd :: 1;

GL_EXT_semaphore_win32 :: 1;
GL_HANDLE_TYPE_D3D12_FENCE_EXT :: 0x9594;
GL_D3D12_FENCE_VALUE_EXT :: 0x9595;

GL_EXT_separate_depth_stencil :: 1;

GL_EXT_separate_shader_objects :: 1;
GL_ACTIVE_PROGRAM_EXT :: 0x8259;
GL_VERTEX_SHADER_BIT_EXT :: 0x00000001;
GL_FRAGMENT_SHADER_BIT_EXT :: 0x00000002;
GL_ALL_SHADER_BITS_EXT :: 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE_EXT :: 0x8258;
GL_PROGRAM_PIPELINE_BINDING_EXT :: 0x825A;

GL_EXT_shader_framebuffer_fetch :: 1;
GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;

GL_EXT_shader_framebuffer_fetch_non_coherent :: 1;

GL_EXT_shader_group_vote :: 1;

GL_EXT_shader_implicit_conversions :: 1;

GL_EXT_shader_integer_mix :: 1;

GL_EXT_shader_io_blocks :: 1;

GL_EXT_shader_non_constant_global_initializers :: 1;

GL_EXT_shader_pixel_local_storage :: 1;
GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT :: 0x8F63;
GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT :: 0x8F67;
GL_SHADER_PIXEL_LOCAL_STORAGE_EXT :: 0x8F64;

GL_EXT_shader_pixel_local_storage2 :: 1;
GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT :: 0x9650;
GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT :: 0x9651;
GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT :: 0x9652;

GL_EXT_shader_samples_identical :: 1;

GL_EXT_shader_texture_lod :: 1;

GL_EXT_shadow_samplers :: 1;
GL_TEXTURE_COMPARE_MODE_EXT :: 0x884C;
GL_TEXTURE_COMPARE_FUNC_EXT :: 0x884D;
GL_COMPARE_REF_TO_TEXTURE_EXT :: 0x884E;
GL_SAMPLER_2D_SHADOW_EXT :: 0x8B62;

GL_EXT_sparse_texture :: 1;
GL_TEXTURE_SPARSE_EXT :: 0x91A6;
GL_VIRTUAL_PAGE_SIZE_INDEX_EXT :: 0x91A7;
GL_NUM_SPARSE_LEVELS_EXT :: 0x91AA;
GL_NUM_VIRTUAL_PAGE_SIZES_EXT :: 0x91A8;
GL_VIRTUAL_PAGE_SIZE_X_EXT :: 0x9195;
GL_VIRTUAL_PAGE_SIZE_Y_EXT :: 0x9196;
GL_VIRTUAL_PAGE_SIZE_Z_EXT :: 0x9197;
GL_TEXTURE_2D_ARRAY :: 0x8C1A;
GL_TEXTURE_3D :: 0x806F;
GL_MAX_SPARSE_TEXTURE_SIZE_EXT :: 0x9198;
GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT :: 0x9199;
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT :: 0x919A;
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT :: 0x91A9;

GL_EXT_sparse_texture2 :: 1;

GL_EXT_tessellation_point_size :: 1;

GL_EXT_tessellation_shader :: 1;
GL_PATCHES_EXT :: 0x000E;
GL_PATCH_VERTICES_EXT :: 0x8E72;
GL_TESS_CONTROL_OUTPUT_VERTICES_EXT :: 0x8E75;
GL_TESS_GEN_MODE_EXT :: 0x8E76;
GL_TESS_GEN_SPACING_EXT :: 0x8E77;
GL_TESS_GEN_VERTEX_ORDER_EXT :: 0x8E78;
GL_TESS_GEN_POINT_MODE_EXT :: 0x8E79;
GL_ISOLINES_EXT :: 0x8E7A;
GL_QUADS_EXT :: 0x0007;
GL_FRACTIONAL_ODD_EXT :: 0x8E7B;
GL_FRACTIONAL_EVEN_EXT :: 0x8E7C;
GL_MAX_PATCH_VERTICES_EXT :: 0x8E7D;
GL_MAX_TESS_GEN_LEVEL_EXT :: 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT :: 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT :: 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT :: 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT :: 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT :: 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS_EXT :: 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT :: 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT :: 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT :: 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT :: 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT :: 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT :: 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT :: 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT :: 0x8E1F;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT :: 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT :: 0x92CE;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT :: 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT :: 0x92D4;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT :: 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT :: 0x90CC;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT :: 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT :: 0x90D9;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221;
GL_IS_PER_PATCH_EXT :: 0x92E7;
GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT :: 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT :: 0x9308;
GL_TESS_CONTROL_SHADER_EXT :: 0x8E88;
GL_TESS_EVALUATION_SHADER_EXT :: 0x8E87;
GL_TESS_CONTROL_SHADER_BIT_EXT :: 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT_EXT :: 0x00000010;

GL_EXT_texture_border_clamp :: 1;
GL_TEXTURE_BORDER_COLOR_EXT :: 0x1004;
GL_CLAMP_TO_BORDER_EXT :: 0x812D;

GL_EXT_texture_buffer :: 1;
GL_TEXTURE_BUFFER_EXT :: 0x8C2A;
GL_TEXTURE_BUFFER_BINDING_EXT :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE_EXT :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER_EXT :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT :: 0x8C2D;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT :: 0x919F;
GL_SAMPLER_BUFFER_EXT :: 0x8DC2;
GL_INT_SAMPLER_BUFFER_EXT :: 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT :: 0x8DD8;
GL_IMAGE_BUFFER_EXT :: 0x9051;
GL_INT_IMAGE_BUFFER_EXT :: 0x905C;
GL_UNSIGNED_INT_IMAGE_BUFFER_EXT :: 0x9067;
GL_TEXTURE_BUFFER_OFFSET_EXT :: 0x919D;
GL_TEXTURE_BUFFER_SIZE_EXT :: 0x919E;

GL_EXT_texture_compression_astc_decode_mode :: 1;
GL_TEXTURE_ASTC_DECODE_PRECISION_EXT :: 0x8F69;

GL_EXT_texture_compression_bptc :: 1;
GL_COMPRESSED_RGBA_BPTC_UNORM_EXT :: 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT :: 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT :: 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT :: 0x8E8F;

GL_EXT_texture_compression_dxt1 :: 1;
GL_COMPRESSED_RGB_S3TC_DXT1_EXT :: 0x83F0;
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT :: 0x83F1;

GL_EXT_texture_compression_rgtc :: 1;
GL_COMPRESSED_RED_RGTC1_EXT :: 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT :: 0x8DBC;
GL_COMPRESSED_RED_GREEN_RGTC2_EXT :: 0x8DBD;
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT :: 0x8DBE;

GL_EXT_texture_compression_s3tc :: 1;
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT :: 0x83F2;
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT :: 0x83F3;

GL_EXT_texture_compression_s3tc_srgb :: 1;
GL_COMPRESSED_SRGB_S3TC_DXT1_EXT :: 0x8C4C;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT :: 0x8C4D;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT :: 0x8C4E;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT :: 0x8C4F;

GL_EXT_texture_cube_map_array :: 1;
GL_TEXTURE_CUBE_MAP_ARRAY_EXT :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT :: 0x900A;
GL_SAMPLER_CUBE_MAP_ARRAY_EXT :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT :: 0x900F;
GL_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x9054;
GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x905F;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x906A;

GL_EXT_texture_filter_anisotropic :: 1;
GL_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FF;

GL_EXT_texture_filter_minmax :: 1;
GL_TEXTURE_REDUCTION_MODE_EXT :: 0x9366;
GL_WEIGHTED_AVERAGE_EXT :: 0x9367;

GL_EXT_texture_format_BGRA8888 :: 1;

GL_EXT_texture_format_sRGB_override :: 1;
GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT :: 0x8FBF;

GL_EXT_texture_mirror_clamp_to_edge :: 1;
GL_MIRROR_CLAMP_TO_EDGE_EXT :: 0x8743;

GL_EXT_texture_norm16 :: 1;
GL_R16_EXT :: 0x822A;
GL_RG16_EXT :: 0x822C;
GL_RGBA16_EXT :: 0x805B;
GL_RGB16_EXT :: 0x8054;
GL_RGB16_SNORM_EXT :: 0x8F9A;

GL_EXT_texture_query_lod :: 1;

GL_EXT_texture_rg :: 1;
GL_RED_EXT :: 0x1903;
GL_RG_EXT :: 0x8227;
GL_R8_EXT :: 0x8229;
GL_RG8_EXT :: 0x822B;

GL_EXT_texture_sRGB_R8 :: 1;
GL_SR8_EXT :: 0x8FBD;

GL_EXT_texture_sRGB_RG8 :: 1;
GL_SRG8_EXT :: 0x8FBE;

GL_EXT_texture_sRGB_decode :: 1;
GL_TEXTURE_SRGB_DECODE_EXT :: 0x8A48;
GL_DECODE_EXT :: 0x8A49;
GL_SKIP_DECODE_EXT :: 0x8A4A;

GL_EXT_texture_shadow_lod :: 1;

GL_EXT_texture_storage :: 1;
GL_TEXTURE_IMMUTABLE_FORMAT_EXT :: 0x912F;
GL_ALPHA8_EXT :: 0x803C;
GL_LUMINANCE8_EXT :: 0x8040;
GL_LUMINANCE8_ALPHA8_EXT :: 0x8045;
GL_RGBA32F_EXT :: 0x8814;
GL_RGB32F_EXT :: 0x8815;
GL_ALPHA32F_EXT :: 0x8816;
GL_LUMINANCE32F_EXT :: 0x8818;
GL_LUMINANCE_ALPHA32F_EXT :: 0x8819;
GL_ALPHA16F_EXT :: 0x881C;
GL_LUMINANCE16F_EXT :: 0x881E;
GL_LUMINANCE_ALPHA16F_EXT :: 0x881F;
GL_R32F_EXT :: 0x822E;
GL_RG32F_EXT :: 0x8230;

GL_EXT_texture_storage_compression :: 1;
GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT :: 0x8F6E;
GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT :: 0x96C4;
GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT :: 0x96C5;
GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT :: 0x96C6;
GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT :: 0x96C7;
GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT :: 0x96C8;
GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT :: 0x96C9;
GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT :: 0x96CA;
GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT :: 0x96CB;
GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT :: 0x96CC;
GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT :: 0x96CD;
GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT :: 0x96CE;
GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT :: 0x96CF;

GL_EXT_texture_type_2_10_10_10_REV :: 1;
GL_UNSIGNED_INT_2_10_10_10_REV_EXT :: 0x8368;

GL_EXT_texture_view :: 1;
GL_TEXTURE_VIEW_MIN_LEVEL_EXT :: 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS_EXT :: 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER_EXT :: 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS_EXT :: 0x82DE;

GL_EXT_unpack_subimage :: 1;
GL_UNPACK_ROW_LENGTH_EXT :: 0x0CF2;
GL_UNPACK_SKIP_ROWS_EXT :: 0x0CF3;
GL_UNPACK_SKIP_PIXELS_EXT :: 0x0CF4;

GL_EXT_win32_keyed_mutex :: 1;

GL_EXT_window_rectangles :: 1;
GL_INCLUSIVE_EXT :: 0x8F10;
GL_EXCLUSIVE_EXT :: 0x8F11;
GL_WINDOW_RECTANGLE_EXT :: 0x8F12;
GL_WINDOW_RECTANGLE_MODE_EXT :: 0x8F13;
GL_MAX_WINDOW_RECTANGLES_EXT :: 0x8F14;
GL_NUM_WINDOW_RECTANGLES_EXT :: 0x8F15;

GL_FJ_shader_binary_GCCSO :: 1;
GL_GCCSO_SHADER_BINARY_FJ :: 0x9260;

GL_IMG_bindless_texture :: 1;

GL_IMG_framebuffer_downsample :: 1;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG :: 0x913C;
GL_NUM_DOWNSAMPLE_SCALES_IMG :: 0x913D;
GL_DOWNSAMPLE_SCALES_IMG :: 0x913E;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG :: 0x913F;

GL_IMG_multisampled_render_to_texture :: 1;
GL_RENDERBUFFER_SAMPLES_IMG :: 0x9133;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG :: 0x9134;
GL_MAX_SAMPLES_IMG :: 0x9135;
GL_TEXTURE_SAMPLES_IMG :: 0x9136;

GL_IMG_program_binary :: 1;
GL_SGX_PROGRAM_BINARY_IMG :: 0x9130;

GL_IMG_read_format :: 1;
GL_BGRA_IMG :: 0x80E1;
GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG :: 0x8365;

GL_IMG_shader_binary :: 1;
GL_SGX_BINARY_IMG :: 0x8C0A;

GL_IMG_texture_compression_pvrtc :: 1;
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG :: 0x8C00;
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG :: 0x8C01;
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG :: 0x8C02;
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG :: 0x8C03;

GL_IMG_texture_compression_pvrtc2 :: 1;
GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG :: 0x9137;
GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG :: 0x9138;

GL_IMG_texture_filter_cubic :: 1;
GL_CUBIC_IMG :: 0x9139;
GL_CUBIC_MIPMAP_NEAREST_IMG :: 0x913A;
GL_CUBIC_MIPMAP_LINEAR_IMG :: 0x913B;

GL_INTEL_blackhole_render :: 1;
GL_BLACKHOLE_RENDER_INTEL :: 0x83FC;

GL_INTEL_conservative_rasterization :: 1;
GL_CONSERVATIVE_RASTERIZATION_INTEL :: 0x83FE;

GL_INTEL_framebuffer_CMAA :: 1;

GL_INTEL_performance_query :: 1;
GL_PERFQUERY_SINGLE_CONTEXT_INTEL :: 0x00000000;
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL :: 0x00000001;
GL_PERFQUERY_WAIT_INTEL :: 0x83FB;
GL_PERFQUERY_FLUSH_INTEL :: 0x83FA;
GL_PERFQUERY_DONOT_FLUSH_INTEL :: 0x83F9;
GL_PERFQUERY_COUNTER_EVENT_INTEL :: 0x94F0;
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL :: 0x94F1;
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL :: 0x94F2;
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL :: 0x94F3;
GL_PERFQUERY_COUNTER_RAW_INTEL :: 0x94F4;
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL :: 0x94F5;
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL :: 0x94F8;
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL :: 0x94F9;
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL :: 0x94FA;
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL :: 0x94FB;
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL :: 0x94FC;
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL :: 0x94FD;
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL :: 0x94FE;
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL :: 0x94FF;
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL :: 0x9500;

GL_MESA_bgra :: 1;
GL_BGR_EXT :: 0x80E0;

GL_MESA_framebuffer_flip_x :: 1;
GL_FRAMEBUFFER_FLIP_X_MESA :: 0x8BBC;

GL_MESA_framebuffer_flip_y :: 1;
GL_FRAMEBUFFER_FLIP_Y_MESA :: 0x8BBB;

GL_MESA_framebuffer_swap_xy :: 1;
GL_FRAMEBUFFER_SWAP_XY_MESA :: 0x8BBD;

GL_MESA_program_binary_formats :: 1;
GL_PROGRAM_BINARY_FORMAT_MESA :: 0x875F;

GL_MESA_sampler_objects :: 1;
GL_SAMPLER_BINDING :: 0x8919;

GL_MESA_shader_integer_functions :: 1;

GL_MESA_texture_const_bandwidth :: 1;
GL_CONST_BW_TILING_MESA :: 0x8BBE;

GL_NVX_blend_equation_advanced_multi_draw_buffers :: 1;

GL_NV_bindless_texture :: 1;

GL_NV_blend_equation_advanced :: 1;
GL_BLEND_OVERLAP_NV :: 0x9281;
GL_BLEND_PREMULTIPLIED_SRC_NV :: 0x9280;
GL_BLUE_NV :: 0x1905;
GL_COLORBURN_NV :: 0x929A;
GL_COLORDODGE_NV :: 0x9299;
GL_CONJOINT_NV :: 0x9284;
GL_CONTRAST_NV :: 0x92A1;
GL_DARKEN_NV :: 0x9297;
GL_DIFFERENCE_NV :: 0x929E;
GL_DISJOINT_NV :: 0x9283;
GL_DST_ATOP_NV :: 0x928F;
GL_DST_IN_NV :: 0x928B;
GL_DST_NV :: 0x9287;
GL_DST_OUT_NV :: 0x928D;
GL_DST_OVER_NV :: 0x9289;
GL_EXCLUSION_NV :: 0x92A0;
GL_GREEN_NV :: 0x1904;
GL_HARDLIGHT_NV :: 0x929B;
GL_HARDMIX_NV :: 0x92A9;
GL_HSL_COLOR_NV :: 0x92AF;
GL_HSL_HUE_NV :: 0x92AD;
GL_HSL_LUMINOSITY_NV :: 0x92B0;
GL_HSL_SATURATION_NV :: 0x92AE;
GL_INVERT_OVG_NV :: 0x92B4;
GL_INVERT_RGB_NV :: 0x92A3;
GL_LIGHTEN_NV :: 0x9298;
GL_LINEARBURN_NV :: 0x92A5;
GL_LINEARDODGE_NV :: 0x92A4;
GL_LINEARLIGHT_NV :: 0x92A7;
GL_MINUS_CLAMPED_NV :: 0x92B3;
GL_MINUS_NV :: 0x929F;
GL_MULTIPLY_NV :: 0x9294;
GL_OVERLAY_NV :: 0x9296;
GL_PINLIGHT_NV :: 0x92A8;
GL_PLUS_CLAMPED_ALPHA_NV :: 0x92B2;
GL_PLUS_CLAMPED_NV :: 0x92B1;
GL_PLUS_DARKER_NV :: 0x9292;
GL_PLUS_NV :: 0x9291;
GL_RED_NV :: 0x1903;
GL_SCREEN_NV :: 0x9295;
GL_SOFTLIGHT_NV :: 0x929C;
GL_SRC_ATOP_NV :: 0x928E;
GL_SRC_IN_NV :: 0x928A;
GL_SRC_NV :: 0x9286;
GL_SRC_OUT_NV :: 0x928C;
GL_SRC_OVER_NV :: 0x9288;
GL_UNCORRELATED_NV :: 0x9282;
GL_VIVIDLIGHT_NV :: 0x92A6;
GL_XOR_NV :: 0x1506;

GL_NV_blend_equation_advanced_coherent :: 1;
GL_BLEND_ADVANCED_COHERENT_NV :: 0x9285;

GL_NV_blend_minmax_factor :: 1;
GL_FACTOR_MIN_AMD :: 0x901C;
GL_FACTOR_MAX_AMD :: 0x901D;

GL_NV_clip_space_w_scaling :: 1;
GL_VIEWPORT_POSITION_W_SCALE_NV :: 0x937C;
GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV :: 0x937D;
GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV :: 0x937E;

GL_NV_compute_shader_derivatives :: 1;

GL_NV_conditional_render :: 1;
GL_QUERY_WAIT_NV :: 0x8E13;
GL_QUERY_NO_WAIT_NV :: 0x8E14;
GL_QUERY_BY_REGION_WAIT_NV :: 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT_NV :: 0x8E16;

GL_NV_conservative_raster :: 1;
GL_CONSERVATIVE_RASTERIZATION_NV :: 0x9346;
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV :: 0x9347;
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV :: 0x9348;
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV :: 0x9349;

GL_NV_conservative_raster_pre_snap :: 1;
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV :: 0x9550;

GL_NV_conservative_raster_pre_snap_triangles :: 1;
GL_CONSERVATIVE_RASTER_MODE_NV :: 0x954D;
GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV :: 0x954E;
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV :: 0x954F;

GL_NV_copy_buffer :: 1;
GL_COPY_READ_BUFFER_NV :: 0x8F36;
GL_COPY_WRITE_BUFFER_NV :: 0x8F37;

GL_NV_coverage_sample :: 1;
GL_COVERAGE_COMPONENT_NV :: 0x8ED0;
GL_COVERAGE_COMPONENT4_NV :: 0x8ED1;
GL_COVERAGE_ATTACHMENT_NV :: 0x8ED2;
GL_COVERAGE_BUFFERS_NV :: 0x8ED3;
GL_COVERAGE_SAMPLES_NV :: 0x8ED4;
GL_COVERAGE_ALL_FRAGMENTS_NV :: 0x8ED5;
GL_COVERAGE_EDGE_FRAGMENTS_NV :: 0x8ED6;
GL_COVERAGE_AUTOMATIC_NV :: 0x8ED7;
GL_COVERAGE_BUFFER_BIT_NV :: 0x00008000;

GL_NV_depth_nonlinear :: 1;
GL_DEPTH_COMPONENT16_NONLINEAR_NV :: 0x8E2C;

GL_NV_draw_buffers :: 1;
GL_MAX_DRAW_BUFFERS_NV :: 0x8824;
GL_DRAW_BUFFER0_NV :: 0x8825;
GL_DRAW_BUFFER1_NV :: 0x8826;
GL_DRAW_BUFFER2_NV :: 0x8827;
GL_DRAW_BUFFER3_NV :: 0x8828;
GL_DRAW_BUFFER4_NV :: 0x8829;
GL_DRAW_BUFFER5_NV :: 0x882A;
GL_DRAW_BUFFER6_NV :: 0x882B;
GL_DRAW_BUFFER7_NV :: 0x882C;
GL_DRAW_BUFFER8_NV :: 0x882D;
GL_DRAW_BUFFER9_NV :: 0x882E;
GL_DRAW_BUFFER10_NV :: 0x882F;
GL_DRAW_BUFFER11_NV :: 0x8830;
GL_DRAW_BUFFER12_NV :: 0x8831;
GL_DRAW_BUFFER13_NV :: 0x8832;
GL_DRAW_BUFFER14_NV :: 0x8833;
GL_DRAW_BUFFER15_NV :: 0x8834;
GL_COLOR_ATTACHMENT0_NV :: 0x8CE0;
GL_COLOR_ATTACHMENT1_NV :: 0x8CE1;
GL_COLOR_ATTACHMENT2_NV :: 0x8CE2;
GL_COLOR_ATTACHMENT3_NV :: 0x8CE3;
GL_COLOR_ATTACHMENT4_NV :: 0x8CE4;
GL_COLOR_ATTACHMENT5_NV :: 0x8CE5;
GL_COLOR_ATTACHMENT6_NV :: 0x8CE6;
GL_COLOR_ATTACHMENT7_NV :: 0x8CE7;
GL_COLOR_ATTACHMENT8_NV :: 0x8CE8;
GL_COLOR_ATTACHMENT9_NV :: 0x8CE9;
GL_COLOR_ATTACHMENT10_NV :: 0x8CEA;
GL_COLOR_ATTACHMENT11_NV :: 0x8CEB;
GL_COLOR_ATTACHMENT12_NV :: 0x8CEC;
GL_COLOR_ATTACHMENT13_NV :: 0x8CED;
GL_COLOR_ATTACHMENT14_NV :: 0x8CEE;
GL_COLOR_ATTACHMENT15_NV :: 0x8CEF;

GL_NV_draw_instanced :: 1;

GL_NV_draw_vulkan_image :: 1;

GL_NV_explicit_attrib_location :: 1;

GL_NV_fbo_color_attachments :: 1;
GL_MAX_COLOR_ATTACHMENTS_NV :: 0x8CDF;

GL_NV_fence :: 1;
GL_ALL_COMPLETED_NV :: 0x84F2;
GL_FENCE_STATUS_NV :: 0x84F3;
GL_FENCE_CONDITION_NV :: 0x84F4;

GL_NV_fill_rectangle :: 1;
GL_FILL_RECTANGLE_NV :: 0x933C;

GL_NV_fragment_coverage_to_color :: 1;
GL_FRAGMENT_COVERAGE_TO_COLOR_NV :: 0x92DD;
GL_FRAGMENT_COVERAGE_COLOR_NV :: 0x92DE;

GL_NV_fragment_shader_barycentric :: 1;

GL_NV_fragment_shader_interlock :: 1;

GL_NV_framebuffer_blit :: 1;
GL_READ_FRAMEBUFFER_NV :: 0x8CA8;
GL_DRAW_FRAMEBUFFER_NV :: 0x8CA9;
GL_DRAW_FRAMEBUFFER_BINDING_NV :: 0x8CA6;
GL_READ_FRAMEBUFFER_BINDING_NV :: 0x8CAA;

GL_NV_framebuffer_mixed_samples :: 1;
GL_COVERAGE_MODULATION_TABLE_NV :: 0x9331;
GL_COLOR_SAMPLES_NV :: 0x8E20;
GL_DEPTH_SAMPLES_NV :: 0x932D;
GL_STENCIL_SAMPLES_NV :: 0x932E;
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV :: 0x932F;
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV :: 0x9330;
GL_COVERAGE_MODULATION_NV :: 0x9332;
GL_COVERAGE_MODULATION_TABLE_SIZE_NV :: 0x9333;

GL_NV_framebuffer_multisample :: 1;
GL_RENDERBUFFER_SAMPLES_NV :: 0x8CAB;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV :: 0x8D56;
GL_MAX_SAMPLES_NV :: 0x8D57;

GL_NV_generate_mipmap_sRGB :: 1;

GL_NV_geometry_shader_passthrough :: 1;

GL_NV_gpu_shader5 :: 1;

GL_INT64_NV :: 0x140E;
GL_UNSIGNED_INT64_NV :: 0x140F;
GL_INT8_NV :: 0x8FE0;
GL_INT8_VEC2_NV :: 0x8FE1;
GL_INT8_VEC3_NV :: 0x8FE2;
GL_INT8_VEC4_NV :: 0x8FE3;
GL_INT16_NV :: 0x8FE4;
GL_INT16_VEC2_NV :: 0x8FE5;
GL_INT16_VEC3_NV :: 0x8FE6;
GL_INT16_VEC4_NV :: 0x8FE7;
GL_INT64_VEC2_NV :: 0x8FE9;
GL_INT64_VEC3_NV :: 0x8FEA;
GL_INT64_VEC4_NV :: 0x8FEB;
GL_UNSIGNED_INT8_NV :: 0x8FEC;
GL_UNSIGNED_INT8_VEC2_NV :: 0x8FED;
GL_UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
GL_UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
GL_UNSIGNED_INT16_NV :: 0x8FF0;
GL_UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
GL_UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
GL_UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
GL_UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
GL_UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
GL_UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
GL_FLOAT16_NV :: 0x8FF8;
GL_FLOAT16_VEC2_NV :: 0x8FF9;
GL_FLOAT16_VEC3_NV :: 0x8FFA;
GL_FLOAT16_VEC4_NV :: 0x8FFB;
GL_PATCHES :: 0x000E;

GL_NV_image_formats :: 1;

GL_NV_instanced_arrays :: 1;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV :: 0x88FE;

GL_NV_internalformat_sample_query :: 1;
GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
GL_MULTISAMPLES_NV :: 0x9371;
GL_SUPERSAMPLE_SCALE_X_NV :: 0x9372;
GL_SUPERSAMPLE_SCALE_Y_NV :: 0x9373;
GL_CONFORMANT_NV :: 0x9374;

GL_NV_memory_attachment :: 1;
GL_ATTACHED_MEMORY_OBJECT_NV :: 0x95A4;
GL_ATTACHED_MEMORY_OFFSET_NV :: 0x95A5;
GL_MEMORY_ATTACHABLE_ALIGNMENT_NV :: 0x95A6;
GL_MEMORY_ATTACHABLE_SIZE_NV :: 0x95A7;
GL_MEMORY_ATTACHABLE_NV :: 0x95A8;
GL_DETACHED_MEMORY_INCARNATION_NV :: 0x95A9;
GL_DETACHED_TEXTURES_NV :: 0x95AA;
GL_DETACHED_BUFFERS_NV :: 0x95AB;
GL_MAX_DETACHED_TEXTURES_NV :: 0x95AC;
GL_MAX_DETACHED_BUFFERS_NV :: 0x95AD;

GL_NV_memory_object_sparse :: 1;

GL_NV_mesh_shader :: 1;
GL_MESH_SHADER_NV :: 0x9559;
GL_TASK_SHADER_NV :: 0x955A;
GL_MAX_MESH_UNIFORM_BLOCKS_NV :: 0x8E60;
GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV :: 0x8E61;
GL_MAX_MESH_IMAGE_UNIFORMS_NV :: 0x8E62;
GL_MAX_MESH_UNIFORM_COMPONENTS_NV :: 0x8E63;
GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV :: 0x8E64;
GL_MAX_MESH_ATOMIC_COUNTERS_NV :: 0x8E65;
GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV :: 0x8E66;
GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV :: 0x8E67;
GL_MAX_TASK_UNIFORM_BLOCKS_NV :: 0x8E68;
GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV :: 0x8E69;
GL_MAX_TASK_IMAGE_UNIFORMS_NV :: 0x8E6A;
GL_MAX_TASK_UNIFORM_COMPONENTS_NV :: 0x8E6B;
GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV :: 0x8E6C;
GL_MAX_TASK_ATOMIC_COUNTERS_NV :: 0x8E6D;
GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV :: 0x8E6E;
GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV :: 0x8E6F;
GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV :: 0x95A2;
GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV :: 0x95A3;
GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV :: 0x9536;
GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV :: 0x9537;
GL_MAX_MESH_OUTPUT_VERTICES_NV :: 0x9538;
GL_MAX_MESH_OUTPUT_PRIMITIVES_NV :: 0x9539;
GL_MAX_TASK_OUTPUT_COUNT_NV :: 0x953A;
GL_MAX_DRAW_MESH_TASKS_COUNT_NV :: 0x953D;
GL_MAX_MESH_VIEWS_NV :: 0x9557;
GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV :: 0x92DF;
GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV :: 0x9543;
GL_MAX_MESH_WORK_GROUP_SIZE_NV :: 0x953B;
GL_MAX_TASK_WORK_GROUP_SIZE_NV :: 0x953C;
GL_MESH_WORK_GROUP_SIZE_NV :: 0x953E;
GL_TASK_WORK_GROUP_SIZE_NV :: 0x953F;
GL_MESH_VERTICES_OUT_NV :: 0x9579;
GL_MESH_PRIMITIVES_OUT_NV :: 0x957A;
GL_MESH_OUTPUT_TYPE_NV :: 0x957B;
GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV :: 0x959C;
GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV :: 0x959D;
GL_REFERENCED_BY_MESH_SHADER_NV :: 0x95A0;
GL_REFERENCED_BY_TASK_SHADER_NV :: 0x95A1;
GL_MESH_SHADER_BIT_NV :: 0x00000040;
GL_TASK_SHADER_BIT_NV :: 0x00000080;
GL_MESH_SUBROUTINE_NV :: 0x957C;
GL_TASK_SUBROUTINE_NV :: 0x957D;
GL_MESH_SUBROUTINE_UNIFORM_NV :: 0x957E;
GL_TASK_SUBROUTINE_UNIFORM_NV :: 0x957F;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV :: 0x959E;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV :: 0x959F;

GL_NV_non_square_matrices :: 1;
GL_FLOAT_MAT2x3_NV :: 0x8B65;
GL_FLOAT_MAT2x4_NV :: 0x8B66;
GL_FLOAT_MAT3x2_NV :: 0x8B67;
GL_FLOAT_MAT3x4_NV :: 0x8B68;
GL_FLOAT_MAT4x2_NV :: 0x8B69;
GL_FLOAT_MAT4x3_NV :: 0x8B6A;

GL_NV_pack_subimage :: 1;
GL_PACK_ROW_LENGTH_NV :: 0x0D02;
GL_PACK_SKIP_ROWS_NV :: 0x0D03;
GL_PACK_SKIP_PIXELS_NV :: 0x0D04;

GL_NV_path_rendering :: 1;

GL_PATH_FORMAT_SVG_NV :: 0x9070;
GL_PATH_FORMAT_PS_NV :: 0x9071;
GL_STANDARD_FONT_NAME_NV :: 0x9072;
GL_SYSTEM_FONT_NAME_NV :: 0x9073;
GL_FILE_NAME_NV :: 0x9074;
GL_PATH_STROKE_WIDTH_NV :: 0x9075;
GL_PATH_END_CAPS_NV :: 0x9076;
GL_PATH_INITIAL_END_CAP_NV :: 0x9077;
GL_PATH_TERMINAL_END_CAP_NV :: 0x9078;
GL_PATH_JOIN_STYLE_NV :: 0x9079;
GL_PATH_MITER_LIMIT_NV :: 0x907A;
GL_PATH_DASH_CAPS_NV :: 0x907B;
GL_PATH_INITIAL_DASH_CAP_NV :: 0x907C;
GL_PATH_TERMINAL_DASH_CAP_NV :: 0x907D;
GL_PATH_DASH_OFFSET_NV :: 0x907E;
GL_PATH_CLIENT_LENGTH_NV :: 0x907F;
GL_PATH_FILL_MODE_NV :: 0x9080;
GL_PATH_FILL_MASK_NV :: 0x9081;
GL_PATH_FILL_COVER_MODE_NV :: 0x9082;
GL_PATH_STROKE_COVER_MODE_NV :: 0x9083;
GL_PATH_STROKE_MASK_NV :: 0x9084;
GL_COUNT_UP_NV :: 0x9088;
GL_COUNT_DOWN_NV :: 0x9089;
GL_PATH_OBJECT_BOUNDING_BOX_NV :: 0x908A;
GL_CONVEX_HULL_NV :: 0x908B;
GL_BOUNDING_BOX_NV :: 0x908D;
GL_TRANSLATE_X_NV :: 0x908E;
GL_TRANSLATE_Y_NV :: 0x908F;
GL_TRANSLATE_2D_NV :: 0x9090;
GL_TRANSLATE_3D_NV :: 0x9091;
GL_AFFINE_2D_NV :: 0x9092;
GL_AFFINE_3D_NV :: 0x9094;
GL_TRANSPOSE_AFFINE_2D_NV :: 0x9096;
GL_TRANSPOSE_AFFINE_3D_NV :: 0x9098;
GL_UTF8_NV :: 0x909A;
GL_UTF16_NV :: 0x909B;
GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV :: 0x909C;
GL_PATH_COMMAND_COUNT_NV :: 0x909D;
GL_PATH_COORD_COUNT_NV :: 0x909E;
GL_PATH_DASH_ARRAY_COUNT_NV :: 0x909F;
GL_PATH_COMPUTED_LENGTH_NV :: 0x90A0;
GL_PATH_FILL_BOUNDING_BOX_NV :: 0x90A1;
GL_PATH_STROKE_BOUNDING_BOX_NV :: 0x90A2;
GL_SQUARE_NV :: 0x90A3;
GL_ROUND_NV :: 0x90A4;
GL_TRIANGULAR_NV :: 0x90A5;
GL_BEVEL_NV :: 0x90A6;
GL_MITER_REVERT_NV :: 0x90A7;
GL_MITER_TRUNCATE_NV :: 0x90A8;
GL_SKIP_MISSING_GLYPH_NV :: 0x90A9;
GL_USE_MISSING_GLYPH_NV :: 0x90AA;
GL_PATH_ERROR_POSITION_NV :: 0x90AB;
GL_ACCUM_ADJACENT_PAIRS_NV :: 0x90AD;
GL_ADJACENT_PAIRS_NV :: 0x90AE;
GL_FIRST_TO_REST_NV :: 0x90AF;
GL_PATH_GEN_MODE_NV :: 0x90B0;
GL_PATH_GEN_COEFF_NV :: 0x90B1;
GL_PATH_GEN_COMPONENTS_NV :: 0x90B3;
GL_PATH_STENCIL_FUNC_NV :: 0x90B7;
GL_PATH_STENCIL_REF_NV :: 0x90B8;
GL_PATH_STENCIL_VALUE_MASK_NV :: 0x90B9;
GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV :: 0x90BD;
GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV :: 0x90BE;
GL_PATH_COVER_DEPTH_FUNC_NV :: 0x90BF;
GL_PATH_DASH_OFFSET_RESET_NV :: 0x90B4;
GL_MOVE_TO_RESETS_NV :: 0x90B5;
GL_MOVE_TO_CONTINUES_NV :: 0x90B6;
GL_CLOSE_PATH_NV :: 0x00;
GL_MOVE_TO_NV :: 0x02;
GL_RELATIVE_MOVE_TO_NV :: 0x03;
GL_LINE_TO_NV :: 0x04;
GL_RELATIVE_LINE_TO_NV :: 0x05;
GL_HORIZONTAL_LINE_TO_NV :: 0x06;
GL_RELATIVE_HORIZONTAL_LINE_TO_NV :: 0x07;
GL_VERTICAL_LINE_TO_NV :: 0x08;
GL_RELATIVE_VERTICAL_LINE_TO_NV :: 0x09;
GL_QUADRATIC_CURVE_TO_NV :: 0x0A;
GL_RELATIVE_QUADRATIC_CURVE_TO_NV :: 0x0B;
GL_CUBIC_CURVE_TO_NV :: 0x0C;
GL_RELATIVE_CUBIC_CURVE_TO_NV :: 0x0D;
GL_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0E;
GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0F;
GL_SMOOTH_CUBIC_CURVE_TO_NV :: 0x10;
GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV :: 0x11;
GL_SMALL_CCW_ARC_TO_NV :: 0x12;
GL_RELATIVE_SMALL_CCW_ARC_TO_NV :: 0x13;
GL_SMALL_CW_ARC_TO_NV :: 0x14;
GL_RELATIVE_SMALL_CW_ARC_TO_NV :: 0x15;
GL_LARGE_CCW_ARC_TO_NV :: 0x16;
GL_RELATIVE_LARGE_CCW_ARC_TO_NV :: 0x17;
GL_LARGE_CW_ARC_TO_NV :: 0x18;
GL_RELATIVE_LARGE_CW_ARC_TO_NV :: 0x19;
GL_RESTART_PATH_NV :: 0xF0;
GL_DUP_FIRST_CUBIC_CURVE_TO_NV :: 0xF2;
GL_DUP_LAST_CUBIC_CURVE_TO_NV :: 0xF4;
GL_RECT_NV :: 0xF6;
GL_CIRCULAR_CCW_ARC_TO_NV :: 0xF8;
GL_CIRCULAR_CW_ARC_TO_NV :: 0xFA;
GL_CIRCULAR_TANGENT_ARC_TO_NV :: 0xFC;
GL_ARC_TO_NV :: 0xFE;
GL_RELATIVE_ARC_TO_NV :: 0xFF;
GL_BOLD_BIT_NV :: 0x01;
GL_ITALIC_BIT_NV :: 0x02;
GL_GLYPH_WIDTH_BIT_NV :: 0x01;
GL_GLYPH_HEIGHT_BIT_NV :: 0x02;
GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV :: 0x04;
GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV :: 0x08;
GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV :: 0x10;
GL_GLYPH_VERTICAL_BEARING_X_BIT_NV :: 0x20;
GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV :: 0x40;
GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV :: 0x80;
GL_GLYPH_HAS_KERNING_BIT_NV :: 0x100;
GL_FONT_X_MIN_BOUNDS_BIT_NV :: 0x00010000;
GL_FONT_Y_MIN_BOUNDS_BIT_NV :: 0x00020000;
GL_FONT_X_MAX_BOUNDS_BIT_NV :: 0x00040000;
GL_FONT_Y_MAX_BOUNDS_BIT_NV :: 0x00080000;
GL_FONT_UNITS_PER_EM_BIT_NV :: 0x00100000;
GL_FONT_ASCENDER_BIT_NV :: 0x00200000;
GL_FONT_DESCENDER_BIT_NV :: 0x00400000;
GL_FONT_HEIGHT_BIT_NV :: 0x00800000;
GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV :: 0x01000000;
GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV :: 0x02000000;
GL_FONT_UNDERLINE_POSITION_BIT_NV :: 0x04000000;
GL_FONT_UNDERLINE_THICKNESS_BIT_NV :: 0x08000000;
GL_FONT_HAS_KERNING_BIT_NV :: 0x10000000;
GL_ROUNDED_RECT_NV :: 0xE8;
GL_RELATIVE_ROUNDED_RECT_NV :: 0xE9;
GL_ROUNDED_RECT2_NV :: 0xEA;
GL_RELATIVE_ROUNDED_RECT2_NV :: 0xEB;
GL_ROUNDED_RECT4_NV :: 0xEC;
GL_RELATIVE_ROUNDED_RECT4_NV :: 0xED;
GL_ROUNDED_RECT8_NV :: 0xEE;
GL_RELATIVE_ROUNDED_RECT8_NV :: 0xEF;
GL_RELATIVE_RECT_NV :: 0xF7;
GL_FONT_GLYPHS_AVAILABLE_NV :: 0x9368;
GL_FONT_TARGET_UNAVAILABLE_NV :: 0x9369;
GL_FONT_UNAVAILABLE_NV :: 0x936A;
GL_FONT_UNINTELLIGIBLE_NV :: 0x936B;
GL_CONIC_CURVE_TO_NV :: 0x1A;
GL_RELATIVE_CONIC_CURVE_TO_NV :: 0x1B;
GL_FONT_NUM_GLYPH_INDICES_BIT_NV :: 0x20000000;
GL_STANDARD_FONT_FORMAT_NV :: 0x936C;
GL_PATH_PROJECTION_NV :: 0x1701;
GL_PATH_MODELVIEW_NV :: 0x1700;
GL_PATH_MODELVIEW_STACK_DEPTH_NV :: 0x0BA3;
GL_PATH_MODELVIEW_MATRIX_NV :: 0x0BA6;
GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV :: 0x0D36;
GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV :: 0x84E3;
GL_PATH_PROJECTION_STACK_DEPTH_NV :: 0x0BA4;
GL_PATH_PROJECTION_MATRIX_NV :: 0x0BA7;
GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV :: 0x0D38;
GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV :: 0x84E4;
GL_FRAGMENT_INPUT_NV :: 0x936D;

GL_NV_path_rendering_shared_edge :: 1;
GL_SHARED_EDGE_NV :: 0xC0;

GL_NV_pixel_buffer_object :: 1;
GL_PIXEL_PACK_BUFFER_NV :: 0x88EB;
GL_PIXEL_UNPACK_BUFFER_NV :: 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING_NV :: 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING_NV :: 0x88EF;

GL_NV_polygon_mode :: 1;
GL_POLYGON_MODE_NV :: 0x0B40;
GL_POLYGON_OFFSET_POINT_NV :: 0x2A01;
GL_POLYGON_OFFSET_LINE_NV :: 0x2A02;
GL_POINT_NV :: 0x1B00;
GL_LINE_NV :: 0x1B01;
GL_FILL_NV :: 0x1B02;

GL_NV_primitive_shading_rate :: 1;
GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV :: 0x95B1;
GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV :: 0x95B2;

GL_NV_read_buffer :: 1;
GL_READ_BUFFER_NV :: 0x0C02;

GL_NV_read_buffer_front :: 1;

GL_NV_read_depth :: 1;

GL_NV_read_depth_stencil :: 1;

GL_NV_read_stencil :: 1;

GL_NV_representative_fragment_test :: 1;
GL_REPRESENTATIVE_FRAGMENT_TEST_NV :: 0x937F;

GL_NV_sRGB_formats :: 1;
GL_SLUMINANCE_NV :: 0x8C46;
GL_SLUMINANCE_ALPHA_NV :: 0x8C44;
GL_SRGB8_NV :: 0x8C41;
GL_SLUMINANCE8_NV :: 0x8C47;
GL_SLUMINANCE8_ALPHA8_NV :: 0x8C45;
GL_COMPRESSED_SRGB_S3TC_DXT1_NV :: 0x8C4C;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV :: 0x8C4D;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV :: 0x8C4E;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV :: 0x8C4F;
GL_ETC1_SRGB8_NV :: 0x88EE;

GL_NV_sample_locations :: 1;
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV :: 0x933D;
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV :: 0x933E;
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV :: 0x933F;
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV :: 0x9340;
GL_SAMPLE_LOCATION_NV :: 0x8E50;
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9341;
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV :: 0x9342;
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV :: 0x9343;

GL_NV_sample_mask_override_coverage :: 1;

GL_NV_scissor_exclusive :: 1;
GL_SCISSOR_TEST_EXCLUSIVE_NV :: 0x9555;
GL_SCISSOR_BOX_EXCLUSIVE_NV :: 0x9556;

GL_NV_shader_atomic_fp16_vector :: 1;

GL_NV_shader_noperspective_interpolation :: 1;

GL_NV_shader_subgroup_partitioned :: 1;
GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV :: 0x00000100;

GL_NV_shader_texture_footprint :: 1;

GL_NV_shading_rate_image :: 1;
GL_SHADING_RATE_IMAGE_NV :: 0x9563;
GL_SHADING_RATE_NO_INVOCATIONS_NV :: 0x9564;
GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV :: 0x9565;
GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV :: 0x9566;
GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV :: 0x9567;
GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV :: 0x9568;
GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV :: 0x9569;
GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV :: 0x956A;
GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV :: 0x956B;
GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV :: 0x956C;
GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV :: 0x956D;
GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV :: 0x956E;
GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV :: 0x956F;
GL_SHADING_RATE_IMAGE_BINDING_NV :: 0x955B;
GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV :: 0x955C;
GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV :: 0x955D;
GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV :: 0x955E;
GL_MAX_COARSE_FRAGMENT_SAMPLES_NV :: 0x955F;
GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV :: 0x95AE;
GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV :: 0x95AF;
GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV :: 0x95B0;

GL_NV_shadow_samplers_array :: 1;
GL_SAMPLER_2D_ARRAY_SHADOW_NV :: 0x8DC4;

GL_NV_shadow_samplers_cube :: 1;
GL_SAMPLER_CUBE_SHADOW_NV :: 0x8DC5;

GL_NV_stereo_view_rendering :: 1;

GL_NV_texture_barrier :: 1;

GL_NV_texture_border_clamp :: 1;
GL_TEXTURE_BORDER_COLOR_NV :: 0x1004;
GL_CLAMP_TO_BORDER_NV :: 0x812D;

GL_NV_texture_compression_s3tc_update :: 1;

GL_NV_texture_npot_2D_mipmap :: 1;

GL_NV_timeline_semaphore :: 1;
GL_TIMELINE_SEMAPHORE_VALUE_NV :: 0x9595;
GL_SEMAPHORE_TYPE_NV :: 0x95B3;
GL_SEMAPHORE_TYPE_BINARY_NV :: 0x95B4;
GL_SEMAPHORE_TYPE_TIMELINE_NV :: 0x95B5;
GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV :: 0x95B6;

GL_NV_viewport_array :: 1;
GL_MAX_VIEWPORTS_NV :: 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS_NV :: 0x825C;
GL_VIEWPORT_BOUNDS_RANGE_NV :: 0x825D;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV :: 0x825F;

GL_NV_viewport_array2 :: 1;

GL_NV_viewport_swizzle :: 1;
GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV :: 0x9350;
GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV :: 0x9351;
GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV :: 0x9352;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV :: 0x9353;
GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV :: 0x9354;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV :: 0x9355;
GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV :: 0x9356;
GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV :: 0x9357;
GL_VIEWPORT_SWIZZLE_X_NV :: 0x9358;
GL_VIEWPORT_SWIZZLE_Y_NV :: 0x9359;
GL_VIEWPORT_SWIZZLE_Z_NV :: 0x935A;
GL_VIEWPORT_SWIZZLE_W_NV :: 0x935B;

GL_OVR_multiview :: 1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :: 0x9630;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :: 0x9632;
GL_MAX_VIEWS_OVR :: 0x9631;
GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :: 0x9633;

GL_OVR_multiview2 :: 1;

GL_OVR_multiview_multisampled_render_to_texture :: 1;

GL_QCOM_YUV_texture_gather :: 1;

GL_QCOM_alpha_test :: 1;
GL_ALPHA_TEST_QCOM :: 0x0BC0;
GL_ALPHA_TEST_FUNC_QCOM :: 0x0BC1;
GL_ALPHA_TEST_REF_QCOM :: 0x0BC2;

GL_QCOM_binning_control :: 1;
GL_BINNING_CONTROL_HINT_QCOM :: 0x8FB0;
GL_CPU_OPTIMIZED_QCOM :: 0x8FB1;
GL_GPU_OPTIMIZED_QCOM :: 0x8FB2;
GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM :: 0x8FB3;

GL_QCOM_driver_control :: 1;

GL_QCOM_extended_get :: 1;
GL_TEXTURE_WIDTH_QCOM :: 0x8BD2;
GL_TEXTURE_HEIGHT_QCOM :: 0x8BD3;
GL_TEXTURE_DEPTH_QCOM :: 0x8BD4;
GL_TEXTURE_INTERNAL_FORMAT_QCOM :: 0x8BD5;
GL_TEXTURE_FORMAT_QCOM :: 0x8BD6;
GL_TEXTURE_TYPE_QCOM :: 0x8BD7;
GL_TEXTURE_IMAGE_VALID_QCOM :: 0x8BD8;
GL_TEXTURE_NUM_LEVELS_QCOM :: 0x8BD9;
GL_TEXTURE_TARGET_QCOM :: 0x8BDA;
GL_TEXTURE_OBJECT_VALID_QCOM :: 0x8BDB;
GL_STATE_RESTORE :: 0x8BDC;

GL_QCOM_extended_get2 :: 1;

GL_QCOM_frame_extrapolation :: 1;

GL_QCOM_framebuffer_foveated :: 1;
GL_FOVEATION_ENABLE_BIT_QCOM :: 0x00000001;
GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM :: 0x00000002;

GL_QCOM_motion_estimation :: 1;
GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM :: 0x8C90;
GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM :: 0x8C91;

GL_QCOM_perfmon_global_mode :: 1;
GL_PERFMON_GLOBAL_MODE_QCOM :: 0x8FA0;

GL_QCOM_render_sRGB_R8_RG8 :: 1;

GL_QCOM_render_shared_exponent :: 1;

GL_QCOM_shader_framebuffer_fetch_noncoherent :: 1;
GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM :: 0x96A2;

GL_QCOM_shader_framebuffer_fetch_rate :: 1;

GL_QCOM_shading_rate :: 1;
GL_SHADING_RATE_QCOM :: 0x96A4;
GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM :: 0x96A5;
GL_SHADING_RATE_1X1_PIXELS_QCOM :: 0x96A6;
GL_SHADING_RATE_1X2_PIXELS_QCOM :: 0x96A7;
GL_SHADING_RATE_2X1_PIXELS_QCOM :: 0x96A8;
GL_SHADING_RATE_2X2_PIXELS_QCOM :: 0x96A9;
GL_SHADING_RATE_4X2_PIXELS_QCOM :: 0x96AC;
GL_SHADING_RATE_4X4_PIXELS_QCOM :: 0x96AE;

GL_QCOM_texture_foveated :: 1;
GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM :: 0x8BFB;
GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM :: 0x8BFC;
GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM :: 0x8BFD;
GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM :: 0x8BFE;
GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM :: 0x8BFF;

GL_QCOM_texture_foveated2 :: 1;
GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM :: 0x96A0;

GL_QCOM_texture_foveated_subsampled_layout :: 1;
GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM :: 0x00000004;
GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM :: 0x8FA1;

GL_QCOM_texture_lod_bias :: 1;
GL_TEXTURE_LOD_BIAS_QCOM :: 0x8C96;

GL_QCOM_tiled_rendering :: 1;
GL_COLOR_BUFFER_BIT0_QCOM :: 0x00000001;
GL_COLOR_BUFFER_BIT1_QCOM :: 0x00000002;
GL_COLOR_BUFFER_BIT2_QCOM :: 0x00000004;
GL_COLOR_BUFFER_BIT3_QCOM :: 0x00000008;
GL_COLOR_BUFFER_BIT4_QCOM :: 0x00000010;
GL_COLOR_BUFFER_BIT5_QCOM :: 0x00000020;
GL_COLOR_BUFFER_BIT6_QCOM :: 0x00000040;
GL_COLOR_BUFFER_BIT7_QCOM :: 0x00000080;
GL_DEPTH_BUFFER_BIT0_QCOM :: 0x00000100;
GL_DEPTH_BUFFER_BIT1_QCOM :: 0x00000200;
GL_DEPTH_BUFFER_BIT2_QCOM :: 0x00000400;
GL_DEPTH_BUFFER_BIT3_QCOM :: 0x00000800;
GL_DEPTH_BUFFER_BIT4_QCOM :: 0x00001000;
GL_DEPTH_BUFFER_BIT5_QCOM :: 0x00002000;
GL_DEPTH_BUFFER_BIT6_QCOM :: 0x00004000;
GL_DEPTH_BUFFER_BIT7_QCOM :: 0x00008000;
GL_STENCIL_BUFFER_BIT0_QCOM :: 0x00010000;
GL_STENCIL_BUFFER_BIT1_QCOM :: 0x00020000;
GL_STENCIL_BUFFER_BIT2_QCOM :: 0x00040000;
GL_STENCIL_BUFFER_BIT3_QCOM :: 0x00080000;
GL_STENCIL_BUFFER_BIT4_QCOM :: 0x00100000;
GL_STENCIL_BUFFER_BIT5_QCOM :: 0x00200000;
GL_STENCIL_BUFFER_BIT6_QCOM :: 0x00400000;
GL_STENCIL_BUFFER_BIT7_QCOM :: 0x00800000;
GL_MULTISAMPLE_BUFFER_BIT0_QCOM :: 0x01000000;
GL_MULTISAMPLE_BUFFER_BIT1_QCOM :: 0x02000000;
GL_MULTISAMPLE_BUFFER_BIT2_QCOM :: 0x04000000;
GL_MULTISAMPLE_BUFFER_BIT3_QCOM :: 0x08000000;
GL_MULTISAMPLE_BUFFER_BIT4_QCOM :: 0x10000000;
GL_MULTISAMPLE_BUFFER_BIT5_QCOM :: 0x20000000;
GL_MULTISAMPLE_BUFFER_BIT6_QCOM :: 0x40000000;
GL_MULTISAMPLE_BUFFER_BIT7_QCOM :: 0x80000000;

GL_QCOM_writeonly_rendering :: 1;
GL_WRITEONLY_RENDERING_QCOM :: 0x8823;

GL_QCOM_ycbcr_degamma :: 1;
GL_TEXTURE_Y_DEGAMMA_QCOM :: 0x9710;
GL_TEXTURE_CBCR_DEGAMMA_QCOM :: 0x9711;

GL_VIV_shader_binary :: 1;
GL_SHADER_BINARY_VIV :: 0x8FC4;

GL_ANGLE_client_arrays :: 1;
GL_CLIENT_ARRAYS_ANGLE :: 0x93AA;

GL_ANGLE_request_extension :: 1;
GL_REQUESTABLE_EXTENSIONS_ANGLE :: 0x93A8;
GL_NUM_REQUESTABLE_EXTENSIONS_ANGLE :: 0x93A9;

GL_ANGLE_robust_resource_initialization :: 1;
GL_ROBUST_RESOURCE_INITIALIZATION_ANGLE :: 0x93AB;
GL_RESOURCE_INITIALIZED_ANGLE :: 0x969F;

GL_ANGLE_polygon_mode :: 1;
GL_POLYGON_MODE_ANGLE :: 0x0B40;
GL_POLYGON_OFFSET_LINE_ANGLE :: 0x2A02;
GL_LINE_ANGLE :: 0x1B01;
GL_FILL_ANGLE :: 0x1B02;

GL_ANGLE_provoking_vertex :: 1;
GL_FIRST_VERTEX_CONVENTION_ANGLE :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION_ANGLE :: 0x8E4E;
GL_PROVOKING_VERTEX_ANGLE :: 0x8E4F;

GL_ANGLE_clip_cull_distance :: 1;
GL_MAX_CLIP_DISTANCES_ANGLE :: 0x0D32;
GL_MAX_CULL_DISTANCES_ANGLE :: 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_ANGLE :: 0x82FA;
GL_CLIP_DISTANCE0_ANGLE :: 0x3000;
GL_CLIP_DISTANCE1_ANGLE :: 0x3001;
GL_CLIP_DISTANCE2_ANGLE :: 0x3002;
GL_CLIP_DISTANCE3_ANGLE :: 0x3003;
GL_CLIP_DISTANCE4_ANGLE :: 0x3004;
GL_CLIP_DISTANCE5_ANGLE :: 0x3005;
GL_CLIP_DISTANCE6_ANGLE :: 0x3006;
GL_CLIP_DISTANCE7_ANGLE :: 0x3007;

GL_ANGLE_stencil_texturing :: 1;
GL_DEPTH_STENCIL_TEXTURE_MODE_ANGLE :: 0x90EA;
GL_STENCIL_INDEX_ANGLE :: 0x1901;

GL_ANGLE_renderability_validation :: 1;
GL_RENDERABILITY_VALIDATION_ANGLE :: 0x9EA0;

GL_CHROMIUM_frambuffer_mixed_samples :: 1;
GL_COVERAGE_MODULATION_CHROMIUM :: 0x9332;

GL_CHROMIUM_bind_generates_resource :: 1;
GL_BIND_GENERATES_RESOURCE_CHROMIUM :: 0x9244;

GL_MEMORY_SIZE_ANGLE :: 0x93AD;

GL_EXT_direct_state_access :: 1;

GL_CHROMIUM_copy_texture :: 1;

GL_CHROMIUM_compressed_copy_texture :: 1;

GL_ANGLE_copy_texture_3d :: 1;

GL_ANGLE_lossy_etc_decode :: 1;
GL_ETC1_RGB8_LOSSY_DECODE_ANGLE :: 0x9690;
GL_COMPRESSED_R11_LOSSY_DECODE_EAC_ANGLE :: 0x9691;
GL_COMPRESSED_SIGNED_R11_LOSSY_DECODE_EAC_ANGLE :: 0x9692;
GL_COMPRESSED_RG11_LOSSY_DECODE_EAC_ANGLE :: 0x9693;
GL_COMPRESSED_SIGNED_RG11_LOSSY_DECODE_EAC_ANGLE :: 0x9694;
GL_COMPRESSED_RGB8_LOSSY_DECODE_ETC2_ANGLE :: 0x9695;
GL_COMPRESSED_SRGB8_LOSSY_DECODE_ETC2_ANGLE :: 0x9696;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE :: 0x9697;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE :: 0x9698;
GL_COMPRESSED_RGBA8_LOSSY_DECODE_ETC2_EAC_ANGLE :: 0x9699;
GL_COMPRESSED_SRGB8_ALPHA8_LOSSY_DECODE_ETC2_EAC_ANGLE :: 0x969A;

GL_ANGLE_robust_client_memory :: 1;

GL_ANGLE_program_cache_control :: 1;
GL_PROGRAM_CACHE_ENABLED_ANGLE :: 0x93AC;

GL_ANGLE_texture_rectangle :: 1;
GL_MAX_RECTANGLE_TEXTURE_SIZE_ANGLE :: 0x84F8;
GL_TEXTURE_RECTANGLE_ANGLE :: 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE_ANGLE :: 0x84F6;
GL_SAMPLER_2D_RECT_ANGLE :: 0x8B63;

GL_ANGLE_texture_multisample :: 1;
GL_SAMPLE_POSITION_ANGLE :: 0x8E50;
GL_SAMPLE_MASK_ANGLE :: 0x8E51;
GL_SAMPLE_MASK_VALUE_ANGLE :: 0x8E52;
GL_TEXTURE_2D_MULTISAMPLE_ANGLE :: 0x9100;
GL_MAX_SAMPLE_MASK_WORDS_ANGLE :: 0x8E59;
GL_MAX_COLOR_TEXTURE_SAMPLES_ANGLE :: 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES_ANGLE :: 0x910F;
GL_MAX_INTEGER_SAMPLES_ANGLE :: 0x9110;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ANGLE :: 0x9104;
GL_TEXTURE_SAMPLES_ANGLE :: 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS_ANGLE :: 0x9107;

GL_ANGLE_get_tex_level_parameter :: 1;

GL_ANGLE_multi_draw :: 1;

GL_ANGLE_base_vertex_base_instance :: 1;

GL_CHROMIUM_bind_uniform_location :: 1;

GL_CHROMIUM_lose_context :: 1;

GL_ANGLE_texture_external_update :: 1;
GL_TEXTURE_NATIVE_ID_ANGLE :: 0x3481;

GL_WEBGL_video_texture :: 1;
GL_TEXTURE_VIDEO_IMAGE_WEBGL :: 0x9248;
GL_SAMPLER_VIDEO_IMAGE_WEBGL :: 0x9249;

GL_ANGLE_memory_object_flags :: 1;
GL_CREATE_SPARSE_BINDING_BIT_ANGLE :: 0x00000001;
GL_CREATE_SPARSE_RESIDENCY_BIT_ANGLE :: 0x00000002;
GL_CREATE_SPARSE_ALIASED_BIT_ANGLE :: 0x00000004;
GL_CREATE_MUTABLE_FORMAT_BIT_ANGLE :: 0x00000008;
GL_CREATE_CUBE_COMPATIBLE_BIT_ANGLE :: 0x00000010;
GL_CREATE_ALIAS_BIT_ANGLE :: 0x00000400;
GL_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_ANGLE :: 0x00000040;
GL_CREATE_2D_ARRAY_COMPATIBLE_BIT_ANGLE :: 0x00000020;
GL_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_ANGLE :: 0x00000080;
GL_CREATE_EXTENDED_USAGE_BIT_ANGLE :: 0x00000100;
GL_CREATE_PROTECTED_BIT_ANGLE :: 0x00000800;
GL_CREATE_DISJOINT_BIT_ANGLE :: 0x00000200;
GL_CREATE_CORNER_SAMPLED_BIT_ANGLE :: 0x00002000;
GL_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_ANGLE :: 0x00001000;
GL_CREATE_SUBSAMPLED_BIT_ANGLE :: 0x00004000;
GL_USAGE_TRANSFER_SRC_BIT_ANGLE :: 0x00000001;
GL_USAGE_TRANSFER_DST_BIT_ANGLE :: 0x00000002;
GL_USAGE_SAMPLED_BIT_ANGLE :: 0x00000004;
GL_USAGE_STORAGE_BIT_ANGLE :: 0x00000008;
GL_USAGE_COLOR_ATTACHMENT_BIT_ANGLE :: 0x00000010;
GL_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT_ANGLE :: 0x00000020;
GL_USAGE_TRANSIENT_ATTACHMENT_BIT_ANGLE :: 0x00000040;
GL_USAGE_INPUT_ATTACHMENT_BIT_ANGLE :: 0x00000080;
GL_USAGE_SHADING_RATE_IMAGE_BIT_ANGLE :: 0x00000100;
GL_USAGE_FRAGMENT_DENSITY_MAP_BIT_ANGLE :: 0x00000200;

GL_ANGLE_memory_object_fuchsia :: 1;
GL_HANDLE_TYPE_ZIRCON_VMO_ANGLE :: 0x93AE;

GL_ANGLE_semaphore_fuchsia :: 1;
GL_HANDLE_TYPE_ZIRCON_EVENT_ANGLE :: 0x93AF;

GL_ANGLE_vulkan_image :: 1;

GL_PURGED_CONTEXT_RESET_NV :: 0x92BB;

GL_SERIALIZED_CONTEXT_STRING_ANGLE :: 0x96B0;

GL_ROBUST_FRAGMENT_SHADER_OUTPUT_ANGLE :: 0x96B9;

GL_ANGLE_shader_pixel_local_storage :: 1;
GL_MAX_PIXEL_LOCAL_STORAGE_PLANES_ANGLE :: 0x96E0;
GL_MAX_COMBINED_DRAW_BUFFERS_AND_PIXEL_LOCAL_STORAGE_PLANES_ANGLE :: 0x96E1;
GL_PIXEL_LOCAL_STORAGE_ACTIVE_PLANES_ANGLE :: 0x96E2;
GL_LOAD_OP_ZERO_ANGLE :: 0x96E3;
GL_LOAD_OP_CLEAR_ANGLE :: 0x96E4;
GL_LOAD_OP_LOAD_ANGLE :: 0x96E5;
GL_STORE_OP_STORE_ANGLE :: 0x96E6;
GL_PIXEL_LOCAL_FORMAT_ANGLE :: 0x96E7;
GL_PIXEL_LOCAL_TEXTURE_NAME_ANGLE :: 0x96E8;
GL_PIXEL_LOCAL_TEXTURE_LEVEL_ANGLE :: 0x96E9;
GL_PIXEL_LOCAL_TEXTURE_LAYER_ANGLE :: 0x96EA;
GL_PIXEL_LOCAL_CLEAR_VALUE_FLOAT_ANGLE :: 0x96EB;
GL_PIXEL_LOCAL_CLEAR_VALUE_INT_ANGLE :: 0x96EC;
GL_PIXEL_LOCAL_CLEAR_VALUE_UNSIGNED_INT_ANGLE :: 0x96ED;

GL_G8_B8R8_2PLANE_420_UNORM_ANGLE :: 0x96B1;
GL_G8_B8_R8_3PLANE_420_UNORM_ANGLE :: 0x96B2;

GL_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_ANGLE :: 0x96B3;
GL_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_ANGLE :: 0x96B4;

GL_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_ANGLE :: 0x96B5;
GL_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_ANGLE :: 0x96B6;

GL_G16_B16R16_2PLANE_420_UNORM_ANGLE :: 0x96B7;
GL_G16_B16_R16_3PLANE_420_UNORM_ANGLE :: 0x96B8;

GL_RGBX8_ANGLE :: 0x96BA;

GL_SHADER_BINARY_ANGLE :: 0x96BB;

GL_COLOR_LOGIC_OP_ANGLE :: 0x0BF2;
GL_LOGIC_OP_CLEAR_ANGLE :: 0x1500;
GL_LOGIC_OP_AND_ANGLE :: 0x1501;
GL_LOGIC_OP_AND_REVERSE_ANGLE :: 0x1502;
GL_LOGIC_OP_COPY_ANGLE :: 0x1503;
GL_LOGIC_OP_AND_INVERTED_ANGLE :: 0x1504;
GL_LOGIC_OP_NOOP_ANGLE :: 0x1505;
GL_LOGIC_OP_XOR_ANGLE :: 0x1506;
GL_LOGIC_OP_OR_ANGLE :: 0x1507;
GL_LOGIC_OP_NOR_ANGLE :: 0x1508;
GL_LOGIC_OP_EQUIV_ANGLE :: 0x1509;
GL_LOGIC_OP_INVERT_ANGLE :: 0x150A;
GL_LOGIC_OP_OR_REVERSE_ANGLE :: 0x150B;
GL_LOGIC_OP_COPY_INVERTED_ANGLE :: 0x150C;
GL_LOGIC_OP_OR_INVERTED_ANGLE :: 0x150D;
GL_LOGIC_OP_NAND_ANGLE :: 0x150E;
GL_LOGIC_OP_SET_ANGLE :: 0x150F;

GL_PROGRAM_BINARY_READY_ANGLE :: 0x96BE;

GL_BLOB_CACHE_GET_FUNCTION_ANGLE :: 0x96BF;
GL_BLOB_CACHE_SET_FUNCTION_ANGLE :: 0x96EF;
GL_BLOB_CACHE_USER_PARAM_ANGLE :: 0x972D;

__gles2_gl3_h_ :: 1;

GL_ES_VERSION_3_0 :: 1;

GL_READ_BUFFER :: 0x0C02;
GL_UNPACK_ROW_LENGTH :: 0x0CF2;
GL_UNPACK_SKIP_ROWS :: 0x0CF3;
GL_UNPACK_SKIP_PIXELS :: 0x0CF4;
GL_PACK_ROW_LENGTH :: 0x0D02;
GL_PACK_SKIP_ROWS :: 0x0D03;
GL_PACK_SKIP_PIXELS :: 0x0D04;
GL_COLOR :: 0x1800;
GL_DEPTH :: 0x1801;
GL_STENCIL :: 0x1802;
GL_RED :: 0x1903;
GL_RGB8 :: 0x8051;
GL_RGBA8 :: 0x8058;
GL_RGB10_A2 :: 0x8059;
GL_TEXTURE_BINDING_3D :: 0x806A;
GL_UNPACK_SKIP_IMAGES :: 0x806D;
GL_UNPACK_IMAGE_HEIGHT :: 0x806E;

GL_TEXTURE_WRAP_R :: 0x8072;
GL_MAX_3D_TEXTURE_SIZE :: 0x8073;
GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
GL_MAX_ELEMENTS_VERTICES :: 0x80E8;
GL_MAX_ELEMENTS_INDICES :: 0x80E9;
GL_TEXTURE_MIN_LOD :: 0x813A;
GL_TEXTURE_MAX_LOD :: 0x813B;
GL_TEXTURE_BASE_LEVEL :: 0x813C;
GL_TEXTURE_MAX_LEVEL :: 0x813D;

GL_DEPTH_COMPONENT24 :: 0x81A6;
GL_MAX_TEXTURE_LOD_BIAS :: 0x84FD;
GL_TEXTURE_COMPARE_MODE :: 0x884C;
GL_TEXTURE_COMPARE_FUNC :: 0x884D;
GL_CURRENT_QUERY :: 0x8865;
GL_QUERY_RESULT :: 0x8866;
GL_QUERY_RESULT_AVAILABLE :: 0x8867;
GL_BUFFER_MAPPED :: 0x88BC;
GL_BUFFER_MAP_POINTER :: 0x88BD;
GL_STREAM_READ :: 0x88E1;
GL_STREAM_COPY :: 0x88E2;
GL_STATIC_READ :: 0x88E5;
GL_STATIC_COPY :: 0x88E6;
GL_DYNAMIC_READ :: 0x88E9;
GL_DYNAMIC_COPY :: 0x88EA;
GL_MAX_DRAW_BUFFERS :: 0x8824;
GL_DRAW_BUFFER0 :: 0x8825;
GL_DRAW_BUFFER1 :: 0x8826;
GL_DRAW_BUFFER2 :: 0x8827;
GL_DRAW_BUFFER3 :: 0x8828;
GL_DRAW_BUFFER4 :: 0x8829;
GL_DRAW_BUFFER5 :: 0x882A;
GL_DRAW_BUFFER6 :: 0x882B;
GL_DRAW_BUFFER7 :: 0x882C;
GL_DRAW_BUFFER8 :: 0x882D;
GL_DRAW_BUFFER9 :: 0x882E;
GL_DRAW_BUFFER10 :: 0x882F;
GL_DRAW_BUFFER11 :: 0x8830;
GL_DRAW_BUFFER12 :: 0x8831;
GL_DRAW_BUFFER13 :: 0x8832;
GL_DRAW_BUFFER14 :: 0x8833;
GL_DRAW_BUFFER15 :: 0x8834;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A;
GL_SAMPLER_3D :: 0x8B5F;
GL_SAMPLER_2D_SHADOW :: 0x8B62;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
GL_PIXEL_PACK_BUFFER :: 0x88EB;
GL_PIXEL_UNPACK_BUFFER :: 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING :: 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF;
GL_FLOAT_MAT2x3 :: 0x8B65;
GL_FLOAT_MAT2x4 :: 0x8B66;
GL_FLOAT_MAT3x2 :: 0x8B67;
GL_FLOAT_MAT3x4 :: 0x8B68;
GL_FLOAT_MAT4x2 :: 0x8B69;
GL_FLOAT_MAT4x3 :: 0x8B6A;
GL_SRGB :: 0x8C40;
GL_SRGB8 :: 0x8C41;
GL_SRGB8_ALPHA8 :: 0x8C43;
GL_COMPARE_REF_TO_TEXTURE :: 0x884E;
GL_MAJOR_VERSION :: 0x821B;
GL_MINOR_VERSION :: 0x821C;
GL_NUM_EXTENSIONS :: 0x821D;
GL_RGBA32F :: 0x8814;
GL_RGB32F :: 0x8815;
GL_RGBA16F :: 0x881A;
GL_RGB16F :: 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x8905;
GL_MAX_VARYING_COMPONENTS :: 0x8B4B;

GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
GL_R11F_G11F_B10F :: 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
GL_RGB9_E5 :: 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88;
GL_RASTERIZER_DISCARD :: 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B;
GL_INTERLEAVED_ATTRIBS :: 0x8C8C;
GL_SEPARATE_ATTRIBS :: 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F;
GL_RGBA32UI :: 0x8D70;
GL_RGB32UI :: 0x8D71;
GL_RGBA16UI :: 0x8D76;
GL_RGB16UI :: 0x8D77;
GL_RGBA8UI :: 0x8D7C;
GL_RGB8UI :: 0x8D7D;
GL_RGBA32I :: 0x8D82;
GL_RGB32I :: 0x8D83;
GL_RGBA16I :: 0x8D88;
GL_RGB16I :: 0x8D89;
GL_RGBA8I :: 0x8D8E;
GL_RGB8I :: 0x8D8F;
GL_RED_INTEGER :: 0x8D94;
GL_RGB_INTEGER :: 0x8D98;
GL_RGBA_INTEGER :: 0x8D99;
GL_SAMPLER_2D_ARRAY :: 0x8DC1;
GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4;
GL_SAMPLER_CUBE_SHADOW :: 0x8DC5;
GL_UNSIGNED_INT_VEC2 :: 0x8DC6;
GL_UNSIGNED_INT_VEC3 :: 0x8DC7;
GL_UNSIGNED_INT_VEC4 :: 0x8DC8;
GL_INT_SAMPLER_2D :: 0x8DCA;
GL_INT_SAMPLER_3D :: 0x8DCB;
GL_INT_SAMPLER_CUBE :: 0x8DCC;
GL_INT_SAMPLER_2D_ARRAY :: 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7;
GL_BUFFER_ACCESS_FLAGS :: 0x911F;
GL_BUFFER_MAP_LENGTH :: 0x9120;
GL_BUFFER_MAP_OFFSET :: 0x9121;
GL_DEPTH_COMPONENT32F :: 0x8CAC;
GL_DEPTH32F_STENCIL8 :: 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
GL_FRAMEBUFFER_DEFAULT :: 0x8218;
GL_FRAMEBUFFER_UNDEFINED :: 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A;
GL_DEPTH_STENCIL :: 0x84F9;
GL_UNSIGNED_INT_24_8 :: 0x84FA;
GL_DEPTH24_STENCIL8 :: 0x88F0;
GL_UNSIGNED_NORMALIZED :: 0x8C17;
GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_READ_FRAMEBUFFER :: 0x8CA8;
GL_DRAW_FRAMEBUFFER :: 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA;
GL_RENDERBUFFER_SAMPLES :: 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF;
GL_COLOR_ATTACHMENT1 :: 0x8CE1;
GL_COLOR_ATTACHMENT2 :: 0x8CE2;
GL_COLOR_ATTACHMENT3 :: 0x8CE3;
GL_COLOR_ATTACHMENT4 :: 0x8CE4;
GL_COLOR_ATTACHMENT5 :: 0x8CE5;
GL_COLOR_ATTACHMENT6 :: 0x8CE6;
GL_COLOR_ATTACHMENT7 :: 0x8CE7;
GL_COLOR_ATTACHMENT8 :: 0x8CE8;
GL_COLOR_ATTACHMENT9 :: 0x8CE9;
GL_COLOR_ATTACHMENT10 :: 0x8CEA;
GL_COLOR_ATTACHMENT11 :: 0x8CEB;
GL_COLOR_ATTACHMENT12 :: 0x8CEC;
GL_COLOR_ATTACHMENT13 :: 0x8CED;
GL_COLOR_ATTACHMENT14 :: 0x8CEE;
GL_COLOR_ATTACHMENT15 :: 0x8CEF;
GL_COLOR_ATTACHMENT16 :: 0x8CF0;
GL_COLOR_ATTACHMENT17 :: 0x8CF1;
GL_COLOR_ATTACHMENT18 :: 0x8CF2;
GL_COLOR_ATTACHMENT19 :: 0x8CF3;
GL_COLOR_ATTACHMENT20 :: 0x8CF4;
GL_COLOR_ATTACHMENT21 :: 0x8CF5;
GL_COLOR_ATTACHMENT22 :: 0x8CF6;
GL_COLOR_ATTACHMENT23 :: 0x8CF7;
GL_COLOR_ATTACHMENT24 :: 0x8CF8;
GL_COLOR_ATTACHMENT25 :: 0x8CF9;
GL_COLOR_ATTACHMENT26 :: 0x8CFA;
GL_COLOR_ATTACHMENT27 :: 0x8CFB;
GL_COLOR_ATTACHMENT28 :: 0x8CFC;
GL_COLOR_ATTACHMENT29 :: 0x8CFD;
GL_COLOR_ATTACHMENT30 :: 0x8CFE;
GL_COLOR_ATTACHMENT31 :: 0x8CFF;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
GL_MAX_SAMPLES :: 0x8D57;
GL_HALF_FLOAT :: 0x140B;

GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020;
GL_RG :: 0x8227;
GL_RG_INTEGER :: 0x8228;
GL_R8 :: 0x8229;
GL_RG8 :: 0x822B;
GL_R16F :: 0x822D;
GL_R32F :: 0x822E;
GL_RG16F :: 0x822F;
GL_RG32F :: 0x8230;
GL_R8I :: 0x8231;
GL_R8UI :: 0x8232;
GL_R16I :: 0x8233;
GL_R16UI :: 0x8234;
GL_R32I :: 0x8235;
GL_R32UI :: 0x8236;
GL_RG8I :: 0x8237;
GL_RG8UI :: 0x8238;
GL_RG16I :: 0x8239;
GL_RG16UI :: 0x823A;
GL_RG32I :: 0x823B;
GL_RG32UI :: 0x823C;
GL_VERTEX_ARRAY_BINDING :: 0x85B5;

GL_RGB8_SNORM :: 0x8F96;

GL_SIGNED_NORMALIZED :: 0x8F9C;
GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
GL_COPY_READ_BUFFER :: 0x8F36;
GL_COPY_WRITE_BUFFER :: 0x8F37;
GL_COPY_READ_BUFFER_BINDING :: 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING :: 0x8F37;
GL_UNIFORM_BUFFER :: 0x8A11;
GL_UNIFORM_BUFFER_BINDING :: 0x8A28;
GL_UNIFORM_BUFFER_START :: 0x8A29;
GL_UNIFORM_BUFFER_SIZE :: 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
GL_UNIFORM_TYPE :: 0x8A37;
GL_UNIFORM_SIZE :: 0x8A38;
GL_UNIFORM_NAME_LENGTH :: 0x8A39;
GL_UNIFORM_BLOCK_INDEX :: 0x8A3A;
GL_UNIFORM_OFFSET :: 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
GL_UNIFORM_BLOCK_BINDING :: 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
GL_INVALID_INDEX :: 0xFFFFFFFF;
GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122;
GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125;
GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
GL_OBJECT_TYPE :: 0x9112;
GL_SYNC_CONDITION :: 0x9113;
GL_SYNC_STATUS :: 0x9114;
GL_SYNC_FLAGS :: 0x9115;
GL_SYNC_FENCE :: 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
GL_UNSIGNALED :: 0x9118;
GL_SIGNALED :: 0x9119;
GL_ALREADY_SIGNALED :: 0x911A;
GL_TIMEOUT_EXPIRED :: 0x911B;
GL_CONDITION_SATISFIED :: 0x911C;
GL_WAIT_FAILED :: 0x911D;
GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE;
GL_ANY_SAMPLES_PASSED :: 0x8C2F;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;

GL_RGB10_A2UI :: 0x906F;
GL_TEXTURE_SWIZZLE_R :: 0x8E42;
GL_TEXTURE_SWIZZLE_G :: 0x8E43;
GL_TEXTURE_SWIZZLE_B :: 0x8E44;
GL_TEXTURE_SWIZZLE_A :: 0x8E45;
GL_GREEN :: 0x1904;
GL_BLUE :: 0x1905;
GL_INT_2_10_10_10_REV :: 0x8D9F;

GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E23;
GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
GL_PROGRAM_BINARY_LENGTH :: 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
GL_PROGRAM_BINARY_FORMATS :: 0x87FF;
GL_COMPRESSED_R11_EAC :: 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271;
GL_COMPRESSED_RG11_EAC :: 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
GL_COMPRESSED_RGB8_ETC2 :: 0x9274;
GL_COMPRESSED_SRGB8_ETC2 :: 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F;
GL_MAX_ELEMENT_INDEX :: 0x8D6B;
GL_NUM_SAMPLE_COUNTS :: 0x9380;

__gles2_gl31_h_ :: 1;

GL_ES_VERSION_3_1 :: 1;
GL_COMPUTE_SHADER :: 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267;
GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
GL_COMPUTE_SHADER_BIT :: 0x00000020;
GL_DRAW_INDIRECT_BUFFER :: 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
GL_MAX_UNIFORM_LOCATIONS :: 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
GL_UNIFORM :: 0x92E1;
GL_UNIFORM_BLOCK :: 0x92E2;
GL_PROGRAM_INPUT :: 0x92E3;
GL_PROGRAM_OUTPUT :: 0x92E4;
GL_BUFFER_VARIABLE :: 0x92E5;
GL_SHADER_STORAGE_BLOCK :: 0x92E6;
GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
GL_ACTIVE_RESOURCES :: 0x92F5;
GL_MAX_NAME_LENGTH :: 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
GL_NAME_LENGTH :: 0x92F9;
GL_TYPE :: 0x92FA;
GL_ARRAY_SIZE :: 0x92FB;
GL_OFFSET :: 0x92FC;
GL_BLOCK_INDEX :: 0x92FD;
GL_ARRAY_STRIDE :: 0x92FE;
GL_MATRIX_STRIDE :: 0x92FF;
GL_IS_ROW_MAJOR :: 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
GL_BUFFER_BINDING :: 0x9302;
GL_BUFFER_DATA_SIZE :: 0x9303;
GL_NUM_ACTIVE_VARIABLES :: 0x9304;
GL_ACTIVE_VARIABLES :: 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306;
GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
GL_LOCATION :: 0x930E;
GL_VERTEX_SHADER_BIT :: 0x00000001;
GL_FRAGMENT_SHADER_BIT :: 0x00000002;
GL_ALL_SHADER_BITS :: 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE :: 0x8258;
GL_ACTIVE_PROGRAM :: 0x8259;
GL_PROGRAM_PIPELINE_BINDING :: 0x825A;
GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
GL_MAX_IMAGE_UNITS :: 0x8F38;
GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
GL_IMAGE_BINDING_NAME :: 0x8F3A;
GL_IMAGE_BINDING_LEVEL :: 0x8F3B;
GL_IMAGE_BINDING_LAYERED :: 0x8F3C;
GL_IMAGE_BINDING_LAYER :: 0x8F3D;
GL_IMAGE_BINDING_ACCESS :: 0x8F3E;
GL_IMAGE_BINDING_FORMAT :: 0x906E;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
GL_UNIFORM_BARRIER_BIT :: 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
GL_COMMAND_BARRIER_BIT :: 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
GL_ALL_BARRIER_BITS :: 0xFFFFFFFF;
GL_IMAGE_2D :: 0x904D;
GL_IMAGE_3D :: 0x904E;
GL_IMAGE_CUBE :: 0x9050;
GL_IMAGE_2D_ARRAY :: 0x9053;
GL_INT_IMAGE_2D :: 0x9058;
GL_INT_IMAGE_3D :: 0x9059;
GL_INT_IMAGE_CUBE :: 0x905B;
GL_INT_IMAGE_2D_ARRAY :: 0x905E;
GL_UNSIGNED_INT_IMAGE_2D :: 0x9063;
GL_UNSIGNED_INT_IMAGE_3D :: 0x9064;
GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
GL_READ_ONLY :: 0x88B8;
GL_WRITE_ONLY :: 0x88B9;
GL_READ_WRITE :: 0x88BA;
GL_SHADER_STORAGE_BUFFER :: 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
GL_SHADER_STORAGE_BUFFER_START :: 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
GL_STENCIL_INDEX :: 0x1901;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F;
GL_SAMPLE_POSITION :: 0x8E50;
GL_SAMPLE_MASK :: 0x8E51;
GL_SAMPLE_MASK_VALUE :: 0x8E52;

GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59;
GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
GL_MAX_INTEGER_SAMPLES :: 0x9110;
GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
GL_TEXTURE_SAMPLES :: 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
GL_TEXTURE_WIDTH :: 0x1000;
GL_TEXTURE_HEIGHT :: 0x1001;
GL_TEXTURE_DEPTH :: 0x8071;
GL_TEXTURE_INTERNAL_FORMAT :: 0x1003;
GL_TEXTURE_RED_SIZE :: 0x805C;
GL_TEXTURE_GREEN_SIZE :: 0x805D;
GL_TEXTURE_BLUE_SIZE :: 0x805E;
GL_TEXTURE_ALPHA_SIZE :: 0x805F;
GL_TEXTURE_DEPTH_SIZE :: 0x884A;
GL_TEXTURE_STENCIL_SIZE :: 0x88F1;
GL_TEXTURE_SHARED_SIZE :: 0x8C3F;
GL_TEXTURE_RED_TYPE :: 0x8C10;
GL_TEXTURE_GREEN_TYPE :: 0x8C11;
GL_TEXTURE_BLUE_TYPE :: 0x8C12;
GL_TEXTURE_ALPHA_TYPE :: 0x8C13;
GL_TEXTURE_DEPTH_TYPE :: 0x8C16;
GL_TEXTURE_COMPRESSED :: 0x86A1;
GL_SAMPLER_2D_MULTISAMPLE :: 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
GL_VERTEX_ATTRIB_BINDING :: 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
GL_VERTEX_BINDING_DIVISOR :: 0x82D6;
GL_VERTEX_BINDING_OFFSET :: 0x82D7;
GL_VERTEX_BINDING_STRIDE :: 0x82D8;
GL_VERTEX_BINDING_BUFFER :: 0x8F4F;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5;

__gles2_gl32_h_ :: 1;

GL_ES_VERSION_3_2 :: 1;

GL_MULTISAMPLE_LINE_WIDTH_RANGE :: 0x9381;
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY :: 0x9382;
GL_MULTIPLY :: 0x9294;
GL_SCREEN :: 0x9295;
GL_OVERLAY :: 0x9296;
GL_DARKEN :: 0x9297;
GL_LIGHTEN :: 0x9298;
GL_COLORDODGE :: 0x9299;
GL_COLORBURN :: 0x929A;
GL_HARDLIGHT :: 0x929B;
GL_SOFTLIGHT :: 0x929C;
GL_DIFFERENCE :: 0x929E;
GL_EXCLUSION :: 0x92A0;
GL_HSL_HUE :: 0x92AD;
GL_HSL_SATURATION :: 0x92AE;
GL_HSL_COLOR :: 0x92AF;
GL_HSL_LUMINOSITY :: 0x92B0;
GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
GL_DEBUG_SOURCE_API :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
GL_DEBUG_SOURCE_OTHER :: 0x824B;
GL_DEBUG_TYPE_ERROR :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
GL_DEBUG_TYPE_OTHER :: 0x8251;
GL_DEBUG_TYPE_MARKER :: 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
GL_BUFFER :: 0x82E0;
GL_SHADER :: 0x82E1;
GL_PROGRAM :: 0x82E2;
GL_VERTEX_ARRAY :: 0x8074;
GL_QUERY :: 0x82E3;
GL_PROGRAM_PIPELINE :: 0x82E4;

GL_MAX_LABEL_LENGTH :: 0x82E8;
GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
GL_DEBUG_SEVERITY_HIGH :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
GL_DEBUG_SEVERITY_LOW :: 0x9148;
GL_DEBUG_OUTPUT :: 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
GL_STACK_OVERFLOW :: 0x0503;
GL_STACK_UNDERFLOW :: 0x0504;
GL_GEOMETRY_SHADER :: 0x8DD9;
GL_GEOMETRY_SHADER_BIT :: 0x00000004;
GL_GEOMETRY_VERTICES_OUT :: 0x8916;
GL_GEOMETRY_INPUT_TYPE :: 0x8917;
GL_GEOMETRY_OUTPUT_TYPE :: 0x8918;
GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
GL_LAYER_PROVOKING_VERTEX :: 0x825E;
GL_LINES_ADJACENCY :: 0x000A;
GL_LINE_STRIP_ADJACENCY :: 0x000B;
GL_TRIANGLES_ADJACENCY :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY :: 0x000D;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
GL_MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124;
GL_MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
GL_UNDEFINED_VERTEX :: 0x8260;
GL_PRIMITIVES_GENERATED :: 0x8C87;
GL_FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
GL_MAX_FRAMEBUFFER_LAYERS :: 0x9317;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7;
GL_REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
GL_PRIMITIVE_BOUNDING_BOX :: 0x92BE;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004;
GL_CONTEXT_FLAGS :: 0x821E;
GL_LOSE_CONTEXT_ON_RESET :: 0x8252;
GL_GUILTY_CONTEXT_RESET :: 0x8253;
GL_INNOCENT_CONTEXT_RESET :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET :: 0x8255;
GL_RESET_NOTIFICATION_STRATEGY :: 0x8256;
GL_NO_RESET_NOTIFICATION :: 0x8261;
GL_CONTEXT_LOST :: 0x0507;
GL_SAMPLE_SHADING :: 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE :: 0x8C37;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;

GL_PATCH_VERTICES :: 0x8E72;
GL_TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
GL_TESS_GEN_MODE :: 0x8E76;
GL_TESS_GEN_SPACING :: 0x8E77;
GL_TESS_GEN_VERTEX_ORDER :: 0x8E78;
GL_TESS_GEN_POINT_MODE :: 0x8E79;
GL_ISOLINES :: 0x8E7A;
GL_QUADS :: 0x0007;
GL_FRACTIONAL_ODD :: 0x8E7B;
GL_FRACTIONAL_EVEN :: 0x8E7C;
GL_MAX_PATCH_VERTICES :: 0x8E7D;
GL_MAX_TESS_GEN_LEVEL :: 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;

GL_IS_PER_PATCH :: 0x92E7;
GL_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
GL_TESS_CONTROL_SHADER :: 0x8E88;
GL_TESS_EVALUATION_SHADER :: 0x8E87;
GL_TESS_CONTROL_SHADER_BIT :: 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT :: 0x00000010;
GL_TEXTURE_BORDER_COLOR :: 0x1004;
GL_CLAMP_TO_BORDER :: 0x812D;
GL_TEXTURE_BUFFER :: 0x8C2A;
GL_TEXTURE_BUFFER_BINDING :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
GL_SAMPLER_BUFFER :: 0x8DC2;
GL_INT_SAMPLER_BUFFER :: 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8;
GL_IMAGE_BUFFER :: 0x9051;
GL_INT_IMAGE_BUFFER :: 0x905C;
GL_UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
GL_TEXTURE_BUFFER_OFFSET :: 0x919D;
GL_TEXTURE_BUFFER_SIZE :: 0x919E;
GL_COMPRESSED_RGBA_ASTC_4x4 :: 0x93B0;
GL_COMPRESSED_RGBA_ASTC_5x4 :: 0x93B1;
GL_COMPRESSED_RGBA_ASTC_5x5 :: 0x93B2;
GL_COMPRESSED_RGBA_ASTC_6x5 :: 0x93B3;
GL_COMPRESSED_RGBA_ASTC_6x6 :: 0x93B4;
GL_COMPRESSED_RGBA_ASTC_8x5 :: 0x93B5;
GL_COMPRESSED_RGBA_ASTC_8x6 :: 0x93B6;
GL_COMPRESSED_RGBA_ASTC_8x8 :: 0x93B7;
GL_COMPRESSED_RGBA_ASTC_10x5 :: 0x93B8;
GL_COMPRESSED_RGBA_ASTC_10x6 :: 0x93B9;
GL_COMPRESSED_RGBA_ASTC_10x8 :: 0x93BA;
GL_COMPRESSED_RGBA_ASTC_10x10 :: 0x93BB;
GL_COMPRESSED_RGBA_ASTC_12x10 :: 0x93BC;
GL_COMPRESSED_RGBA_ASTC_12x12 :: 0x93BD;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 :: 0x93D0;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 :: 0x93D1;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 :: 0x93D2;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 :: 0x93D3;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 :: 0x93D4;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 :: 0x93D5;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 :: 0x93D6;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 :: 0x93D7;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 :: 0x93D8;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 :: 0x93D9;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 :: 0x93DA;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 :: 0x93DB;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 :: 0x93DC;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 :: 0x93DD;
GL_TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
GL_SAMPLER_CUBE_MAP_ARRAY :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F;
GL_IMAGE_CUBE_MAP_ARRAY :: 0x9054;
GL_INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;

GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;

EGLNativeDisplayType :: s32;
EGLNativePixmapType :: *void;
EGLNativeWindowType :: *void;

/* EGL 1.2 types, renamed for consistency in EGL 1.3 */
NativeDisplayType :: EGLNativeDisplayType;
NativePixmapType :: EGLNativePixmapType;
NativeWindowType :: EGLNativeWindowType;

/* Define EGLint. This must be a signed integral type large enough to contain
* all legal attribute names and values passed into and out of EGL, whether
* their type is boolean, bitmask, enumerant (symbolic constant), integer,
* handle, or other.  While in general a 32-bit integer will suffice, if
* handles are 64 bit types, then EGLint should be defined as a signed 64-bit
* integer type.
*/
EGLint :: s32;

EGLBoolean :: u32;
EGLDisplay :: *void;

EGLConfig :: *void;
EGLSurface :: *void;
EGLContext :: *void;
__eglMustCastToProperFunctionPointerType :: #type () -> void #c_call;

PFNEGLCHOOSECONFIGPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLint, configs: *EGLConfig, config_size: EGLint, num_config: *EGLint) -> EGLBoolean #c_call;
PFNEGLCOPYBUFFERSPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, target: EGLNativePixmapType) -> EGLBoolean #c_call;
PFNEGLCREATECONTEXTPROC :: #type (dpy: EGLDisplay, config: EGLConfig, share_context: EGLContext, attrib_list: *EGLint) -> EGLContext #c_call;
PFNEGLCREATEPBUFFERSURFACEPROC :: #type (dpy: EGLDisplay, config: EGLConfig, attrib_list: *EGLint) -> EGLSurface #c_call;
PFNEGLCREATEPIXMAPSURFACEPROC :: #type (dpy: EGLDisplay, config: EGLConfig, pixmap: EGLNativePixmapType, attrib_list: *EGLint) -> EGLSurface #c_call;
PFNEGLCREATEWINDOWSURFACEPROC :: #type (dpy: EGLDisplay, config: EGLConfig, win: EGLNativeWindowType, attrib_list: *EGLint) -> EGLSurface #c_call;
PFNEGLDESTROYCONTEXTPROC :: #type (dpy: EGLDisplay, ctx: EGLContext) -> EGLBoolean #c_call;
PFNEGLDESTROYSURFACEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #c_call;
PFNEGLGETCONFIGATTRIBPROC :: #type (dpy: EGLDisplay, config: EGLConfig, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;
PFNEGLGETCONFIGSPROC :: #type (dpy: EGLDisplay, configs: *EGLConfig, config_size: EGLint, num_config: *EGLint) -> EGLBoolean #c_call;
PFNEGLGETCURRENTDISPLAYPROC :: #type () -> EGLDisplay #c_call;
PFNEGLGETCURRENTSURFACEPROC :: #type (readdraw: EGLint) -> EGLSurface #c_call;
PFNEGLGETDISPLAYPROC :: #type (display_id: EGLNativeDisplayType) -> EGLDisplay #c_call;
PFNEGLGETERRORPROC :: #type () -> EGLint #c_call;
PFNEGLGETPROCADDRESSPROC :: #type (procname: *u8) -> __eglMustCastToProperFunctionPointerType #c_call;
PFNEGLINITIALIZEPROC :: #type (dpy: EGLDisplay, major: *EGLint, minor: *EGLint) -> EGLBoolean #c_call;
PFNEGLMAKECURRENTPROC :: #type (dpy: EGLDisplay, draw: EGLSurface, read: EGLSurface, ctx: EGLContext) -> EGLBoolean #c_call;
PFNEGLQUERYCONTEXTPROC :: #type (dpy: EGLDisplay, ctx: EGLContext, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;
PFNEGLQUERYSTRINGPROC :: #type (dpy: EGLDisplay, name: EGLint) -> *u8 #c_call;
PFNEGLQUERYSURFACEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;
PFNEGLSWAPBUFFERSPROC :: #type (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #c_call;
PFNEGLTERMINATEPROC :: #type (dpy: EGLDisplay) -> EGLBoolean #c_call;
PFNEGLWAITGLPROC :: #type () -> EGLBoolean #c_call;
PFNEGLWAITNATIVEPROC :: #type (engine: EGLint) -> EGLBoolean #c_call;

eglChooseConfig :: (dpy: EGLDisplay, attrib_list: *EGLint, configs: *EGLConfig, config_size: EGLint, num_config: *EGLint) -> EGLBoolean #foreign angle;
eglCopyBuffers :: (dpy: EGLDisplay, surface: EGLSurface, target: EGLNativePixmapType) -> EGLBoolean #foreign angle;
eglCreateContext :: (dpy: EGLDisplay, config: EGLConfig, share_context: EGLContext, attrib_list: *EGLint) -> EGLContext #foreign angle;
eglCreatePbufferSurface :: (dpy: EGLDisplay, config: EGLConfig, attrib_list: *EGLint) -> EGLSurface #foreign angle;
eglCreatePixmapSurface :: (dpy: EGLDisplay, config: EGLConfig, pixmap: EGLNativePixmapType, attrib_list: *EGLint) -> EGLSurface #foreign angle;
eglCreateWindowSurface :: (dpy: EGLDisplay, config: EGLConfig, win: EGLNativeWindowType, attrib_list: *EGLint) -> EGLSurface #foreign angle;
eglDestroyContext :: (dpy: EGLDisplay, ctx: EGLContext) -> EGLBoolean #foreign angle;
eglDestroySurface :: (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #foreign angle;
eglGetConfigAttrib :: (dpy: EGLDisplay, config: EGLConfig, attribute: EGLint, value: *EGLint) -> EGLBoolean #foreign angle;
eglGetConfigs :: (dpy: EGLDisplay, configs: *EGLConfig, config_size: EGLint, num_config: *EGLint) -> EGLBoolean #foreign angle;
eglGetCurrentDisplay :: () -> EGLDisplay #foreign angle;
eglGetCurrentSurface :: (readdraw: EGLint) -> EGLSurface #foreign angle;
eglGetDisplay :: (display_id: EGLNativeDisplayType) -> EGLDisplay #foreign angle;
eglGetError :: () -> EGLint #foreign angle;
eglGetProcAddress :: (procname: *u8) -> __eglMustCastToProperFunctionPointerType #foreign angle;
eglInitialize :: (dpy: EGLDisplay, major: *EGLint, minor: *EGLint) -> EGLBoolean #foreign angle;
eglMakeCurrent :: (dpy: EGLDisplay, draw: EGLSurface, read: EGLSurface, ctx: EGLContext) -> EGLBoolean #foreign angle;
eglQueryContext :: (dpy: EGLDisplay, ctx: EGLContext, attribute: EGLint, value: *EGLint) -> EGLBoolean #foreign angle;
eglQueryString :: (dpy: EGLDisplay, name: EGLint) -> *u8 #foreign angle;
eglQuerySurface :: (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: *EGLint) -> EGLBoolean #foreign angle;
eglSwapBuffers :: (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #foreign angle;
eglTerminate :: (dpy: EGLDisplay) -> EGLBoolean #foreign angle;
eglWaitGL :: () -> EGLBoolean #foreign angle;
eglWaitNative :: (engine: EGLint) -> EGLBoolean #foreign angle;

PFNEGLBINDTEXIMAGEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean #c_call;
PFNEGLRELEASETEXIMAGEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean #c_call;
PFNEGLSURFACEATTRIBPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: EGLint) -> EGLBoolean #c_call;
PFNEGLSWAPINTERVALPROC :: #type (dpy: EGLDisplay, interval: EGLint) -> EGLBoolean #c_call;

eglBindTexImage :: (dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean #foreign angle;
eglReleaseTexImage :: (dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean #foreign angle;
eglSurfaceAttrib :: (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: EGLint) -> EGLBoolean #foreign angle;
eglSwapInterval :: (dpy: EGLDisplay, interval: EGLint) -> EGLBoolean #foreign angle;

EGLenum :: u32;
EGLClientBuffer :: *void;

PFNEGLBINDAPIPROC :: #type (api: EGLenum) -> EGLBoolean #c_call;
PFNEGLQUERYAPIPROC :: #type () -> EGLenum #c_call;
PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC :: #type (dpy: EGLDisplay, buftype: EGLenum, buffer: EGLClientBuffer, config: EGLConfig, attrib_list: *EGLint) -> EGLSurface #c_call;
PFNEGLRELEASETHREADPROC :: #type () -> EGLBoolean #c_call;
PFNEGLWAITCLIENTPROC :: #type () -> EGLBoolean #c_call;

eglBindAPI :: (api: EGLenum) -> EGLBoolean #foreign angle;
eglQueryAPI :: () -> EGLenum #foreign angle;
eglCreatePbufferFromClientBuffer :: (dpy: EGLDisplay, buftype: EGLenum, buffer: EGLClientBuffer, config: EGLConfig, attrib_list: *EGLint) -> EGLSurface #foreign angle;
eglReleaseThread :: () -> EGLBoolean #foreign angle;
eglWaitClient :: () -> EGLBoolean #foreign angle;

PFNEGLGETCURRENTCONTEXTPROC :: #type () -> EGLContext #c_call;

eglGetCurrentContext :: () -> EGLContext #foreign angle;

EGLSync :: *void;
EGLAttrib :: s64;
EGLTime :: u64;
EGLImage :: *void;

PFNEGLCREATESYNCPROC :: #type (dpy: EGLDisplay, type: EGLenum, attrib_list: *EGLAttrib) -> EGLSync #c_call;
PFNEGLDESTROYSYNCPROC :: #type (dpy: EGLDisplay, sync: EGLSync) -> EGLBoolean #c_call;
PFNEGLCLIENTWAITSYNCPROC :: #type (dpy: EGLDisplay, sync: EGLSync, flags: EGLint, timeout: EGLTime) -> EGLint #c_call;
PFNEGLGETSYNCATTRIBPROC :: #type (dpy: EGLDisplay, sync: EGLSync, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLCREATEIMAGEPROC :: #type (dpy: EGLDisplay, ctx: EGLContext, target: EGLenum, buffer: EGLClientBuffer, attrib_list: *EGLAttrib) -> EGLImage #c_call;
PFNEGLDESTROYIMAGEPROC :: #type (dpy: EGLDisplay, image: EGLImage) -> EGLBoolean #c_call;
PFNEGLGETPLATFORMDISPLAYPROC :: #type (platform: EGLenum, native_display: *void, attrib_list: *EGLAttrib) -> EGLDisplay #c_call;
PFNEGLCREATEPLATFORMWINDOWSURFACEPROC :: #type (dpy: EGLDisplay, config: EGLConfig, native_window: *void, attrib_list: *EGLAttrib) -> EGLSurface #c_call;
PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC :: #type (dpy: EGLDisplay, config: EGLConfig, native_pixmap: *void, attrib_list: *EGLAttrib) -> EGLSurface #c_call;
PFNEGLWAITSYNCPROC :: #type (dpy: EGLDisplay, sync: EGLSync, flags: EGLint) -> EGLBoolean #c_call;

eglCreateSync :: (dpy: EGLDisplay, type: EGLenum, attrib_list: *EGLAttrib) -> EGLSync #foreign angle;
eglDestroySync :: (dpy: EGLDisplay, sync: EGLSync) -> EGLBoolean #foreign angle;
eglClientWaitSync :: (dpy: EGLDisplay, sync: EGLSync, flags: EGLint, timeout: EGLTime) -> EGLint #foreign angle;
eglGetSyncAttrib :: (dpy: EGLDisplay, sync: EGLSync, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #foreign angle;
eglCreateImage :: (dpy: EGLDisplay, ctx: EGLContext, target: EGLenum, buffer: EGLClientBuffer, attrib_list: *EGLAttrib) -> EGLImage #foreign angle;
eglDestroyImage :: (dpy: EGLDisplay, image: EGLImage) -> EGLBoolean #foreign angle;
eglGetPlatformDisplay :: (platform: EGLenum, native_display: *void, attrib_list: *EGLAttrib) -> EGLDisplay #foreign angle;
eglCreatePlatformWindowSurface :: (dpy: EGLDisplay, config: EGLConfig, native_window: *void, attrib_list: *EGLAttrib) -> EGLSurface #foreign angle;
eglCreatePlatformPixmapSurface :: (dpy: EGLDisplay, config: EGLConfig, native_pixmap: *void, attrib_list: *EGLAttrib) -> EGLSurface #foreign angle;
eglWaitSync :: (dpy: EGLDisplay, sync: EGLSync, flags: EGLint) -> EGLBoolean #foreign angle;

EGLSyncKHR :: *void;
EGLAttribKHR :: s64;
PFNEGLCREATESYNC64KHRPROC :: #type (dpy: EGLDisplay, type: EGLenum, attrib_list: *EGLAttribKHR) -> EGLSyncKHR #c_call;

EGLLabelKHR :: *void;
EGLObjectKHR :: *void;
EGLDEBUGPROCKHR :: #type (error: EGLenum, command: *u8, messageType: EGLint, threadLabel: EGLLabelKHR, objectLabel: EGLLabelKHR, message: *u8) -> void #c_call;

PFNEGLDEBUGMESSAGECONTROLKHRPROC :: #type (callback: EGLDEBUGPROCKHR, attrib_list: *EGLAttrib) -> EGLint #c_call;
PFNEGLQUERYDEBUGKHRPROC :: #type (attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLLABELOBJECTKHRPROC :: #type (display: EGLDisplay, objectType: EGLenum, object: EGLObjectKHR, label: EGLLabelKHR) -> EGLint #c_call;

PFNEGLQUERYDISPLAYATTRIBKHRPROC :: #type (dpy: EGLDisplay, name: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;

EGLTimeKHR :: u64;

PFNEGLCREATESYNCKHRPROC :: #type (dpy: EGLDisplay, type: EGLenum, attrib_list: *EGLint) -> EGLSyncKHR #c_call;
PFNEGLDESTROYSYNCKHRPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR) -> EGLBoolean #c_call;
PFNEGLCLIENTWAITSYNCKHRPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR, flags: EGLint, timeout: EGLTimeKHR) -> EGLint #c_call;
PFNEGLGETSYNCATTRIBKHRPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;

EGLImageKHR :: *void;

PFNEGLCREATEIMAGEKHRPROC :: #type (dpy: EGLDisplay, ctx: EGLContext, target: EGLenum, buffer: EGLClientBuffer, attrib_list: *EGLint) -> EGLImageKHR #c_call;
PFNEGLDESTROYIMAGEKHRPROC :: #type (dpy: EGLDisplay, image: EGLImageKHR) -> EGLBoolean #c_call;

PFNEGLLOCKSURFACEKHRPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, attrib_list: *EGLint) -> EGLBoolean #c_call;
PFNEGLUNLOCKSURFACEKHRPROC :: #type (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #c_call;

PFNEGLQUERYSURFACE64KHRPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: *EGLAttribKHR) -> EGLBoolean #c_call;

PFNEGLSETDAMAGEREGIONKHRPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, rects: *EGLint, n_rects: EGLint) -> EGLBoolean #c_call;

PFNEGLSIGNALSYNCKHRPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR, mode: EGLenum) -> EGLBoolean #c_call;

EGLStreamKHR :: *void;
EGLuint64KHR :: u64;

PFNEGLCREATESTREAMKHRPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLint) -> EGLStreamKHR #c_call;
PFNEGLDESTROYSTREAMKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;
PFNEGLSTREAMATTRIBKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: EGLint) -> EGLBoolean #c_call;
PFNEGLQUERYSTREAMKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: *EGLint) -> EGLBoolean #c_call;
PFNEGLQUERYSTREAMU64KHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: *EGLuint64KHR) -> EGLBoolean #c_call;

PFNEGLCREATESTREAMATTRIBKHRPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLAttrib) -> EGLStreamKHR #c_call;
PFNEGLSETSTREAMATTRIBKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYSTREAMATTRIBKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;
PFNEGLSTREAMCONSUMERACQUIREKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;
PFNEGLSTREAMCONSUMERRELEASEKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;

EGLNativeFileDescriptorKHR :: s32;

PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLNativeFileDescriptorKHR #c_call;
PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC :: #type (dpy: EGLDisplay, file_descriptor: EGLNativeFileDescriptorKHR) -> EGLStreamKHR #c_call;

PFNEGLQUERYSTREAMTIMEKHRPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attribute: EGLenum, value: *EGLTimeKHR) -> EGLBoolean #c_call;

PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC :: #type (dpy: EGLDisplay, config: EGLConfig, stream: EGLStreamKHR, attrib_list: *EGLint) -> EGLSurface #c_call;

PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, rects: *EGLint, n_rects: EGLint) -> EGLBoolean #c_call;

PFNEGLWAITSYNCKHRPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR, flags: EGLint) -> EGLint #c_call;

EGLsizeiANDROID :: s64;
EGLSetBlobFuncANDROID :: #type (key: *void, keySize: EGLsizeiANDROID, value: *void, valueSize: EGLsizeiANDROID) -> void #c_call;
EGLGetBlobFuncANDROID :: #type (key: *void, keySize: EGLsizeiANDROID, value: *void, valueSize: EGLsizeiANDROID) -> EGLsizeiANDROID #c_call;
PFNEGLSETBLOBCACHEFUNCSANDROIDPROC :: #type (dpy: EGLDisplay, set: EGLSetBlobFuncANDROID, get: EGLGetBlobFuncANDROID) -> void #c_call;

PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC :: #type (attrib_list: *EGLint) -> EGLClientBuffer #c_call;

EGLnsecsANDROID :: u64;

PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, name: EGLint) -> EGLBoolean #c_call;
PFNEGLGETCOMPOSITORTIMINGANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, numTimestamps: EGLint, names: *EGLint, values: *EGLnsecsANDROID) -> EGLBoolean #c_call;
PFNEGLGETNEXTFRAMEIDANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, frameId: *EGLuint64KHR) -> EGLBoolean #c_call;
PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, timestamp: EGLint) -> EGLBoolean #c_call;
PFNEGLGETFRAMETIMESTAMPSANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, frameId: EGLuint64KHR, numTimestamps: EGLint, timestamps: *EGLint, values: *EGLnsecsANDROID) -> EGLBoolean #c_call;

AHardwareBuffer :: struct {}
PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC :: #type (buffer: *AHardwareBuffer) -> EGLClientBuffer #c_call;

PFNEGLDUPNATIVEFENCEFDANDROIDPROC :: #type (dpy: EGLDisplay, sync: EGLSyncKHR) -> EGLint #c_call;

PFNEGLPRESENTATIONTIMEANDROIDPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, time: EGLnsecsANDROID) -> EGLBoolean #c_call;

PFNEGLQUERYSURFACEPOINTERANGLEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: **void) -> EGLBoolean #c_call;

PFNEGLGETMSCRATEANGLEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, numerator: *EGLint, denominator: *EGLint) -> EGLBoolean #c_call;

PFNEGLCLIENTSIGNALSYNCEXTPROC :: #type (dpy: EGLDisplay, sync: EGLSync, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC :: #type (external_ref_ids: *EGLint, num_entries: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC :: #type (external_ref_id: EGLint, context_attributes: *EGLint, num_entries: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC :: #type (external_ref_id: EGLint, external_win_ids: *EGLint, num_entries: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC :: #type (external_win_id: EGLint, window_attributes: *EGLint, num_entries: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC :: #type (external_win_id: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORSETSIZEEXTPROC :: #type (external_win_id: EGLint, width: EGLint, height: EGLint) -> EGLBoolean #c_call;
PFNEGLCOMPOSITORSWAPPOLICYEXTPROC :: #type (external_win_id: EGLint, policy: EGLint) -> EGLBoolean #c_call;

EGLDeviceEXT :: *void;

PFNEGLQUERYDEVICEATTRIBEXTPROC :: #type (device: EGLDeviceEXT, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYDEVICESTRINGEXTPROC :: #type (device: EGLDeviceEXT, name: EGLint) -> *u8 #c_call;
PFNEGLQUERYDEVICESEXTPROC :: #type (max_devices: EGLint, devices: *EGLDeviceEXT, num_devices: *EGLint) -> EGLBoolean #c_call;
PFNEGLQUERYDISPLAYATTRIBEXTPROC :: #type (dpy: EGLDisplay, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLQUERYDEVICEBINARYEXTPROC :: #type (device: EGLDeviceEXT, name: EGLint, max_size: EGLint, value: *void, size: *EGLint) -> EGLBoolean #c_call;

PFNEGLQUERYDMABUFFORMATSEXTPROC :: #type (dpy: EGLDisplay, max_formats: EGLint, formats: *EGLint, num_formats: *EGLint) -> EGLBoolean #c_call;
PFNEGLQUERYDMABUFMODIFIERSEXTPROC :: #type (dpy: EGLDisplay, format: EGLint, max_modifiers: EGLint, modifiers: *EGLuint64KHR, external_only: *EGLBoolean, num_modifiers: *EGLint) -> EGLBoolean #c_call;

EGLOutputLayerEXT :: *void;
EGLOutputPortEXT :: *void;

PFNEGLGETOUTPUTLAYERSEXTPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLAttrib, layers: *EGLOutputLayerEXT, max_layers: EGLint, num_layers: *EGLint) -> EGLBoolean #c_call;
PFNEGLGETOUTPUTPORTSEXTPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLAttrib, ports: *EGLOutputPortEXT, max_ports: EGLint, num_ports: *EGLint) -> EGLBoolean #c_call;
PFNEGLOUTPUTLAYERATTRIBEXTPROC :: #type (dpy: EGLDisplay, layer: EGLOutputLayerEXT, attribute: EGLint, value: EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC :: #type (dpy: EGLDisplay, layer: EGLOutputLayerEXT, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC :: #type (dpy: EGLDisplay, layer: EGLOutputLayerEXT, name: EGLint) -> *u8 #c_call;
PFNEGLOUTPUTPORTATTRIBEXTPROC :: #type (dpy: EGLDisplay, port: EGLOutputPortEXT, attribute: EGLint, value: EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC :: #type (dpy: EGLDisplay, port: EGLOutputPortEXT, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC :: #type (dpy: EGLDisplay, port: EGLOutputPortEXT, name: EGLint) -> *u8 #c_call;

PFNEGLGETPLATFORMDISPLAYEXTPROC :: #type (platform: EGLenum, native_display: *void, attrib_list: *EGLint) -> EGLDisplay #c_call;
PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC :: #type (dpy: EGLDisplay, config: EGLConfig, native_window: *void, attrib_list: *EGLint) -> EGLSurface #c_call;
PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC :: #type (dpy: EGLDisplay, config: EGLConfig, native_pixmap: *void, attrib_list: *EGLint) -> EGLSurface #c_call;

PFNEGLSTREAMCONSUMEROUTPUTEXTPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, layer: EGLOutputLayerEXT) -> EGLBoolean #c_call;

PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC :: #type (dpy: EGLDisplay, config: EGLConfig, attrib_list: *EGLAttrib, rates: *EGLint, rate_size: EGLint, num_rates: *EGLint) -> EGLBoolean #c_call;

PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, rects: *EGLint, n_rects: EGLint) -> EGLBoolean #c_call;

PFNEGLUNSIGNALSYNCEXTPROC :: #type (dpy: EGLDisplay, sync: EGLSync, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;

EGLClientPixmapHI :: struct {
    pData:   *void;
    iWidth:  EGLint;
    iHeight: EGLint;
    iStride: EGLint;
}

PFNEGLCREATEPIXMAPSURFACEHIPROC :: #type (dpy: EGLDisplay, config: EGLConfig, pixmap: *EGLClientPixmapHI) -> EGLSurface #c_call;

PFNEGLCREATEDRMIMAGEMESAPROC :: #type (dpy: EGLDisplay, attrib_list: *EGLint) -> EGLImageKHR #c_call;
PFNEGLEXPORTDRMIMAGEMESAPROC :: #type (dpy: EGLDisplay, image: EGLImageKHR, name: *EGLint, handle: *EGLint, stride: *EGLint) -> EGLBoolean #c_call;

PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC :: #type (dpy: EGLDisplay, image: EGLImageKHR, fourcc: *s32, num_planes: *s32, modifiers: *EGLuint64KHR) -> EGLBoolean #c_call;
PFNEGLEXPORTDMABUFIMAGEMESAPROC :: #type (dpy: EGLDisplay, image: EGLImageKHR, fds: *s32, strides: *EGLint, offsets: *EGLint) -> EGLBoolean #c_call;

PFNEGLGETDISPLAYDRIVERCONFIGPROC :: #type (dpy: EGLDisplay) -> *u8 #c_call;
PFNEGLGETDISPLAYDRIVERNAMEPROC :: #type (dpy: EGLDisplay) -> *u8 #c_call;

PFNEGLSWAPBUFFERSREGIONNOKPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, numRects: EGLint, rects: *EGLint) -> EGLBoolean #c_call;

PFNEGLSWAPBUFFERSREGION2NOKPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, numRects: EGLint, rects: *EGLint) -> EGLBoolean #c_call;

PFNEGLQUERYNATIVEDISPLAYNVPROC :: #type (dpy: EGLDisplay, display_id: *EGLNativeDisplayType) -> EGLBoolean #c_call;
PFNEGLQUERYNATIVEWINDOWNVPROC :: #type (dpy: EGLDisplay, surf: EGLSurface, window: *EGLNativeWindowType) -> EGLBoolean #c_call;
PFNEGLQUERYNATIVEPIXMAPNVPROC :: #type (dpy: EGLDisplay, surf: EGLSurface, pixmap: *EGLNativePixmapType) -> EGLBoolean #c_call;

PFNEGLPOSTSUBBUFFERNVPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, x: EGLint, y: EGLint, width: EGLint, height: EGLint) -> EGLBoolean #c_call;

PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, num_modifiers: EGLint, modifiers: *EGLuint64KHR, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, timeout: EGLTime, event: *EGLenum, aux: *EGLAttrib) -> EGLint #c_call;
PFNEGLSTREAMACQUIREIMAGENVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, pImage: *EGLImage, sync: EGLSync) -> EGLBoolean #c_call;
PFNEGLSTREAMRELEASEIMAGENVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, image: EGLImage, sync: EGLSync) -> EGLBoolean #c_call;

PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLSTREAMFLUSHNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;

PFNEGLQUERYDISPLAYATTRIBNVPROC :: #type (dpy: EGLDisplay, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLSETSTREAMMETADATANVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, n: EGLint, offset: EGLint, size: EGLint, data: *void) -> EGLBoolean #c_call;
PFNEGLQUERYSTREAMMETADATANVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, name: EGLenum, n: EGLint, offset: EGLint, size: EGLint, data: *void) -> EGLBoolean #c_call;

PFNEGLRESETSTREAMNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR) -> EGLBoolean #c_call;

PFNEGLCREATESTREAMSYNCNVPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, type: EGLenum, attrib_list: *EGLint) -> EGLSyncKHR #c_call;

EGLSyncNV :: *void;
EGLTimeNV :: u64;

PFNEGLCREATEFENCESYNCNVPROC :: #type (dpy: EGLDisplay, condition: EGLenum, attrib_list: *EGLint) -> EGLSyncNV #c_call;
PFNEGLDESTROYSYNCNVPROC :: #type (sync: EGLSyncNV) -> EGLBoolean #c_call;
PFNEGLFENCENVPROC :: #type (sync: EGLSyncNV) -> EGLBoolean #c_call;
PFNEGLCLIENTWAITSYNCNVPROC :: #type (sync: EGLSyncNV, flags: EGLint, timeout: EGLTimeNV) -> EGLint #c_call;
PFNEGLSIGNALSYNCNVPROC :: #type (sync: EGLSyncNV, mode: EGLenum) -> EGLBoolean #c_call;
PFNEGLGETSYNCATTRIBNVPROC :: #type (sync: EGLSyncNV, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;

EGLuint64NV :: u64;

PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC :: #type () -> EGLuint64NV #c_call;
PFNEGLGETSYSTEMTIMENVPROC :: #type () -> EGLuint64NV #c_call;

wl_display :: struct {}
wl_resource :: struct {}

PFNEGLBINDWAYLANDDISPLAYWLPROC :: #type (dpy: EGLDisplay, display: *wl_display) -> EGLBoolean #c_call;
PFNEGLUNBINDWAYLANDDISPLAYWLPROC :: #type (dpy: EGLDisplay, display: *wl_display) -> EGLBoolean #c_call;
PFNEGLQUERYWAYLANDBUFFERWLPROC :: #type (dpy: EGLDisplay, buffer: *wl_resource, attribute: EGLint, value: *EGLint) -> EGLBoolean #c_call;

wl_buffer :: struct {}
PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC :: #type (dpy: EGLDisplay, image: EGLImageKHR) -> *wl_buffer #c_call;

PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;
PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC :: #type (dpy: EGLDisplay, stream: EGLStreamKHR, texture: *void, attrib_list: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLCREATEDEVICEANGLEPROC :: #type (device_type: EGLint, native_device: *void, attrib_list: *EGLAttrib) -> EGLDeviceEXT #c_call;
PFNEGLRELEASEDEVICEANGLEPROC :: #type (device: EGLDeviceEXT) -> EGLBoolean #c_call;

PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC :: #type (dpy: EGLDisplay, attrib: EGLenum) -> EGLint #c_call;
PFNEGLPROGRAMCACHEQUERYANGLEPROC :: #type (dpy: EGLDisplay, index: EGLint, key: *void, keysize: *EGLint, binary: *void, binarysize: *EGLint) -> void #c_call;
PFNEGLPROGRAMCACHEPOPULATEANGLEPROC :: #type (dpy: EGLDisplay, key: *void, keysize: EGLint, binary: *void, binarysize: EGLint) -> void #c_call;
PFNEGLPROGRAMCACHERESIZEANGLEPROC :: #type (dpy: EGLDisplay, limit: EGLint, mode: EGLint) -> EGLint #c_call;

PFNEGLGETSYNCVALUESCHROMIUMPROC :: #type (dpy: EGLDisplay, surface: EGLSurface, ust: *EGLuint64KHR, msc: *EGLuint64KHR, sbc: *EGLuint64KHR) -> EGLBoolean #c_call;

PFNEGLRELEASEHIGHPOWERGPUANGLEPROC :: #type (dpy: EGLDisplay, ctx: EGLContext) -> void #c_call;
PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC :: #type (dpy: EGLDisplay, ctx: EGLContext) -> void #c_call;
PFNEGLHANDLEGPUSWITCHANGLEPROC :: #type (dpy: EGLDisplay) -> void #c_call;
PFNEGLFORCEGPUSWITCHANGLEPROC :: #type (dpy: EGLDisplay, gpuIDHigh: EGLint, gpuIDLow: EGLint) -> void #c_call;

PFNEGLWAITUNTILWORKSCHEDULEDANGLEPROC :: #type (dpy: EGLDisplay) -> void #c_call;

PFNEGLQUERYSTRINGIANGLEPROC :: #type (dpy: EGLDisplay, name: EGLint, index: EGLint) -> *u8 #c_call;
PFNEGLQUERYDISPLAYATTRIBANGLEPROC :: #type (dpy: EGLDisplay, attribute: EGLint, value: *EGLAttrib) -> EGLBoolean #c_call;

PFNEGLPREPARESWAPBUFFERSANGLEPROC :: #type (dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean #c_call;

PFNEGLACQUIREEXTERNALCONTEXTANGLEPROC :: #type (dpy: EGLDisplay, readAndDraw: EGLSurface) -> void #c_call;
PFNEGLRELEASEEXTERNALCONTEXTANGLEPROC :: #type (dpy: EGLDisplay) -> void #c_call;

PFNEGLLOCKVULKANQUEUEANGLEPROC :: #type (dpy: EGLDisplay) -> void #c_call;
PFNEGLUNLOCKVULKANQUEUEANGLEPROC :: #type (dpy: EGLDisplay) -> void #c_call;

PFNEGLEXPORTVKIMAGEANGLEPROC :: #type (dpy: EGLDisplay, image: EGLImage, vk_image: *void, vk_image_create_info: *void) -> EGLBoolean #c_call;

PFNEGLCOPYMETALSHAREDEVENTANGLEPROC :: #type (dpy: EGLDisplay, sync: EGLSync) -> *void #c_call;

PFNEGLSETVALIDATIONENABLEDANGLEPROC :: #type (validationState: EGLBoolean) -> void #c_call;

GLbyte :: s8;
GLclampf :: float;
GLfixed :: s32;
GLshort :: s16;
GLushort :: u16;
GLvoid :: void;
__GLsync :: struct {}
GLsync :: *__GLsync;
GLint64 :: s64;
GLuint64 :: u64;
GLenum :: u32;
GLuint :: u32;
GLchar :: u8;
GLfloat :: float;
GLsizeiptr :: s64;
GLintptr :: s64;
GLbitfield :: u32;
GLint :: s32;
GLboolean :: u8;
GLsizei :: u32;
GLubyte :: u8;

PFNGLACTIVETEXTUREPROC :: #type (texture: GLenum) -> void #c_call;
PFNGLATTACHSHADERPROC :: #type (program: GLuint, shader: GLuint) -> void #c_call;
PFNGLBINDATTRIBLOCATIONPROC :: #type (program: GLuint, index: GLuint, name: *GLchar) -> void #c_call;
PFNGLBINDBUFFERPROC :: #type (target: GLenum, buffer: GLuint) -> void #c_call;
PFNGLBINDFRAMEBUFFERPROC :: #type (target: GLenum, framebuffer: GLuint) -> void #c_call;
PFNGLBINDRENDERBUFFERPROC :: #type (target: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLBINDTEXTUREPROC :: #type (target: GLenum, texture: GLuint) -> void #c_call;
PFNGLBLENDCOLORPROC :: #type (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #c_call;
PFNGLBLENDEQUATIONPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEPROC :: #type (modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCPROC :: #type (sfactor: GLenum, dfactor: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEPROC :: #type (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void #c_call;
PFNGLBUFFERDATAPROC :: #type (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) -> void #c_call;
PFNGLBUFFERSUBDATAPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #c_call;
PFNGLCHECKFRAMEBUFFERSTATUSPROC :: #type (target: GLenum) -> GLenum #c_call;
PFNGLCLEARPROC :: #type (mask: GLbitfield) -> void #c_call;
PFNGLCLEARCOLORPROC :: #type (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #c_call;
PFNGLCLEARDEPTHFPROC :: #type (d: GLfloat) -> void #c_call;
PFNGLCLEARSTENCILPROC :: #type (s: GLint) -> void #c_call;
PFNGLCOLORMASKPROC :: #type (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void #c_call;
PFNGLCOMPILESHADERPROC :: #type (shader: GLuint) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOPYTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCREATEPROGRAMPROC :: #type () -> GLuint #c_call;
PFNGLCREATESHADERPROC :: #type (type: GLenum) -> GLuint #c_call;
PFNGLCULLFACEPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLDELETEBUFFERSPROC :: #type (n: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLDELETEFRAMEBUFFERSPROC :: #type (n: GLsizei, framebuffers: *GLuint) -> void #c_call;
PFNGLDELETEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLDELETERENDERBUFFERSPROC :: #type (n: GLsizei, renderbuffers: *GLuint) -> void #c_call;
PFNGLDELETESHADERPROC :: #type (shader: GLuint) -> void #c_call;
PFNGLDELETETEXTURESPROC :: #type (n: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLDEPTHFUNCPROC :: #type (func: GLenum) -> void #c_call;
PFNGLDEPTHMASKPROC :: #type (flag: GLboolean) -> void #c_call;
PFNGLDEPTHRANGEFPROC :: #type (n: GLfloat, f: GLfloat) -> void #c_call;
PFNGLDETACHSHADERPROC :: #type (program: GLuint, shader: GLuint) -> void #c_call;
PFNGLDISABLEPROC :: #type (cap: GLenum) -> void #c_call;
PFNGLDISABLEVERTEXATTRIBARRAYPROC :: #type (index: GLuint) -> void #c_call;
PFNGLDRAWARRAYSPROC :: #type (mode: GLenum, first: GLint, count: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) -> void #c_call;
PFNGLENABLEPROC :: #type (cap: GLenum) -> void #c_call;
PFNGLENABLEVERTEXATTRIBARRAYPROC :: #type (index: GLuint) -> void #c_call;
PFNGLFINISHPROC :: #type () -> void #c_call;
PFNGLFLUSHPROC :: #type () -> void #c_call;
PFNGLFRAMEBUFFERRENDERBUFFERPROC :: #type (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE2DPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLFRONTFACEPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLGENBUFFERSPROC :: #type (n: GLsizei, buffers: *GLuint) -> void #c_call;
PFNGLGENERATEMIPMAPPROC :: #type (target: GLenum) -> void #c_call;
PFNGLGENFRAMEBUFFERSPROC :: #type (n: GLsizei, framebuffers: *GLuint) -> void #c_call;
PFNGLGENRENDERBUFFERSPROC :: #type (n: GLsizei, renderbuffers: *GLuint) -> void #c_call;
PFNGLGENTEXTURESPROC :: #type (n: GLsizei, textures: *GLuint) -> void #c_call;
PFNGLGETACTIVEATTRIBPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLGETACTIVEUNIFORMPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLGETATTACHEDSHADERSPROC :: #type (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> void #c_call;
PFNGLGETATTRIBLOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLGETBOOLEANVPROC :: #type (pname: GLenum, data: *GLboolean) -> void #c_call;
PFNGLGETBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETERRORPROC :: #type () -> GLenum #c_call;
PFNGLGETFLOATVPROC :: #type (pname: GLenum, data: *GLfloat) -> void #c_call;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC :: #type (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETINTEGERVPROC :: #type (pname: GLenum, data: *GLint) -> void #c_call;
PFNGLGETPROGRAMIVPROC :: #type (program: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMINFOLOGPROC :: #type (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLGETRENDERBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSHADERIVPROC :: #type (shader: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSHADERINFOLOGPROC :: #type (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLGETSHADERPRECISIONFORMATPROC :: #type (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> void #c_call;
PFNGLGETSHADERSOURCEPROC :: #type (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> void #c_call;
PFNGLGETSTRINGPROC :: #type (name: GLenum) -> *GLubyte #c_call;
PFNGLGETTEXPARAMETERFVPROC :: #type (target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETUNIFORMFVPROC :: #type (program: GLuint, location: GLint, params: *GLfloat) -> void #c_call;
PFNGLGETUNIFORMIVPROC :: #type (program: GLuint, location: GLint, params: *GLint) -> void #c_call;
PFNGLGETUNIFORMLOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLGETVERTEXATTRIBFVPROC :: #type (index: GLuint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETVERTEXATTRIBIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBPOINTERVPROC :: #type (index: GLuint, pname: GLenum, pointer: **void) -> void #c_call;
PFNGLHINTPROC :: #type (target: GLenum, mode: GLenum) -> void #c_call;
PFNGLISBUFFERPROC :: #type (buffer: GLuint) -> GLboolean #c_call;
PFNGLISENABLEDPROC :: #type (cap: GLenum) -> GLboolean #c_call;
PFNGLISFRAMEBUFFERPROC :: #type (framebuffer: GLuint) -> GLboolean #c_call;
PFNGLISPROGRAMPROC :: #type (program: GLuint) -> GLboolean #c_call;
PFNGLISRENDERBUFFERPROC :: #type (renderbuffer: GLuint) -> GLboolean #c_call;
PFNGLISSHADERPROC :: #type (shader: GLuint) -> GLboolean #c_call;
PFNGLISTEXTUREPROC :: #type (texture: GLuint) -> GLboolean #c_call;
PFNGLLINEWIDTHPROC :: #type (width: GLfloat) -> void #c_call;
PFNGLLINKPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLPIXELSTOREIPROC :: #type (pname: GLenum, param: GLint) -> void #c_call;
PFNGLPOLYGONOFFSETPROC :: #type (factor: GLfloat, units: GLfloat) -> void #c_call;
PFNGLREADPIXELSPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLRELEASESHADERCOMPILERPROC :: #type () -> void #c_call;
PFNGLRENDERBUFFERSTORAGEPROC :: #type (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSAMPLECOVERAGEPROC :: #type (value: GLfloat, invert: GLboolean) -> void #c_call;
PFNGLSCISSORPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSHADERBINARYPROC :: #type (count: GLsizei, shaders: *GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #c_call;
PFNGLSHADERSOURCEPROC :: #type (shader: GLuint, count: GLsizei, _string: **GLchar, length: *GLint) -> void #c_call;
PFNGLSTENCILFUNCPROC :: #type (func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILFUNCSEPARATEPROC :: #type (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILMASKPROC :: #type (mask: GLuint) -> void #c_call;
PFNGLSTENCILMASKSEPARATEPROC :: #type (face: GLenum, mask: GLuint) -> void #c_call;
PFNGLSTENCILOPPROC :: #type (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void #c_call;
PFNGLSTENCILOPSEPARATEPROC :: #type (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void #c_call;
PFNGLTEXIMAGE2DPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXPARAMETERFPROC :: #type (target: GLenum, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLTEXPARAMETERFVPROC :: #type (target: GLenum, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLTEXPARAMETERIPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLTEXPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXSUBIMAGE2DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLUNIFORM1FPROC :: #type (location: GLint, v0: GLfloat) -> void #c_call;
PFNGLUNIFORM1FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM1IPROC :: #type (location: GLint, v0: GLint) -> void #c_call;
PFNGLUNIFORM1IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM2FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLUNIFORM2FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM2IPROC :: #type (location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLUNIFORM2IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM3FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLUNIFORM3FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM3IPROC :: #type (location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLUNIFORM3IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORM4FPROC :: #type (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLUNIFORM4FVPROC :: #type (location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLUNIFORM4IPROC :: #type (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLUNIFORM4IVPROC :: #type (location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLUNIFORMMATRIX2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUSEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLVALIDATEPROGRAMPROC :: #type (program: GLuint) -> void #c_call;
PFNGLVERTEXATTRIB1FPROC :: #type (index: GLuint, x: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB1FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB2FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB2FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB3FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB3FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB4FPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #c_call;
PFNGLVERTEXATTRIB4FVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLVERTEXATTRIBPOINTERPROC :: #type (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) -> void #c_call;
PFNGLVIEWPORTPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;

glActiveTexture :: (texture: GLenum) -> void #foreign angle;
glAttachShader :: (program: GLuint, shader: GLuint) -> void #foreign angle;
glBindAttribLocation :: (program: GLuint, index: GLuint, name: *GLchar) -> void #foreign angle;
glBindBuffer :: (target: GLenum, buffer: GLuint) -> void #foreign angle;
glBindFramebuffer :: (target: GLenum, framebuffer: GLuint) -> void #foreign angle;
glBindRenderbuffer :: (target: GLenum, renderbuffer: GLuint) -> void #foreign angle;
glBindTexture :: (target: GLenum, texture: GLuint) -> void #foreign angle;
glBlendColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #foreign angle;
glBlendEquation :: (mode: GLenum) -> void #foreign angle;
glBlendEquationSeparate :: (modeRGB: GLenum, modeAlpha: GLenum) -> void #foreign angle;
glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) -> void #foreign angle;
glBlendFuncSeparate :: (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void #foreign angle;
glBufferData :: (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) -> void #foreign angle;
glBufferSubData :: (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) -> void #foreign angle;
glCheckFramebufferStatus :: (target: GLenum) -> GLenum #foreign angle;
glClear :: (mask: GLbitfield) -> void #foreign angle;
glClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #foreign angle;
glClearDepthf :: (d: GLfloat) -> void #foreign angle;
glClearStencil :: (s: GLint) -> void #foreign angle;
glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void #foreign angle;
glCompileShader :: (shader: GLuint) -> void #foreign angle;
glCompressedTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #foreign angle;
glCompressedTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #foreign angle;
glCopyTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #foreign angle;
glCopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #foreign angle;
glCreateProgram :: () -> GLuint #foreign angle;
glCreateShader :: (type: GLenum) -> GLuint #foreign angle;
glCullFace :: (mode: GLenum) -> void #foreign angle;
glDeleteBuffers :: (n: GLsizei, buffers: *GLuint) -> void #foreign angle;
glDeleteFramebuffers :: (n: GLsizei, framebuffers: *GLuint) -> void #foreign angle;
glDeleteProgram :: (program: GLuint) -> void #foreign angle;
glDeleteRenderbuffers :: (n: GLsizei, renderbuffers: *GLuint) -> void #foreign angle;
glDeleteShader :: (shader: GLuint) -> void #foreign angle;
glDeleteTextures :: (n: GLsizei, textures: *GLuint) -> void #foreign angle;
glDepthFunc :: (func: GLenum) -> void #foreign angle;
glDepthMask :: (flag: GLboolean) -> void #foreign angle;
glDepthRangef :: (n: GLfloat, f: GLfloat) -> void #foreign angle;
glDetachShader :: (program: GLuint, shader: GLuint) -> void #foreign angle;
glDisable :: (cap: GLenum) -> void #foreign angle;
glDisableVertexAttribArray :: (index: GLuint) -> void #foreign angle;
glDrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) -> void #foreign angle;
glDrawElements :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) -> void #foreign angle;
glEnable :: (cap: GLenum) -> void #foreign angle;
glEnableVertexAttribArray :: (index: GLuint) -> void #foreign angle;
glFinish :: () -> void #foreign angle;
glFlush :: () -> void #foreign angle;
glFramebufferRenderbuffer :: (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void #foreign angle;
glFramebufferTexture2D :: (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void #foreign angle;
glFrontFace :: (mode: GLenum) -> void #foreign angle;
glGenBuffers :: (n: GLsizei, buffers: *GLuint) -> void #foreign angle;
glGenerateMipmap :: (target: GLenum) -> void #foreign angle;
glGenFramebuffers :: (n: GLsizei, framebuffers: *GLuint) -> void #foreign angle;
glGenRenderbuffers :: (n: GLsizei, renderbuffers: *GLuint) -> void #foreign angle;
glGenTextures :: (n: GLsizei, textures: *GLuint) -> void #foreign angle;
glGetActiveAttrib :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #foreign angle;
glGetActiveUniform :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) -> void #foreign angle;
glGetAttachedShaders :: (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> void #foreign angle;
glGetAttribLocation :: (program: GLuint, name: *GLchar) -> GLint #foreign angle;
glGetBooleanv :: (pname: GLenum, data: *GLboolean) -> void #foreign angle;
glGetBufferParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetError :: () -> GLenum #foreign angle;
glGetFloatv :: (pname: GLenum, data: *GLfloat) -> void #foreign angle;
glGetFramebufferAttachmentParameteriv :: (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetIntegerv :: (pname: GLenum, data: *GLint) -> void #foreign angle;
glGetProgramiv :: (program: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetProgramInfoLog :: (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #foreign angle;
glGetRenderbufferParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetShaderiv :: (shader: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetShaderInfoLog :: (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #foreign angle;
glGetShaderPrecisionFormat :: (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> void #foreign angle;
glGetShaderSource :: (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> void #foreign angle;
glGetString :: (name: GLenum) -> *GLubyte #foreign angle;
glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) -> void #foreign angle;
glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetUniformfv :: (program: GLuint, location: GLint, params: *GLfloat) -> void #foreign angle;
glGetUniformiv :: (program: GLuint, location: GLint, params: *GLint) -> void #foreign angle;
glGetUniformLocation :: (program: GLuint, name: *GLchar) -> GLint #foreign angle;
glGetVertexAttribfv :: (index: GLuint, pname: GLenum, params: *GLfloat) -> void #foreign angle;
glGetVertexAttribiv :: (index: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetVertexAttribPointerv :: (index: GLuint, pname: GLenum, pointer: **void) -> void #foreign angle;
glHint :: (target: GLenum, mode: GLenum) -> void #foreign angle;
glIsBuffer :: (buffer: GLuint) -> GLboolean #foreign angle;
glIsEnabled :: (cap: GLenum) -> GLboolean #foreign angle;
glIsFramebuffer :: (framebuffer: GLuint) -> GLboolean #foreign angle;
glIsProgram :: (program: GLuint) -> GLboolean #foreign angle;
glIsRenderbuffer :: (renderbuffer: GLuint) -> GLboolean #foreign angle;
glIsShader :: (shader: GLuint) -> GLboolean #foreign angle;
glIsTexture :: (texture: GLuint) -> GLboolean #foreign angle;
glLineWidth :: (width: GLfloat) -> void #foreign angle;
glLinkProgram :: (program: GLuint) -> void #foreign angle;
glPixelStorei :: (pname: GLenum, param: GLint) -> void #foreign angle;
glPolygonOffset :: (factor: GLfloat, units: GLfloat) -> void #foreign angle;
glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #foreign angle;
glReleaseShaderCompiler :: () -> void #foreign angle;
glRenderbufferStorage :: (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #foreign angle;
glSampleCoverage :: (value: GLfloat, invert: GLboolean) -> void #foreign angle;
glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #foreign angle;
glShaderBinary :: (count: GLsizei, shaders: *GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #foreign angle;
glShaderSource :: (shader: GLuint, count: GLsizei, _string: **GLchar, length: *GLint) -> void #foreign angle;
glStencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) -> void #foreign angle;
glStencilFuncSeparate :: (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void #foreign angle;
glStencilMask :: (mask: GLuint) -> void #foreign angle;
glStencilMaskSeparate :: (face: GLenum, mask: GLuint) -> void #foreign angle;
glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void #foreign angle;
glStencilOpSeparate :: (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void #foreign angle;
glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #foreign angle;
glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) -> void #foreign angle;
glTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) -> void #foreign angle;
glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) -> void #foreign angle;
glTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #foreign angle;
glUniform1f :: (location: GLint, v0: GLfloat) -> void #foreign angle;
glUniform1fv :: (location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glUniform1i :: (location: GLint, v0: GLint) -> void #foreign angle;
glUniform1iv :: (location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glUniform2f :: (location: GLint, v0: GLfloat, v1: GLfloat) -> void #foreign angle;
glUniform2fv :: (location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glUniform2i :: (location: GLint, v0: GLint, v1: GLint) -> void #foreign angle;
glUniform2iv :: (location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glUniform3f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #foreign angle;
glUniform3fv :: (location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glUniform3i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #foreign angle;
glUniform3iv :: (location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glUniform4f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #foreign angle;
glUniform4fv :: (location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glUniform4i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #foreign angle;
glUniform4iv :: (location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glUniformMatrix2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUseProgram :: (program: GLuint) -> void #foreign angle;
glValidateProgram :: (program: GLuint) -> void #foreign angle;
glVertexAttrib1f :: (index: GLuint, x: GLfloat) -> void #foreign angle;
glVertexAttrib1fv :: (index: GLuint, v: *GLfloat) -> void #foreign angle;
glVertexAttrib2f :: (index: GLuint, x: GLfloat, y: GLfloat) -> void #foreign angle;
glVertexAttrib2fv :: (index: GLuint, v: *GLfloat) -> void #foreign angle;
glVertexAttrib3f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void #foreign angle;
glVertexAttrib3fv :: (index: GLuint, v: *GLfloat) -> void #foreign angle;
glVertexAttrib4f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #foreign angle;
glVertexAttrib4fv :: (index: GLuint, v: *GLfloat) -> void #foreign angle;
glVertexAttribPointer :: (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) -> void #foreign angle;
glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #foreign angle;

PFNGLBLENDBARRIERKHRPROC :: #type () -> void #c_call;

GLDEBUGPROCKHR :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *void) -> void #c_call;

PFNGLDEBUGMESSAGECONTROLKHRPROC :: #type (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> void #c_call;
PFNGLDEBUGMESSAGEINSERTKHRPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> void #c_call;
PFNGLDEBUGMESSAGECALLBACKKHRPROC :: #type (callback: GLDEBUGPROCKHR, userParam: *void) -> void #c_call;
PFNGLGETDEBUGMESSAGELOGKHRPROC :: #type (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
PFNGLPUSHDEBUGGROUPKHRPROC :: #type (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> void #c_call;
PFNGLPOPDEBUGGROUPKHRPROC :: #type () -> void #c_call;
PFNGLOBJECTLABELKHRPROC :: #type (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTLABELKHRPROC :: #type (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;
PFNGLOBJECTPTRLABELKHRPROC :: #type (ptr: *void, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTPTRLABELKHRPROC :: #type (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETPOINTERVKHRPROC :: #type (pname: GLenum, params: **void) -> void #c_call;

PFNGLMAXSHADERCOMPILERTHREADSKHRPROC :: #type (count: GLuint) -> void #c_call;

PFNGLGETGRAPHICSRESETSTATUSKHRPROC :: #type () -> GLenum #c_call;
PFNGLREADNPIXELSKHRPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETNUNIFORMFVKHRPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVKHRPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLGETNUNIFORMUIVKHRPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> void #c_call;

GLeglImageOES :: *void;
PFNGLEGLIMAGETARGETTEXTURE2DOESPROC :: #type (target: GLenum, image: GLeglImageOES) -> void #c_call;
PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC :: #type (target: GLenum, image: GLeglImageOES) -> void #c_call;

PFNGLCOPYIMAGESUBDATAOESPROC :: #type (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void #c_call;

PFNGLENABLEIOESPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEIOESPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLBLENDEQUATIONIOESPROC :: #type (buf: GLuint, mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEIOESPROC :: #type (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCIOESPROC :: #type (buf: GLuint, src: GLenum, dst: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEIOESPROC :: #type (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #c_call;
PFNGLCOLORMASKIOESPROC :: #type (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void #c_call;
PFNGLISENABLEDIOESPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;

PFNGLDRAWELEMENTSBASEVERTEXOESPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) -> void #c_call;
PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC :: #type (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) -> void #c_call;

PFNGLFRAMEBUFFERTEXTUREOESPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;

PFNGLGETPROGRAMBINARYOESPROC :: #type (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) -> void #c_call;
PFNGLPROGRAMBINARYOESPROC :: #type (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLint) -> void #c_call;

PFNGLMAPBUFFEROESPROC :: #type (target: GLenum, access: GLenum) -> *void #c_call;
PFNGLUNMAPBUFFEROESPROC :: #type (target: GLenum) -> GLboolean #c_call;
PFNGLGETBUFFERPOINTERVOESPROC :: #type (target: GLenum, pname: GLenum, params: **void) -> void #c_call;

PFNGLPRIMITIVEBOUNDINGBOXOESPROC :: #type (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> void #c_call;

PFNGLMINSAMPLESHADINGOESPROC :: #type (value: GLfloat) -> void #c_call;

PFNGLPATCHPARAMETERIOESPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;

PFNGLTEXIMAGE3DOESPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXSUBIMAGE3DOESPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE3DOESPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE3DOESPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE3DOESPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> void #c_call;

PFNGLTEXPARAMETERIIVOESPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXPARAMETERIUIVOESPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXPARAMETERIIVOESPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERIUIVOESPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIIVOESPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIUIVOESPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLuint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIIVOESPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIUIVOESPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;

PFNGLTEXBUFFEROESPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLTEXBUFFERRANGEOESPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;

PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;

PFNGLTEXTUREVIEWOESPROC :: #type (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> void #c_call;

PFNGLBINDVERTEXARRAYOESPROC :: #type (array: GLuint) -> void #c_call;
PFNGLDELETEVERTEXARRAYSOESPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLGENVERTEXARRAYSOESPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLISVERTEXARRAYOESPROC :: #type (array: GLuint) -> GLboolean #c_call;

PFNGLVIEWPORTARRAYVOESPROC :: #type (first: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFOESPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFVOESPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLSCISSORARRAYVOESPROC :: #type (first: GLuint, count: GLsizei, v: *GLint) -> void #c_call;
PFNGLSCISSORINDEXEDOESPROC :: #type (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSCISSORINDEXEDVOESPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLDEPTHRANGEARRAYFVOESPROC :: #type (first: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLDEPTHRANGEINDEXEDFOESPROC :: #type (index: GLuint, n: GLfloat, f: GLfloat) -> void #c_call;
PFNGLGETFLOATI_VOESPROC :: #type (target: GLenum, index: GLuint, data: *GLfloat) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC :: #type (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC :: #type (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;

PFNGLGETPERFMONITORGROUPSAMDPROC :: #type (numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERSAMDPROC :: #type (group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> void #c_call;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC :: #type (group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC :: #type (group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC :: #type (group: GLuint, counter: GLuint, pname: GLenum, data: *void) -> void #c_call;
PFNGLGENPERFMONITORSAMDPROC :: #type (n: GLsizei, monitors: *GLuint) -> void #c_call;
PFNGLDELETEPERFMONITORSAMDPROC :: #type (n: GLsizei, monitors: *GLuint) -> void #c_call;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC :: #type (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> void #c_call;
PFNGLBEGINPERFMONITORAMDPROC :: #type (monitor: GLuint) -> void #c_call;
PFNGLENDPERFMONITORAMDPROC :: #type (monitor: GLuint) -> void #c_call;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC :: #type (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> void #c_call;

PFNGLBLITFRAMEBUFFERANGLEPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDANGLEPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDANGLEPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) -> void #c_call;
PFNGLVERTEXATTRIBDIVISORANGLEPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;

PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC :: #type (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> void #c_call;

PFNGLCOPYTEXTURELEVELSAPPLEPROC :: #type (destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC :: #type () -> void #c_call;

PFNGLFENCESYNCAPPLEPROC :: #type (condition: GLenum, flags: GLbitfield) -> GLsync #c_call;
PFNGLISSYNCAPPLEPROC :: #type (sync: GLsync) -> GLboolean #c_call;
PFNGLDELETESYNCAPPLEPROC :: #type (sync: GLsync) -> void #c_call;
PFNGLCLIENTWAITSYNCAPPLEPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #c_call;
PFNGLWAITSYNCAPPLEPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void #c_call;
PFNGLGETINTEGER64VAPPLEPROC :: #type (pname: GLenum, params: *GLint64) -> void #c_call;
PFNGLGETSYNCIVAPPLEPROC :: #type (sync: GLsync, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) -> void #c_call;

PFNGLMAXACTIVESHADERCORESARMPROC :: #type (count: GLuint) -> void #c_call;

PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC :: #type (target: GLenum, image: GLeglImageOES, attrib_list: *GLint) -> void #c_call;
PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC :: #type (texture: GLuint, image: GLeglImageOES, attrib_list: *GLint) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> void #c_call;

PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC :: #type (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> void #c_call;
PFNGLBINDFRAGDATALOCATIONEXTPROC :: #type (program: GLuint, color: GLuint, name: *GLchar) -> void #c_call;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
PFNGLGETFRAGDATAINDEXEXTPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;

PFNGLBUFFERSTORAGEEXTPROC :: #type (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) -> void #c_call;

PFNGLCLEARTEXIMAGEEXTPROC :: #type (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) -> void #c_call;
PFNGLCLEARTEXSUBIMAGEEXTPROC :: #type (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) -> void #c_call;

PFNGLCLIPCONTROLEXTPROC :: #type (origin: GLenum, depth: GLenum) -> void #c_call;

PFNGLCOPYIMAGESUBDATAEXTPROC :: #type (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void #c_call;

PFNGLLABELOBJECTEXTPROC :: #type (type: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTLABELEXTPROC :: #type (type: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;

PFNGLINSERTEVENTMARKEREXTPROC :: #type (length: GLsizei, marker: *GLchar) -> void #c_call;
PFNGLPUSHGROUPMARKEREXTPROC :: #type (length: GLsizei, marker: *GLchar) -> void #c_call;
PFNGLPOPGROUPMARKEREXTPROC :: #type () -> void #c_call;

PFNGLDISCARDFRAMEBUFFEREXTPROC :: #type (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> void #c_call;

PFNGLGENQUERIESEXTPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLDELETEQUERIESEXTPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLISQUERYEXTPROC :: #type (id: GLuint) -> GLboolean #c_call;
PFNGLBEGINQUERYEXTPROC :: #type (target: GLenum, id: GLuint) -> void #c_call;
PFNGLENDQUERYEXTPROC :: #type (target: GLenum) -> void #c_call;
PFNGLQUERYCOUNTEREXTPROC :: #type (id: GLuint, target: GLenum) -> void #c_call;
PFNGLGETQUERYIVEXTPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTIVEXTPROC :: #type (id: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTUIVEXTPROC :: #type (id: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETQUERYOBJECTI64VEXTPROC :: #type (id: GLuint, pname: GLenum, params: *GLint64) -> void #c_call;
PFNGLGETQUERYOBJECTUI64VEXTPROC :: #type (id: GLuint, pname: GLenum, params: *GLuint64) -> void #c_call;
PFNGLGETINTEGER64VEXTPROC :: #type (pname: GLenum, data: *GLint64) -> void #c_call;

PFNGLDRAWBUFFERSEXTPROC :: #type (n: GLsizei, bufs: *GLenum) -> void #c_call;

PFNGLENABLEIEXTPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEIEXTPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLBLENDEQUATIONIEXTPROC :: #type (buf: GLuint, mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEIEXTPROC :: #type (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCIEXTPROC :: #type (buf: GLuint, src: GLenum, dst: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEIEXTPROC :: #type (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #c_call;
PFNGLCOLORMASKIEXTPROC :: #type (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void #c_call;
PFNGLISENABLEDIEXTPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;

PFNGLDRAWELEMENTSBASEVERTEXEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDEXTPROC :: #type (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) -> void #c_call;

PFNGLDRAWTRANSFORMFEEDBACKEXTPROC :: #type (mode: GLenum, id: GLuint) -> void #c_call;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC :: #type (mode: GLenum, id: GLuint, instancecount: GLsizei) -> void #c_call;

GLeglClientBufferEXT :: *void;
PFNGLBUFFERSTORAGEEXTERNALEXTPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) -> void #c_call;
PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) -> void #c_call;

PFNGLGETFRAGMENTSHADINGRATESEXTPROC :: #type (samples: GLsizei, maxCount: GLsizei, count: *GLsizei, shadingRates: *GLenum) -> void #c_call;
PFNGLSHADINGRATEEXTPROC :: #type (rate: GLenum) -> void #c_call;
PFNGLSHADINGRATECOMBINEROPSEXTPROC :: #type (combinerOp0: GLenum, combinerOp1: GLenum) -> void #c_call;
PFNGLFRAMEBUFFERSHADINGRATEEXTPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, baseLayer: GLint, numLayers: GLsizei, texelWidth: GLsizei, texelHeight: GLsizei) -> void #c_call;

PFNGLBLITFRAMEBUFFERLAYERSEXTPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;
PFNGLBLITFRAMEBUFFERLAYEREXTPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, srcLayer: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, dstLayer: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;

PFNGLFRAMEBUFFERTEXTUREEXTPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;

PFNGLVERTEXATTRIBDIVISOREXTPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;

PFNGLMAPBUFFERRANGEEXTPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void #c_call;

PFNGLGETUNSIGNEDBYTEVEXTPROC :: #type (pname: GLenum, data: *GLubyte) -> void #c_call;
PFNGLGETUNSIGNEDBYTEI_VEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLubyte) -> void #c_call;
PFNGLDELETEMEMORYOBJECTSEXTPROC :: #type (n: GLsizei, memoryObjects: *GLuint) -> void #c_call;
PFNGLISMEMORYOBJECTEXTPROC :: #type (memoryObject: GLuint) -> GLboolean #c_call;
PFNGLCREATEMEMORYOBJECTSEXTPROC :: #type (n: GLsizei, memoryObjects: *GLuint) -> void #c_call;
PFNGLMEMORYOBJECTPARAMETERIVEXTPROC :: #type (memoryObject: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC :: #type (memoryObject: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXSTORAGEMEM2DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC :: #type (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXSTORAGEMEM3DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC :: #type (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLBUFFERSTORAGEMEMEXTPROC :: #type (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTURESTORAGEMEM2DEXTPROC :: #type (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC :: #type (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTURESTORAGEMEM3DEXTPROC :: #type (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC :: #type (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC :: #type (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) -> void #c_call;

PFNGLIMPORTMEMORYFDEXTPROC :: #type (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) -> void #c_call;

PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC :: #type (memory: GLuint, size: GLuint64, handleType: GLenum, handle: *void) -> void #c_call;
PFNGLIMPORTMEMORYWIN32NAMEEXTPROC :: #type (memory: GLuint, size: GLuint64, handleType: GLenum, name: *void) -> void #c_call;

PFNGLMULTIDRAWARRAYSEXTPROC :: #type (mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSEXTPROC :: #type (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, primcount: GLsizei) -> void #c_call;

PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC :: #type (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC :: #type (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> void #c_call;

PFNGLREADBUFFERINDEXEDEXTPROC :: #type (src: GLenum, index: GLint) -> void #c_call;
PFNGLDRAWBUFFERSINDEXEDEXTPROC :: #type (n: GLint, location: *GLenum, indices: *GLint) -> void #c_call;
PFNGLGETINTEGERI_VEXTPROC :: #type (target: GLenum, index: GLuint, data: *GLint) -> void #c_call;

PFNGLPOLYGONOFFSETCLAMPEXTPROC :: #type (factor: GLfloat, units: GLfloat, clamp: GLfloat) -> void #c_call;

PFNGLPRIMITIVEBOUNDINGBOXEXTPROC :: #type (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> void #c_call;

PFNGLRASTERSAMPLESEXTPROC :: #type (samples: GLuint, fixedsamplelocations: GLboolean) -> void #c_call;

PFNGLGETGRAPHICSRESETSTATUSEXTPROC :: #type () -> GLenum #c_call;
PFNGLREADNPIXELSEXTPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETNUNIFORMFVEXTPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVEXTPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #c_call;

PFNGLGENSEMAPHORESEXTPROC :: #type (n: GLsizei, semaphores: *GLuint) -> void #c_call;
PFNGLDELETESEMAPHORESEXTPROC :: #type (n: GLsizei, semaphores: *GLuint) -> void #c_call;
PFNGLISSEMAPHOREEXTPROC :: #type (semaphore: GLuint) -> GLboolean #c_call;
PFNGLSEMAPHOREPARAMETERUI64VEXTPROC :: #type (semaphore: GLuint, pname: GLenum, params: *GLuint64) -> void #c_call;
PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC :: #type (semaphore: GLuint, pname: GLenum, params: *GLuint64) -> void #c_call;
PFNGLWAITSEMAPHOREEXTPROC :: #type (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, srcLayouts: *GLenum) -> void #c_call;
PFNGLSIGNALSEMAPHOREEXTPROC :: #type (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, dstLayouts: *GLenum) -> void #c_call;

PFNGLIMPORTSEMAPHOREFDEXTPROC :: #type (semaphore: GLuint, handleType: GLenum, fd: GLint) -> void #c_call;

PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC :: #type (semaphore: GLuint, handleType: GLenum, handle: *void) -> void #c_call;
PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC :: #type (semaphore: GLuint, handleType: GLenum, name: *void) -> void #c_call;

PFNGLACTIVESHADERPROGRAMEXTPROC :: #type (pipeline: GLuint, program: GLuint) -> void #c_call;
PFNGLBINDPROGRAMPIPELINEEXTPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLCREATESHADERPROGRAMVEXTPROC :: #type (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
PFNGLDELETEPROGRAMPIPELINESEXTPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLGENPROGRAMPIPELINESEXTPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC :: #type (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLGETPROGRAMPIPELINEIVEXTPROC :: #type (pipeline: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLISPROGRAMPIPELINEEXTPROC :: #type (pipeline: GLuint) -> GLboolean #c_call;
PFNGLPROGRAMPARAMETERIEXTPROC :: #type (program: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4FEXTPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4IEXTPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUSEPROGRAMSTAGESEXTPROC :: #type (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void #c_call;
PFNGLVALIDATEPROGRAMPIPELINEEXTPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIEXTPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;

PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC :: #type () -> void #c_call;

PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC :: #type (target: GLuint, size: GLsizei) -> void #c_call;
PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC :: #type (target: GLuint) -> GLsizei #c_call;
PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC :: #type (offset: GLsizei, n: GLsizei, values: *GLuint) -> void #c_call;

PFNGLTEXPAGECOMMITMENTEXTPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) -> void #c_call;

PFNGLPATCHPARAMETERIEXTPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;

PFNGLTEXPARAMETERIIVEXTPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXPARAMETERIUIVEXTPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXPARAMETERIIVEXTPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERIUIVEXTPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIIVEXTPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIUIVEXTPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLuint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIIVEXTPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIUIVEXTPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;

PFNGLTEXBUFFEREXTPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLTEXBUFFERRANGEEXTPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;

PFNGLTEXSTORAGE1DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE2DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE3DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE1DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE2DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXTURESTORAGE3DEXTPROC :: #type (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;

PFNGLTEXSTORAGEATTRIBS2DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, attrib_list: *GLint) -> void #c_call;
PFNGLTEXSTORAGEATTRIBS3DEXTPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, attrib_list: *GLint) -> void #c_call;

PFNGLTEXTUREVIEWEXTPROC :: #type (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> void #c_call;

PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC :: #type (memory: GLuint, key: GLuint64, timeout: GLuint) -> GLboolean #c_call;
PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC :: #type (memory: GLuint, key: GLuint64) -> GLboolean #c_call;

PFNGLWINDOWRECTANGLESEXTPROC :: #type (mode: GLenum, count: GLsizei, box: *GLint) -> void #c_call;

PFNGLGETTEXTUREHANDLEIMGPROC :: #type (texture: GLuint) -> GLuint64 #c_call;
PFNGLGETTEXTURESAMPLERHANDLEIMGPROC :: #type (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
PFNGLUNIFORMHANDLEUI64IMGPROC :: #type (location: GLint, value: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64VIMGPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC :: #type (program: GLuint, location: GLint, value: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC :: #type (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> void #c_call;

PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, xscale: GLint, yscale: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint, xscale: GLint, yscale: GLint) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC :: #type (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> void #c_call;

PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC :: #type () -> void #c_call;

PFNGLBEGINPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLCREATEPERFQUERYINTELPROC :: #type (queryId: GLuint, queryHandle: *GLuint) -> void #c_call;
PFNGLDELETEPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLENDPERFQUERYINTELPROC :: #type (queryHandle: GLuint) -> void #c_call;
PFNGLGETFIRSTPERFQUERYIDINTELPROC :: #type (queryId: *GLuint) -> void #c_call;
PFNGLGETNEXTPERFQUERYIDINTELPROC :: #type (queryId: GLuint, nextQueryId: *GLuint) -> void #c_call;
PFNGLGETPERFCOUNTERINFOINTELPROC :: #type (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *GLchar, counterDescLength: GLuint, counterDesc: *GLchar, counterOffset: *GLuint, counterDataSize: *GLuint, counterTypeEnum: *GLuint, counterDataTypeEnum: *GLuint, rawCounterMaxValue: *GLuint64) -> void #c_call;
PFNGLGETPERFQUERYDATAINTELPROC :: #type (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *void, bytesWritten: *GLuint) -> void #c_call;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC :: #type (queryName: *GLchar, queryId: *GLuint) -> void #c_call;
PFNGLGETPERFQUERYINFOINTELPROC :: #type (queryId: GLuint, queryNameLength: GLuint, queryName: *GLchar, dataSize: *GLuint, noCounters: *GLuint, noInstances: *GLuint, capsMask: *GLuint) -> void #c_call;

PFNGLFRAMEBUFFERPARAMETERIMESAPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLGENSAMPLERSPROC :: #type (count: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLDELETESAMPLERSPROC :: #type (count: GLsizei, samplers: *GLuint) -> void #c_call;
PFNGLISSAMPLERPROC :: #type (sampler: GLuint) -> GLboolean #c_call;
PFNGLBINDSAMPLERPROC :: #type (unit: GLuint, sampler: GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIPROC :: #type (sampler: GLuint, pname: GLenum, param: GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERFPROC :: #type (sampler: GLuint, pname: GLenum, param: GLfloat) -> void #c_call;
PFNGLSAMPLERPARAMETERFVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLfloat) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERFVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLfloat) -> void #c_call;

PFNGLGETTEXTUREHANDLENVPROC :: #type (texture: GLuint) -> GLuint64 #c_call;
PFNGLGETTEXTURESAMPLERHANDLENVPROC :: #type (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLGETIMAGEHANDLENVPROC :: #type (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #c_call;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC :: #type (handle: GLuint64, access: GLenum) -> void #c_call;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC :: #type (handle: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64NVPROC :: #type (location: GLint, value: GLuint64) -> void #c_call;
PFNGLUNIFORMHANDLEUI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC :: #type (program: GLuint, location: GLint, value: GLuint64) -> void #c_call;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> void #c_call;
PFNGLISTEXTUREHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> GLboolean #c_call;
PFNGLISIMAGEHANDLERESIDENTNVPROC :: #type (handle: GLuint64) -> GLboolean #c_call;

PFNGLBLENDPARAMETERINVPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;
PFNGLBLENDBARRIERNVPROC :: #type () -> void #c_call;

PFNGLVIEWPORTPOSITIONWSCALENVPROC :: #type (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) -> void #c_call;

PFNGLBEGINCONDITIONALRENDERNVPROC :: #type (id: GLuint, mode: GLenum) -> void #c_call;
PFNGLENDCONDITIONALRENDERNVPROC :: #type () -> void #c_call;

PFNGLSUBPIXELPRECISIONBIASNVPROC :: #type (xbits: GLuint, ybits: GLuint) -> void #c_call;

PFNGLCONSERVATIVERASTERPARAMETERINVPROC :: #type (pname: GLenum, param: GLint) -> void #c_call;

PFNGLCOPYBUFFERSUBDATANVPROC :: #type (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #c_call;

PFNGLCOVERAGEMASKNVPROC :: #type (mask: GLboolean) -> void #c_call;
PFNGLCOVERAGEOPERATIONNVPROC :: #type (operation: GLenum) -> void #c_call;

PFNGLDRAWBUFFERSNVPROC :: #type (n: GLsizei, bufs: *GLenum) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDNVPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDNVPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) -> void #c_call;

GLVULKANPROCNV :: #type () -> void #c_call;
PFNGLDRAWVKIMAGENVPROC :: #type (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> void #c_call;
PFNGLGETVKPROCADDRNVPROC :: #type (name: *GLchar) -> GLVULKANPROCNV #c_call;
PFNGLWAITVKSEMAPHORENVPROC :: #type (vkSemaphore: GLuint64) -> void #c_call;
PFNGLSIGNALVKSEMAPHORENVPROC :: #type (vkSemaphore: GLuint64) -> void #c_call;
PFNGLSIGNALVKFENCENVPROC :: #type (vkFence: GLuint64) -> void #c_call;

PFNGLDELETEFENCESNVPROC :: #type (n: GLsizei, fences: *GLuint) -> void #c_call;
PFNGLGENFENCESNVPROC :: #type (n: GLsizei, fences: *GLuint) -> void #c_call;
PFNGLISFENCENVPROC :: #type (fence: GLuint) -> GLboolean #c_call;
PFNGLTESTFENCENVPROC :: #type (fence: GLuint) -> GLboolean #c_call;
PFNGLGETFENCEIVNVPROC :: #type (fence: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLFINISHFENCENVPROC :: #type (fence: GLuint) -> void #c_call;
PFNGLSETFENCENVPROC :: #type (fence: GLuint, condition: GLenum) -> void #c_call;

PFNGLFRAGMENTCOVERAGECOLORNVPROC :: #type (color: GLuint) -> void #c_call;

PFNGLBLITFRAMEBUFFERNVPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;

PFNGLCOVERAGEMODULATIONTABLENVPROC :: #type (n: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC :: #type (bufSize: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLCOVERAGEMODULATIONNVPROC :: #type (components: GLenum) -> void #c_call;

PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;

GLint64EXT :: s64;
GLuint64EXT :: u64;

PFNGLUNIFORM1I64NVPROC :: #type (location: GLint, x: GLint64EXT) -> void #c_call;
PFNGLUNIFORM2I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT) -> void #c_call;
PFNGLUNIFORM3I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> void #c_call;
PFNGLUNIFORM4I64NVPROC :: #type (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> void #c_call;
PFNGLUNIFORM1I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM2I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM3I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM4I64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLUNIFORM1UI64NVPROC :: #type (location: GLint, x: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM2UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM3UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM4UI64NVPROC :: #type (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> void #c_call;
PFNGLUNIFORM1UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM2UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM3UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLUNIFORM4UI64VNVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLGETUNIFORMI64VNVPROC :: #type (program: GLuint, location: GLint, params: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64NVPROC :: #type (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4I64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64NVPROC :: #type (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM1UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM2UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM3UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;
PFNGLPROGRAMUNIFORM4UI64VNVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> void #c_call;

PFNGLVERTEXATTRIBDIVISORNVPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;

PFNGLGETINTERNALFORMATSAMPLEIVNVPROC :: #type (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: *GLint) -> void #c_call;

PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC :: #type (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: *GLuint) -> void #c_call;
PFNGLRESETMEMORYOBJECTPARAMETERNVPROC :: #type (memory: GLuint, pname: GLenum) -> void #c_call;
PFNGLTEXATTACHMEMORYNVPROC :: #type (target: GLenum, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLBUFFERATTACHMEMORYNVPROC :: #type (target: GLenum, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLTEXTUREATTACHMEMORYNVPROC :: #type (texture: GLuint, memory: GLuint, offset: GLuint64) -> void #c_call;
PFNGLNAMEDBUFFERATTACHMEMORYNVPROC :: #type (buffer: GLuint, memory: GLuint, offset: GLuint64) -> void #c_call;

PFNGLBUFFERPAGECOMMITMENTMEMNVPROC :: #type (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLTEXPAGECOMMITMENTMEMNVPROC :: #type (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC :: #type (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) -> void #c_call;
PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC :: #type (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) -> void #c_call;

PFNGLDRAWMESHTASKSNVPROC :: #type (first: GLuint, count: GLuint) -> void #c_call;
PFNGLDRAWMESHTASKSINDIRECTNVPROC :: #type (indirect: GLintptr) -> void #c_call;
PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC :: #type (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) -> void #c_call;
PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC :: #type (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> void #c_call;

PFNGLUNIFORMMATRIX2X3FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X2FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX2X4FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X2FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X4FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X3FVNVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;

GLdouble :: float64;

PFNGLGENPATHSNVPROC :: #type (range: GLsizei) -> GLuint #c_call;
PFNGLDELETEPATHSNVPROC :: #type (path: GLuint, range: GLsizei) -> void #c_call;
PFNGLISPATHNVPROC :: #type (path: GLuint) -> GLboolean #c_call;
PFNGLPATHCOMMANDSNVPROC :: #type (path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHCOORDSNVPROC :: #type (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSUBCOMMANDSNVPROC :: #type (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSUBCOORDSNVPROC :: #type (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *void) -> void #c_call;
PFNGLPATHSTRINGNVPROC :: #type (path: GLuint, format: GLenum, length: GLsizei, pathString: *void) -> void #c_call;
PFNGLPATHGLYPHSNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: *void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> void #c_call;
PFNGLPATHGLYPHRANGENVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> void #c_call;
PFNGLWEIGHTPATHSNVPROC :: #type (resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> void #c_call;
PFNGLCOPYPATHNVPROC :: #type (resultPath: GLuint, srcPath: GLuint) -> void #c_call;
PFNGLINTERPOLATEPATHSNVPROC :: #type (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> void #c_call;
PFNGLTRANSFORMPATHNVPROC :: #type (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHPARAMETERIVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLint) -> void #c_call;
PFNGLPATHPARAMETERINVPROC :: #type (path: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLPATHPARAMETERFVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLfloat) -> void #c_call;
PFNGLPATHPARAMETERFNVPROC :: #type (path: GLuint, pname: GLenum, value: GLfloat) -> void #c_call;
PFNGLPATHDASHARRAYNVPROC :: #type (path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> void #c_call;
PFNGLPATHSTENCILFUNCNVPROC :: #type (func: GLenum, ref: GLint, mask: GLuint) -> void #c_call;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC :: #type (factor: GLfloat, units: GLfloat) -> void #c_call;
PFNGLSTENCILFILLPATHNVPROC :: #type (path: GLuint, fillMode: GLenum, mask: GLuint) -> void #c_call;
PFNGLSTENCILSTROKEPATHNVPROC :: #type (path: GLuint, reference: GLint, mask: GLuint) -> void #c_call;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHCOVERDEPTHFUNCNVPROC :: #type (func: GLenum) -> void #c_call;
PFNGLCOVERFILLPATHNVPROC :: #type (path: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLCOVERSTROKEPATHNVPROC :: #type (path: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLCOVERFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLGETPATHPARAMETERIVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLint) -> void #c_call;
PFNGLGETPATHPARAMETERFVNVPROC :: #type (path: GLuint, pname: GLenum, value: *GLfloat) -> void #c_call;
PFNGLGETPATHCOMMANDSNVPROC :: #type (path: GLuint, commands: *GLubyte) -> void #c_call;
PFNGLGETPATHCOORDSNVPROC :: #type (path: GLuint, coords: *GLfloat) -> void #c_call;
PFNGLGETPATHDASHARRAYNVPROC :: #type (path: GLuint, dashArray: *GLfloat) -> void #c_call;
PFNGLGETPATHMETRICSNVPROC :: #type (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> void #c_call;
PFNGLGETPATHMETRICRANGENVPROC :: #type (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> void #c_call;
PFNGLGETPATHSPACINGNVPROC :: #type (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> void #c_call;
PFNGLISPOINTINFILLPATHNVPROC :: #type (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
PFNGLISPOINTINSTROKEPATHNVPROC :: #type (path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
PFNGLGETPATHLENGTHNVPROC :: #type (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat #c_call;
PFNGLPOINTALONGPATHNVPROC :: #type (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean #c_call;
PFNGLMATRIXLOAD3X2FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOAD3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULT3X2FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULT3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC :: #type (matrixMode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC :: #type (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC :: #type (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) -> void #c_call;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC :: #type (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> void #c_call;
PFNGLPATHGLYPHINDEXRANGENVPROC :: #type (fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: *GLuint) -> GLenum #c_call;
PFNGLPATHGLYPHINDEXARRAYNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC :: #type (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC :: #type (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> void #c_call;
PFNGLGETPROGRAMRESOURCEFVNVPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, count: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLMATRIXFRUSTUMEXTPROC :: #type (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #c_call;
PFNGLMATRIXLOADIDENTITYEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXLOADFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXLOADDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXMULTFEXTPROC :: #type (mode: GLenum, m: *GLfloat) -> void #c_call;
PFNGLMATRIXMULTDEXTPROC :: #type (mode: GLenum, m: *GLdouble) -> void #c_call;
PFNGLMATRIXORTHOEXTPROC :: #type (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #c_call;
PFNGLMATRIXPOPEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLMATRIXPUSHEXTPROC :: #type (mode: GLenum) -> void #c_call;
PFNGLMATRIXROTATEFEXTPROC :: #type (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXROTATEDEXTPROC :: #type (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLMATRIXSCALEFEXTPROC :: #type (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXSCALEDEXTPROC :: #type (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;
PFNGLMATRIXTRANSLATEFEXTPROC :: #type (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> void #c_call;
PFNGLMATRIXTRANSLATEDEXTPROC :: #type (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> void #c_call;

PFNGLPOLYGONMODENVPROC :: #type (face: GLenum, mode: GLenum) -> void #c_call;

PFNGLREADBUFFERNVPROC :: #type (mode: GLenum) -> void #c_call;

PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC :: #type (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC :: #type (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLRESOLVEDEPTHVALUESNVPROC :: #type () -> void #c_call;

PFNGLSCISSOREXCLUSIVENVPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSCISSOREXCLUSIVEARRAYVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLint) -> void #c_call;

PFNGLBINDSHADINGRATEIMAGENVPROC :: #type (texture: GLuint) -> void #c_call;
PFNGLGETSHADINGRATEIMAGEPALETTENVPROC :: #type (viewport: GLuint, entry: GLuint, rate: *GLenum) -> void #c_call;
PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC :: #type (rate: GLenum, samples: GLuint, index: GLuint, location: *GLint) -> void #c_call;
PFNGLSHADINGRATEIMAGEBARRIERNVPROC :: #type (synchronize: GLboolean) -> void #c_call;
PFNGLSHADINGRATEIMAGEPALETTENVPROC :: #type (viewport: GLuint, first: GLuint, count: GLsizei, rates: *GLenum) -> void #c_call;
PFNGLSHADINGRATESAMPLEORDERNVPROC :: #type (order: GLenum) -> void #c_call;
PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC :: #type (rate: GLenum, samples: GLuint, locations: *GLint) -> void #c_call;

PFNGLTEXTUREBARRIERNVPROC :: #type () -> void #c_call;

PFNGLCREATESEMAPHORESNVPROC :: #type (n: GLsizei, semaphores: *GLuint) -> void #c_call;
PFNGLSEMAPHOREPARAMETERIVNVPROC :: #type (semaphore: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSEMAPHOREPARAMETERIVNVPROC :: #type (semaphore: GLuint, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLVIEWPORTARRAYVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFNVPROC :: #type (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> void #c_call;
PFNGLVIEWPORTINDEXEDFVNVPROC :: #type (index: GLuint, v: *GLfloat) -> void #c_call;
PFNGLSCISSORARRAYVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLint) -> void #c_call;
PFNGLSCISSORINDEXEDNVPROC :: #type (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLSCISSORINDEXEDVNVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLDEPTHRANGEARRAYFVNVPROC :: #type (first: GLuint, count: GLsizei, v: *GLfloat) -> void #c_call;
PFNGLDEPTHRANGEINDEXEDFNVPROC :: #type (index: GLuint, n: GLfloat, f: GLfloat) -> void #c_call;
PFNGLGETFLOATI_VNVPROC :: #type (target: GLenum, index: GLuint, data: *GLfloat) -> void #c_call;
PFNGLENABLEINVPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEINVPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLISENABLEDINVPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;

PFNGLVIEWPORTSWIZZLENVPROC :: #type (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) -> void #c_call;

PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) -> void #c_call;
PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC :: #type (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) -> void #c_call;

PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, samples: GLsizei, baseViewIndex: GLint, numViews: GLsizei) -> void #c_call;

PFNGLALPHAFUNCQCOMPROC :: #type (func: GLenum, ref: GLclampf) -> void #c_call;

PFNGLGETDRIVERCONTROLSQCOMPROC :: #type (num: *GLint, size: GLsizei, driverControls: *GLuint) -> void #c_call;
PFNGLGETDRIVERCONTROLSTRINGQCOMPROC :: #type (driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> void #c_call;
PFNGLENABLEDRIVERCONTROLQCOMPROC :: #type (driverControl: GLuint) -> void #c_call;
PFNGLDISABLEDRIVERCONTROLQCOMPROC :: #type (driverControl: GLuint) -> void #c_call;

PFNGLEXTGETTEXTURESQCOMPROC :: #type (textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> void #c_call;
PFNGLEXTGETBUFFERSQCOMPROC :: #type (buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> void #c_call;
PFNGLEXTGETRENDERBUFFERSQCOMPROC :: #type (renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> void #c_call;
PFNGLEXTGETFRAMEBUFFERSQCOMPROC :: #type (framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> void #c_call;
PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC :: #type (texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLEXTGETTEXSUBIMAGEQCOMPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, texels: *void) -> void #c_call;
PFNGLEXTGETBUFFERPOINTERVQCOMPROC :: #type (target: GLenum, params: **void) -> void #c_call;

PFNGLEXTGETSHADERSQCOMPROC :: #type (shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> void #c_call;
PFNGLEXTGETPROGRAMSQCOMPROC :: #type (programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> void #c_call;
PFNGLEXTISPROGRAMBINARYQCOMPROC :: #type (program: GLuint) -> GLboolean #c_call;
PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC :: #type (program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> void #c_call;

PFNGLEXTRAPOLATETEX2DQCOMPROC :: #type (src1: GLuint, src2: GLuint, output: GLuint, scaleFactor: GLfloat) -> void #c_call;

PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC :: #type (framebuffer: GLuint, numLayers: GLuint, focalPointsPerLayer: GLuint, requestedFeatures: GLuint, providedFeatures: *GLuint) -> void #c_call;
PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC :: #type (framebuffer: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) -> void #c_call;

PFNGLTEXESTIMATEMOTIONQCOMPROC :: #type (ref: GLuint, target: GLuint, output: GLuint) -> void #c_call;
PFNGLTEXESTIMATEMOTIONREGIONSQCOMPROC :: #type (ref: GLuint, target: GLuint, output: GLuint, mask: GLuint) -> void #c_call;

PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC :: #type () -> void #c_call;

PFNGLSHADINGRATEQCOMPROC :: #type (rate: GLenum) -> void #c_call;

PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC :: #type (texture: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) -> void #c_call;

PFNGLSTARTTILINGQCOMPROC :: #type (x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> void #c_call;
PFNGLENDTILINGQCOMPROC :: #type (preserveMask: GLbitfield) -> void #c_call;

PFNGLREQUESTEXTENSIONANGLEPROC :: #type (name: *GLchar) -> void #c_call;
PFNGLDISABLEEXTENSIONANGLEPROC :: #type (name: *GLchar) -> void #c_call;

PFNGLPOLYGONMODEANGLEPROC :: #type (face: GLenum, mode: GLenum) -> void #c_call;

PFNGLPROVOKINGVERTEXANGLEPROC :: #type (unknown0: GLenum) -> void #c_call;

PFNGLCOVERAGEMODULATIONCHROMIUMPROC :: #type (components: GLenum) -> void #c_call;

PFNGLCOPYTEXTURECHROMIUMPROC :: #type (sourceId: GLuint, sourceLevel: GLint, destTarget: GLenum, destId: GLuint, destLevel: GLint, internalFormat: GLint, destType: GLenum, unpackFlipY: GLboolean, unpackPremultiplyAlpha: GLboolean, unpackUnmultiplyAlpha: GLboolean) -> void #c_call;

PFNGLCOPYSUBTEXTURECHROMIUMPROC :: #type (sourceId: GLuint, sourceLevel: GLint, destTarget: GLenum, destId: GLuint, destLevel: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei, unpackFlipY: GLboolean, unpackPremultiplyAlpha: GLboolean, unpackUnmultiplyAlpha: GLboolean) -> void #c_call;

PFNGLCOMPRESSEDCOPYTEXTURECHROMIUMPROC :: #type (sourceId: GLuint, destId: GLuint) -> void #c_call;

PFNGLCOPYTEXTURE3DANGLEPROC :: #type (sourceId: GLuint, sourceLevel: GLint, destTarget: GLenum, destId: GLuint, destLevel: GLint, internalFormat: GLint, destType: GLenum, unpackFlipY: GLboolean, unpackPremultiplyAlpha: GLboolean, unpackUnmultiplyAlpha: GLboolean) -> void #c_call;

PFNGLCOPYSUBTEXTURE3DANGLEPROC :: #type (sourceId: GLuint, sourceLevel: GLint, destTarget: GLenum, destId: GLuint, destLevel: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, z: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, unpackFlipY: GLboolean, unpackPremultiplyAlpha: GLboolean, unpackUnmultiplyAlpha: GLboolean) -> void #c_call;

PFNGLGETBOOLEANVROBUSTANGLEPROC :: #type (pname: GLenum, bufSize: GLsizei, length: *GLsizei, data: *GLboolean) -> void #c_call;
PFNGLGETBUFFERPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETFLOATVROBUSTANGLEPROC :: #type (pname: GLenum, bufSize: GLsizei, length: *GLsizei, data: *GLfloat) -> void #c_call;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, attachment: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETINTEGERVROBUSTANGLEPROC :: #type (pname: GLenum, bufSize: GLsizei, length: *GLsizei, data: *GLint) -> void #c_call;
PFNGLGETPROGRAMIVROBUSTANGLEPROC :: #type (program: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETRENDERBUFFERPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETSHADERIVROBUSTANGLEPROC :: #type (shader: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERFVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETTEXPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETUNIFORMFVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETUNIFORMIVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBFVROBUSTANGLEPROC :: #type (index: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETVERTEXATTRIBIVROBUSTANGLEPROC :: #type (index: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBPOINTERVROBUSTANGLEPROC :: #type (index: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, pointer: **void) -> void #c_call;
PFNGLREADPIXELSROBUSTANGLEPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, length: *GLsizei, columns: *GLsizei, rows: *GLsizei, pixels: *void) -> void #c_call;
PFNGLTEXIMAGE2DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLTEXPARAMETERFVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLTEXPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLTEXSUBIMAGE2DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLTEXIMAGE3DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLTEXSUBIMAGE3DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE2DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE2DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE3DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE3DROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETQUERYIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTUIVROBUSTANGLEPROC :: #type (id: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETBUFFERPOINTERVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: **void) -> void #c_call;
PFNGLGETINTEGERI_VROBUSTANGLEPROC :: #type (target: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, data: *GLint) -> void #c_call;
PFNGLGETINTERNALFORMATIVROBUSTANGLEPROC :: #type (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBIIVROBUSTANGLEPROC :: #type (index: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBIUIVROBUSTANGLEPROC :: #type (index: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETUNIFORMUIVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETACTIVEUNIFORMBLOCKIVROBUSTANGLEPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETINTEGER64VROBUSTANGLEPROC :: #type (pname: GLenum, bufSize: GLsizei, length: *GLsizei, data: *GLint64) -> void #c_call;
PFNGLGETINTEGER64I_VROBUSTANGLEPROC :: #type (target: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, data: *GLint64) -> void #c_call;
PFNGLGETBUFFERPARAMETERI64VROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint64) -> void #c_call;
PFNGLSAMPLERPARAMETERIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERFVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, param: *GLfloat) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERFVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMINTERFACEIVROBUSTANGLEPROC :: #type (program: GLuint, programInterface: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETBOOLEANI_VROBUSTANGLEPROC :: #type (target: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, data: *GLboolean) -> void #c_call;
PFNGLGETMULTISAMPLEFVROBUSTANGLEPROC :: #type (pname: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, val: *GLfloat) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERIVROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERFVROBUSTANGLEPROC :: #type (target: GLenum, level: GLint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETPOINTERVROBUSTANGLEROBUSTANGLEPROC :: #type (pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: **void) -> void #c_call;
PFNGLREADNPIXELSROBUSTANGLEPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, length: *GLsizei, columns: *GLsizei, rows: *GLsizei, data: *void) -> void #c_call;
PFNGLGETNUNIFORMFVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETNUNIFORMUIVROBUSTANGLEPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLTEXPARAMETERIIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLTEXPARAMETERIUIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETTEXPARAMETERIIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERIUIVROBUSTANGLEPROC :: #type (target: GLenum, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIUIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, param: *GLuint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIUIVROBUSTANGLEPROC :: #type (sampler: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLuint) -> void #c_call;
PFNGLGETQUERYOBJECTIVROBUSTANGLEPROC :: #type (id: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTI64VROBUSTANGLEPROC :: #type (id: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint64) -> void #c_call;
PFNGLGETQUERYOBJECTUI64VROBUSTANGLEPROC :: #type (id: GLuint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLuint64) -> void #c_call;

/* The following two are introduced by GL_ANGLE_shader_pixel_local_storage */
PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGEPARAMETERFVROBUSTANGLEPROC :: #type (plane: GLint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGEPARAMETERIVROBUSTANGLEPROC :: #type (plane: GLint, pname: GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;

PFNGLTEXSTORAGE2DMULTISAMPLEANGLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLGETMULTISAMPLEFVANGLEPROC :: #type (pname: GLenum, index: GLuint, val: *GLfloat) -> void #c_call;
PFNGLSAMPLEMASKIANGLEPROC :: #type (maskNumber: GLuint, mask: GLbitfield) -> void #c_call;

PFNGLGETTEXLEVELPARAMETERFVANGLEPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERIVANGLEPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLMULTIDRAWARRAYSANGLEPROC :: #type (mode: GLenum, firsts: *GLint, counts: *GLsizei, drawcount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWARRAYSINSTANCEDANGLEPROC :: #type (mode: GLenum, firsts: *GLint, counts: *GLsizei, instanceCounts: *GLsizei, drawcount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSANGLEPROC :: #type (mode: GLenum, counts: *GLsizei, type: GLenum, indices: **GLvoid, drawcount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINSTANCEDANGLEPROC :: #type (mode: GLenum, counts: *GLsizei, type: GLenum, indices: **GLvoid, instanceCounts: *GLsizei, drawcount: GLsizei) -> void #c_call;

PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei, baseInstance: GLuint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *GLvoid, instanceCount: GLsizei, baseVertex: GLint, baseInstance: GLuint) -> void #c_call;
PFNGLMULTIDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC :: #type (mode: GLenum, firsts: *GLsizei, counts: *GLsizei, instanceCounts: *GLsizei, baseInstances: *GLuint, drawCount: GLsizei) -> void #c_call;
PFNGLMULTIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC :: #type (mode: GLenum, counts: *GLsizei, type: GLenum, indices: **GLvoid, instanceCounts: *GLsizei, baseVertices: *GLint, baseInstances: *GLuint, drawCount: GLsizei) -> void #c_call;

PFNGLBINDUNIFORMLOCATIONCHROMIUMPROC :: #type (program: GLuint, location: GLint, name: *GLchar) -> void #c_call;

PFNGLLOSECONTEXTCHROMIUMPROC :: #type (current: GLenum, other: GLenum) -> void #c_call;

PFNGLTEXIMAGE2DEXTERNALANGLEPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum) -> void #c_call;
PFNGLINVALIDATETEXTUREANGLEPROC :: #type (target: GLenum) -> void #c_call;

PFNGLGETTEXIMAGEANGLEPROC :: #type (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLGETCOMPRESSEDTEXIMAGEANGLEPROC :: #type (target: GLenum, level: GLint, pixels: *void) -> void #c_call;
PFNGLGETRENDERBUFFERIMAGEANGLEPROC :: #type (target: GLenum, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;

PFNGLTEXSTORAGEMEMFLAGS2DANGLEPROC :: #type (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64, createFlags: GLbitfield, usageFlags: GLbitfield, imageCreateInfoPNext: *void) -> void #c_call;
PFNGLTEXSTORAGEMEMFLAGS2DMULTISAMPLEANGLEPROC :: #type (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64, createFlags: GLbitfield, usageFlags: GLbitfield, imageCreateInfoPNext: *void) -> void #c_call;
PFNGLTEXSTORAGEMEMFLAGS3DANGLEPROC :: #type (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, createFlags: GLbitfield, usageFlags: GLbitfield, imageCreateInfoPNext: *void) -> void #c_call;
PFNGLTEXSTORAGEMEMFLAGS3DMULTISAMPLEANGLEPROC :: #type (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64, createFlags: GLbitfield, usageFlags: GLbitfield, imageCreateInfoPNext: *void) -> void #c_call;

PFNGLIMPORTMEMORYZIRCONHANDLEANGLEPROC :: #type (memory: GLuint, size: GLuint64, handleType: GLenum, handle: GLuint) -> void #c_call;

PFNGLIMPORTSEMAPHOREZIRCONHANDLEANGLEPROC :: #type (semaphore: GLuint, handleType: GLenum, handle: GLuint) -> void #c_call;

PFNGLACQUIRETEXTURESANGLEPROC :: #type (numTexture: GLuint, textures: *GLuint, layouts: *GLenum) -> void #c_call;
PFNGLRELEASETEXTURESANGLEPROC :: #type (numTexture: GLuint, textures: *GLuint, layouts: *GLenum) -> void #c_call;

PFNGLFRAMEBUFFERMEMORYLESSPIXELLOCALSTORAGEANGLEPROC :: #type (plane: GLint, internalformat: GLenum) -> void #c_call;
PFNGLFRAMEBUFFERTEXTUREPIXELLOCALSTORAGEANGLEPROC :: #type (plane: GLint, backingtexture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLFRAMEBUFFERPIXELLOCALCLEARVALUEFVANGLEPROC :: #type (plane: GLint, value: *GLfloat) -> void #c_call;
PFNGLFRAMEBUFFERPIXELLOCALCLEARVALUEIVANGLEPROC :: #type (plane: GLint, value: *GLint) -> void #c_call;
PFNGLFRAMEBUFFERPIXELLOCALCLEARVALUEUIVANGLEPROC :: #type (plane: GLint, value: *GLuint) -> void #c_call;
PFNGLBEGINPIXELLOCALSTORAGEANGLEPROC :: #type (n: GLsizei, loadops: *GLenum) -> void #c_call;
PFNGLENDPIXELLOCALSTORAGEANGLEPROC :: #type (n: GLsizei, storeops: *GLenum) -> void #c_call;
PFNGLPIXELLOCALSTORAGEBARRIERANGLEPROC :: #type () -> void #c_call;
PFNGLFRAMEBUFFERPIXELLOCALSTORAGEINTERRUPTANGLEPROC :: #type () -> void #c_call;
PFNGLFRAMEBUFFERPIXELLOCALSTORAGERESTOREANGLEPROC :: #type () -> void #c_call;
PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGEPARAMETERFVANGLEPROC :: #type (plane: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGEPARAMETERIVANGLEPROC :: #type (plane: GLint, pname: GLenum, params: *GLint) -> void #c_call;

PFNGLLOGICOPANGLEPROC :: #type (unknown0: GLenum) -> void #c_call;

GLGETBLOBPROCANGLE :: #type (key: *void, keySize: GLsizeiptr, value: *void, valueSize: GLsizeiptr, userParam: *void) -> GLsizeiptr #c_call;
GLSETBLOBPROCANGLE :: #type (key: *void, keySize: GLsizeiptr, value: *void, valueSize: GLsizeiptr, userParam: *void) -> void #c_call;

PFNGLBLOBCACHECALLBACKSANGLEPROC :: #type (unknown0: GLSETBLOBPROCANGLE, unknown1: GLGETBLOBPROCANGLE, unknown2: *void) -> void #c_call;
PFNGLGETPOINTERVANGLEPROC :: #type (pname: GLenum, params: **void) -> void #c_call;

GLhalf :: u16;

PFNGLREADBUFFERPROC :: #type (src: GLenum) -> void #c_call;
PFNGLDRAWRANGEELEMENTSPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) -> void #c_call;
PFNGLTEXIMAGE3DPROC :: #type (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #c_call;
PFNGLCOPYTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLCOMPRESSEDTEXIMAGE3DPROC :: #type (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC :: #type (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #c_call;
PFNGLGENQUERIESPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLDELETEQUERIESPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLISQUERYPROC :: #type (id: GLuint) -> GLboolean #c_call;
PFNGLBEGINQUERYPROC :: #type (target: GLenum, id: GLuint) -> void #c_call;
PFNGLENDQUERYPROC :: #type (target: GLenum) -> void #c_call;
PFNGLGETQUERYIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETQUERYOBJECTUIVPROC :: #type (id: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLUNMAPBUFFERPROC :: #type (target: GLenum) -> GLboolean #c_call;
PFNGLGETBUFFERPOINTERVPROC :: #type (target: GLenum, pname: GLenum, params: **void) -> void #c_call;
PFNGLDRAWBUFFERSPROC :: #type (n: GLsizei, bufs: *GLenum) -> void #c_call;
PFNGLUNIFORMMATRIX2X3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX2X4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X2FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX3X4FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLUNIFORMMATRIX4X3FVPROC :: #type (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLBLITFRAMEBUFFERPROC :: #type (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #c_call;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLFRAMEBUFFERTEXTURELAYERPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #c_call;
PFNGLMAPBUFFERRANGEPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC :: #type (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void #c_call;
PFNGLBINDVERTEXARRAYPROC :: #type (array: GLuint) -> void #c_call;
PFNGLDELETEVERTEXARRAYSPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLGENVERTEXARRAYSPROC :: #type (n: GLsizei, arrays: *GLuint) -> void #c_call;
PFNGLISVERTEXARRAYPROC :: #type (array: GLuint) -> GLboolean #c_call;
PFNGLGETINTEGERI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLint) -> void #c_call;
PFNGLBEGINTRANSFORMFEEDBACKPROC :: #type (primitiveMode: GLenum) -> void #c_call;
PFNGLENDTRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLBINDBUFFERRANGEPROC :: #type (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLBINDBUFFERBASEPROC :: #type (target: GLenum, index: GLuint, buffer: GLuint) -> void #c_call;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC :: #type (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> void #c_call;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC :: #type (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) -> void #c_call;
PFNGLVERTEXATTRIBIPOINTERPROC :: #type (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) -> void #c_call;
PFNGLGETVERTEXATTRIBIIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETVERTEXATTRIBIUIVPROC :: #type (index: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI4IPROC :: #type (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void #c_call;
PFNGLVERTEXATTRIBI4UIPROC :: #type (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBI4IVPROC :: #type (index: GLuint, v: *GLint) -> void #c_call;
PFNGLVERTEXATTRIBI4UIVPROC :: #type (index: GLuint, v: *GLuint) -> void #c_call;
PFNGLGETUNIFORMUIVPROC :: #type (program: GLuint, location: GLint, params: *GLuint) -> void #c_call;
PFNGLGETFRAGDATALOCATIONPROC :: #type (program: GLuint, name: *GLchar) -> GLint #c_call;
PFNGLUNIFORM1UIPROC :: #type (location: GLint, v0: GLuint) -> void #c_call;
PFNGLUNIFORM2UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLUNIFORM3UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLUNIFORM4UIPROC :: #type (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLUNIFORM1UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM2UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM3UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLUNIFORM4UIVPROC :: #type (location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLCLEARBUFFERIVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLint) -> void #c_call;
PFNGLCLEARBUFFERUIVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> void #c_call;
PFNGLCLEARBUFFERFVPROC :: #type (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> void #c_call;
PFNGLCLEARBUFFERFIPROC :: #type (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void #c_call;
PFNGLGETSTRINGIPROC :: #type (name: GLenum, index: GLuint) -> *GLubyte #c_call;
PFNGLCOPYBUFFERSUBDATAPROC :: #type (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLGETUNIFORMINDICESPROC :: #type (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> void #c_call;
PFNGLGETACTIVEUNIFORMSIVPROC :: #type (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETUNIFORMBLOCKINDEXPROC :: #type (program: GLuint, uniformBlockName: *GLchar) -> GLuint #c_call;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> void #c_call;
PFNGLUNIFORMBLOCKBINDINGPROC :: #type (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void #c_call;
PFNGLDRAWARRAYSINSTANCEDPROC :: #type (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) -> void #c_call;
PFNGLFENCESYNCPROC :: #type (condition: GLenum, flags: GLbitfield) -> GLsync #c_call;
PFNGLISSYNCPROC :: #type (sync: GLsync) -> GLboolean #c_call;
PFNGLDELETESYNCPROC :: #type (sync: GLsync) -> void #c_call;
PFNGLCLIENTWAITSYNCPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #c_call;
PFNGLWAITSYNCPROC :: #type (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void #c_call;
PFNGLGETINTEGER64VPROC :: #type (pname: GLenum, data: *GLint64) -> void #c_call;
PFNGLGETSYNCIVPROC :: #type (sync: GLsync, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) -> void #c_call;
PFNGLGETINTEGER64I_VPROC :: #type (target: GLenum, index: GLuint, data: *GLint64) -> void #c_call;
PFNGLGETBUFFERPARAMETERI64VPROC :: #type (target: GLenum, pname: GLenum, params: *GLint64) -> void #c_call;

PFNGLVERTEXATTRIBDIVISORPROC :: #type (index: GLuint, divisor: GLuint) -> void #c_call;
PFNGLBINDTRANSFORMFEEDBACKPROC :: #type (target: GLenum, id: GLuint) -> void #c_call;
PFNGLDELETETRANSFORMFEEDBACKSPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLGENTRANSFORMFEEDBACKSPROC :: #type (n: GLsizei, ids: *GLuint) -> void #c_call;
PFNGLISTRANSFORMFEEDBACKPROC :: #type (id: GLuint) -> GLboolean #c_call;
PFNGLPAUSETRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLRESUMETRANSFORMFEEDBACKPROC :: #type () -> void #c_call;
PFNGLGETPROGRAMBINARYPROC :: #type (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) -> void #c_call;
PFNGLPROGRAMBINARYPROC :: #type (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #c_call;
PFNGLPROGRAMPARAMETERIPROC :: #type (program: GLuint, pname: GLenum, value: GLint) -> void #c_call;
PFNGLINVALIDATEFRAMEBUFFERPROC :: #type (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> void #c_call;
PFNGLINVALIDATESUBFRAMEBUFFERPROC :: #type (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE2DPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #c_call;
PFNGLTEXSTORAGE3DPROC :: #type (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #c_call;
PFNGLGETINTERNALFORMATIVPROC :: #type (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint) -> void #c_call;

glReadBuffer :: (src: GLenum) -> void #foreign angle;
glDrawRangeElements :: (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) -> void #foreign angle;
glTexImage3D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) -> void #foreign angle;
glTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) -> void #foreign angle;
glCopyTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #foreign angle;
glCompressedTexImage3D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) -> void #foreign angle;
glCompressedTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) -> void #foreign angle;
glGenQueries :: (n: GLsizei, ids: *GLuint) -> void #foreign angle;
glDeleteQueries :: (n: GLsizei, ids: *GLuint) -> void #foreign angle;
glIsQuery :: (id: GLuint) -> GLboolean #foreign angle;
glBeginQuery :: (target: GLenum, id: GLuint) -> void #foreign angle;
glEndQuery :: (target: GLenum) -> void #foreign angle;
glGetQueryiv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetQueryObjectuiv :: (id: GLuint, pname: GLenum, params: *GLuint) -> void #foreign angle;
glUnmapBuffer :: (target: GLenum) -> GLboolean #foreign angle;
glGetBufferPointerv :: (target: GLenum, pname: GLenum, params: **void) -> void #foreign angle;
glDrawBuffers :: (n: GLsizei, bufs: *GLenum) -> void #foreign angle;
glUniformMatrix2x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix3x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix2x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix4x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix3x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glUniformMatrix4x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glBlitFramebuffer :: (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void #foreign angle;
glRenderbufferStorageMultisample :: (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #foreign angle;
glFramebufferTextureLayer :: (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void #foreign angle;
glMapBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #foreign angle;
glFlushMappedBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void #foreign angle;
glBindVertexArray :: (array: GLuint) -> void #foreign angle;
glDeleteVertexArrays :: (n: GLsizei, arrays: *GLuint) -> void #foreign angle;
glGenVertexArrays :: (n: GLsizei, arrays: *GLuint) -> void #foreign angle;
glIsVertexArray :: (array: GLuint) -> GLboolean #foreign angle;
glGetIntegeri_v :: (target: GLenum, index: GLuint, data: *GLint) -> void #foreign angle;
glBeginTransformFeedback :: (primitiveMode: GLenum) -> void #foreign angle;
glEndTransformFeedback :: () -> void #foreign angle;
glBindBufferRange :: (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #foreign angle;
glBindBufferBase :: (target: GLenum, index: GLuint, buffer: GLuint) -> void #foreign angle;
glTransformFeedbackVaryings :: (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> void #foreign angle;
glGetTransformFeedbackVarying :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) -> void #foreign angle;
glVertexAttribIPointer :: (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) -> void #foreign angle;
glGetVertexAttribIiv :: (index: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetVertexAttribIuiv :: (index: GLuint, pname: GLenum, params: *GLuint) -> void #foreign angle;
glVertexAttribI4i :: (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void #foreign angle;
glVertexAttribI4ui :: (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void #foreign angle;
glVertexAttribI4iv :: (index: GLuint, v: *GLint) -> void #foreign angle;
glVertexAttribI4uiv :: (index: GLuint, v: *GLuint) -> void #foreign angle;
glGetUniformuiv :: (program: GLuint, location: GLint, params: *GLuint) -> void #foreign angle;
glGetFragDataLocation :: (program: GLuint, name: *GLchar) -> GLint #foreign angle;
glUniform1ui :: (location: GLint, v0: GLuint) -> void #foreign angle;
glUniform2ui :: (location: GLint, v0: GLuint, v1: GLuint) -> void #foreign angle;
glUniform3ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #foreign angle;
glUniform4ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #foreign angle;
glUniform1uiv :: (location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glUniform2uiv :: (location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glUniform3uiv :: (location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glUniform4uiv :: (location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glClearBufferiv :: (buffer: GLenum, drawbuffer: GLint, value: *GLint) -> void #foreign angle;
glClearBufferuiv :: (buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> void #foreign angle;
glClearBufferfv :: (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> void #foreign angle;
glClearBufferfi :: (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void #foreign angle;
glGetStringi :: (name: GLenum, index: GLuint) -> *GLubyte #foreign angle;
glCopyBufferSubData :: (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void #foreign angle;
glGetUniformIndices :: (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> void #foreign angle;
glGetActiveUniformsiv :: (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetUniformBlockIndex :: (program: GLuint, uniformBlockName: *GLchar) -> GLuint #foreign angle;
glGetActiveUniformBlockiv :: (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetActiveUniformBlockName :: (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> void #foreign angle;
glUniformBlockBinding :: (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void #foreign angle;
glDrawArraysInstanced :: (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void #foreign angle;
glDrawElementsInstanced :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) -> void #foreign angle;
glFenceSync :: (condition: GLenum, flags: GLbitfield) -> GLsync #foreign angle;
glIsSync :: (sync: GLsync) -> GLboolean #foreign angle;
glDeleteSync :: (sync: GLsync) -> void #foreign angle;
glClientWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #foreign angle;
glWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void #foreign angle;
glGetInteger64v :: (pname: GLenum, data: *GLint64) -> void #foreign angle;
glGetSynciv :: (sync: GLsync, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) -> void #foreign angle;
glGetInteger64i_v :: (target: GLenum, index: GLuint, data: *GLint64) -> void #foreign angle;
glGetBufferParameteri64v :: (target: GLenum, pname: GLenum, params: *GLint64) -> void #foreign angle;
glGenSamplers :: (count: GLsizei, samplers: *GLuint) -> void #foreign angle;
glDeleteSamplers :: (count: GLsizei, samplers: *GLuint) -> void #foreign angle;
glIsSampler :: (sampler: GLuint) -> GLboolean #foreign angle;
glBindSampler :: (unit: GLuint, sampler: GLuint) -> void #foreign angle;
glSamplerParameteri :: (sampler: GLuint, pname: GLenum, param: GLint) -> void #foreign angle;
glSamplerParameteriv :: (sampler: GLuint, pname: GLenum, param: *GLint) -> void #foreign angle;
glSamplerParameterf :: (sampler: GLuint, pname: GLenum, param: GLfloat) -> void #foreign angle;
glSamplerParameterfv :: (sampler: GLuint, pname: GLenum, param: *GLfloat) -> void #foreign angle;
glGetSamplerParameteriv :: (sampler: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetSamplerParameterfv :: (sampler: GLuint, pname: GLenum, params: *GLfloat) -> void #foreign angle;
glVertexAttribDivisor :: (index: GLuint, divisor: GLuint) -> void #foreign angle;
glBindTransformFeedback :: (target: GLenum, id: GLuint) -> void #foreign angle;
glDeleteTransformFeedbacks :: (n: GLsizei, ids: *GLuint) -> void #foreign angle;
glGenTransformFeedbacks :: (n: GLsizei, ids: *GLuint) -> void #foreign angle;
glIsTransformFeedback :: (id: GLuint) -> GLboolean #foreign angle;
glPauseTransformFeedback :: () -> void #foreign angle;
glResumeTransformFeedback :: () -> void #foreign angle;
glGetProgramBinary :: (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) -> void #foreign angle;
glProgramBinary :: (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) -> void #foreign angle;
glProgramParameteri :: (program: GLuint, pname: GLenum, value: GLint) -> void #foreign angle;
glInvalidateFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> void #foreign angle;
glInvalidateSubFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #foreign angle;
glTexStorage2D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void #foreign angle;
glTexStorage3D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void #foreign angle;
glGetInternalformativ :: (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint) -> void #foreign angle;

PFNGLDISPATCHCOMPUTEPROC :: #type (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> void #c_call;
PFNGLDISPATCHCOMPUTEINDIRECTPROC :: #type (indirect: GLintptr) -> void #c_call;
PFNGLDRAWARRAYSINDIRECTPROC :: #type (mode: GLenum, indirect: *void) -> void #c_call;
PFNGLDRAWELEMENTSINDIRECTPROC :: #type (mode: GLenum, type: GLenum, indirect: *void) -> void #c_call;
PFNGLFRAMEBUFFERPARAMETERIPROC :: #type (target: GLenum, pname: GLenum, param: GLint) -> void #c_call;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMINTERFACEIVPROC :: #type (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMRESOURCEINDEXPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #c_call;
PFNGLGETPROGRAMRESOURCENAMEPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> void #c_call;
PFNGLGETPROGRAMRESOURCEIVPROC :: #type (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #c_call;
PFNGLGETPROGRAMRESOURCELOCATIONPROC :: #type (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
PFNGLUSEPROGRAMSTAGESPROC :: #type (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void #c_call;
PFNGLACTIVESHADERPROGRAMPROC :: #type (pipeline: GLuint, program: GLuint) -> void #c_call;
PFNGLCREATESHADERPROGRAMVPROC :: #type (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
PFNGLBINDPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLDELETEPROGRAMPIPELINESPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLGENPROGRAMPIPELINESPROC :: #type (n: GLsizei, pipelines: *GLuint) -> void #c_call;
PFNGLISPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> GLboolean #c_call;
PFNGLGETPROGRAMPIPELINEIVPROC :: #type (pipeline: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1IPROC :: #type (program: GLuint, location: GLint, v0: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IPROC :: #type (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIPROC :: #type (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FPROC :: #type (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM1IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM2IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM3IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM4IVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #c_call;
PFNGLPROGRAMUNIFORM1UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM2UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM3UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM4UIVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #c_call;
PFNGLPROGRAMUNIFORM1FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORM4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC :: #type (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #c_call;
PFNGLVALIDATEPROGRAMPIPELINEPROC :: #type (pipeline: GLuint) -> void #c_call;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC :: #type (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #c_call;
PFNGLBINDIMAGETEXTUREPROC :: #type (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void #c_call;
PFNGLGETBOOLEANI_VPROC :: #type (target: GLenum, index: GLuint, data: *GLboolean) -> void #c_call;
PFNGLMEMORYBARRIERPROC :: #type (barriers: GLbitfield) -> void #c_call;
PFNGLMEMORYBARRIERBYREGIONPROC :: #type (barriers: GLbitfield) -> void #c_call;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;
PFNGLGETMULTISAMPLEFVPROC :: #type (pname: GLenum, index: GLuint, val: *GLfloat) -> void #c_call;
PFNGLSAMPLEMASKIPROC :: #type (maskNumber: GLuint, mask: GLbitfield) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERIVPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXLEVELPARAMETERFVPROC :: #type (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #c_call;
PFNGLBINDVERTEXBUFFERPROC :: #type (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void #c_call;
PFNGLVERTEXATTRIBFORMATPROC :: #type (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBIFORMATPROC :: #type (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #c_call;
PFNGLVERTEXATTRIBBINDINGPROC :: #type (attribindex: GLuint, bindingindex: GLuint) -> void #c_call;
PFNGLVERTEXBINDINGDIVISORPROC :: #type (bindingindex: GLuint, divisor: GLuint) -> void #c_call;

glDispatchCompute :: (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> void #foreign angle;
glDispatchComputeIndirect :: (indirect: GLintptr) -> void #foreign angle;
glDrawArraysIndirect :: (mode: GLenum, indirect: *void) -> void #foreign angle;
glDrawElementsIndirect :: (mode: GLenum, type: GLenum, indirect: *void) -> void #foreign angle;
glFramebufferParameteri :: (target: GLenum, pname: GLenum, param: GLint) -> void #foreign angle;
glGetFramebufferParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetProgramInterfaceiv :: (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetProgramResourceIndex :: (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #foreign angle;
glGetProgramResourceName :: (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> void #foreign angle;
glGetProgramResourceiv :: (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> void #foreign angle;
glGetProgramResourceLocation :: (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign angle;
glUseProgramStages :: (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void #foreign angle;
glActiveShaderProgram :: (pipeline: GLuint, program: GLuint) -> void #foreign angle;
glCreateShaderProgramv :: (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #foreign angle;
glBindProgramPipeline :: (pipeline: GLuint) -> void #foreign angle;
glDeleteProgramPipelines :: (n: GLsizei, pipelines: *GLuint) -> void #foreign angle;
glGenProgramPipelines :: (n: GLsizei, pipelines: *GLuint) -> void #foreign angle;
glIsProgramPipeline :: (pipeline: GLuint) -> GLboolean #foreign angle;
glGetProgramPipelineiv :: (pipeline: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glProgramUniform1i :: (program: GLuint, location: GLint, v0: GLint) -> void #foreign angle;
glProgramUniform2i :: (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void #foreign angle;
glProgramUniform3i :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void #foreign angle;
glProgramUniform4i :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void #foreign angle;
glProgramUniform1ui :: (program: GLuint, location: GLint, v0: GLuint) -> void #foreign angle;
glProgramUniform2ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void #foreign angle;
glProgramUniform3ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void #foreign angle;
glProgramUniform4ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void #foreign angle;
glProgramUniform1f :: (program: GLuint, location: GLint, v0: GLfloat) -> void #foreign angle;
glProgramUniform2f :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void #foreign angle;
glProgramUniform3f :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void #foreign angle;
glProgramUniform4f :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void #foreign angle;
glProgramUniform1iv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glProgramUniform2iv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glProgramUniform3iv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glProgramUniform4iv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> void #foreign angle;
glProgramUniform1uiv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glProgramUniform2uiv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glProgramUniform3uiv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glProgramUniform4uiv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> void #foreign angle;
glProgramUniform1fv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glProgramUniform2fv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glProgramUniform3fv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glProgramUniform4fv :: (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix2x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix3x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix2x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix4x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix3x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glProgramUniformMatrix4x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> void #foreign angle;
glValidateProgramPipeline :: (pipeline: GLuint) -> void #foreign angle;
glGetProgramPipelineInfoLog :: (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> void #foreign angle;
glBindImageTexture :: (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void #foreign angle;
glGetBooleani_v :: (target: GLenum, index: GLuint, data: *GLboolean) -> void #foreign angle;
glMemoryBarrier :: (barriers: GLbitfield) -> void #foreign angle;
glMemoryBarrierByRegion :: (barriers: GLbitfield) -> void #foreign angle;
glTexStorage2DMultisample :: (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void #foreign angle;
glGetMultisamplefv :: (pname: GLenum, index: GLuint, val: *GLfloat) -> void #foreign angle;
glSampleMaski :: (maskNumber: GLuint, mask: GLbitfield) -> void #foreign angle;
glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #foreign angle;
glBindVertexBuffer :: (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void #foreign angle;
glVertexAttribFormat :: (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void #foreign angle;
glVertexAttribIFormat :: (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void #foreign angle;
glVertexAttribBinding :: (attribindex: GLuint, bindingindex: GLuint) -> void #foreign angle;
glVertexBindingDivisor :: (bindingindex: GLuint, divisor: GLuint) -> void #foreign angle;

GLDEBUGPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *void) -> void #c_call;

PFNGLBLENDBARRIERPROC :: #type () -> void #c_call;
PFNGLCOPYIMAGESUBDATAPROC :: #type (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void #c_call;
PFNGLDEBUGMESSAGECONTROLPROC :: #type (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> void #c_call;
PFNGLDEBUGMESSAGEINSERTPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> void #c_call;
PFNGLDEBUGMESSAGECALLBACKPROC :: #type (callback: GLDEBUGPROC, userParam: *void) -> void #c_call;
PFNGLGETDEBUGMESSAGELOGPROC :: #type (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
PFNGLPUSHDEBUGGROUPPROC :: #type (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> void #c_call;
PFNGLPOPDEBUGGROUPPROC :: #type () -> void #c_call;
PFNGLOBJECTLABELPROC :: #type (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTLABELPROC :: #type (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;
PFNGLOBJECTPTRLABELPROC :: #type (ptr: *void, length: GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETOBJECTPTRLABELPROC :: #type (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #c_call;
PFNGLGETPOINTERVPROC :: #type (pname: GLenum, params: **void) -> void #c_call;
PFNGLENABLEIPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLDISABLEIPROC :: #type (target: GLenum, index: GLuint) -> void #c_call;
PFNGLBLENDEQUATIONIPROC :: #type (buf: GLuint, mode: GLenum) -> void #c_call;
PFNGLBLENDEQUATIONSEPARATEIPROC :: #type (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #c_call;
PFNGLBLENDFUNCIPROC :: #type (buf: GLuint, src: GLenum, dst: GLenum) -> void #c_call;
PFNGLBLENDFUNCSEPARATEIPROC :: #type (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #c_call;
PFNGLCOLORMASKIPROC :: #type (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void #c_call;
PFNGLISENABLEDIPROC :: #type (target: GLenum, index: GLuint) -> GLboolean #c_call;
PFNGLDRAWELEMENTSBASEVERTEXPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC :: #type (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #c_call;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC :: #type (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) -> void #c_call;
PFNGLFRAMEBUFFERTEXTUREPROC :: #type (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #c_call;
PFNGLPRIMITIVEBOUNDINGBOXPROC :: #type (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> void #c_call;
PFNGLGETGRAPHICSRESETSTATUSPROC :: #type () -> GLenum #c_call;
PFNGLREADNPIXELSPROC :: #type (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #c_call;
PFNGLGETNUNIFORMFVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #c_call;
PFNGLGETNUNIFORMIVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #c_call;
PFNGLGETNUNIFORMUIVPROC :: #type (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> void #c_call;
PFNGLMINSAMPLESHADINGPROC :: #type (value: GLfloat) -> void #c_call;
PFNGLPATCHPARAMETERIPROC :: #type (pname: GLenum, value: GLint) -> void #c_call;
PFNGLTEXPARAMETERIIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLTEXPARAMETERIUIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLGETTEXPARAMETERIIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETTEXPARAMETERIUIVPROC :: #type (target: GLenum, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLSAMPLERPARAMETERIIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLint) -> void #c_call;
PFNGLSAMPLERPARAMETERIUIVPROC :: #type (sampler: GLuint, pname: GLenum, param: *GLuint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLint) -> void #c_call;
PFNGLGETSAMPLERPARAMETERIUIVPROC :: #type (sampler: GLuint, pname: GLenum, params: *GLuint) -> void #c_call;
PFNGLTEXBUFFERPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #c_call;
PFNGLTEXBUFFERRANGEPROC :: #type (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #c_call;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC :: #type (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #c_call;

glBlendBarrier :: () -> void #foreign angle;
glCopyImageSubData :: (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void #foreign angle;
glDebugMessageControl :: (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> void #foreign angle;
glDebugMessageInsert :: (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> void #foreign angle;
glDebugMessageCallback :: (callback: GLDEBUGPROC, userParam: *void) -> void #foreign angle;
glGetDebugMessageLog :: (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign angle;
glPushDebugGroup :: (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> void #foreign angle;
glPopDebugGroup :: () -> void #foreign angle;
glObjectLabel :: (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> void #foreign angle;
glGetObjectLabel :: (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #foreign angle;
glObjectPtrLabel :: (ptr: *void, length: GLsizei, label: *GLchar) -> void #foreign angle;
glGetObjectPtrLabel :: (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> void #foreign angle;
glGetPointerv :: (pname: GLenum, params: **void) -> void #foreign angle;
glEnablei :: (target: GLenum, index: GLuint) -> void #foreign angle;
glDisablei :: (target: GLenum, index: GLuint) -> void #foreign angle;
glBlendEquationi :: (buf: GLuint, mode: GLenum) -> void #foreign angle;
glBlendEquationSeparatei :: (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void #foreign angle;
glBlendFunci :: (buf: GLuint, src: GLenum, dst: GLenum) -> void #foreign angle;
glBlendFuncSeparatei :: (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void #foreign angle;
glColorMaski :: (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void #foreign angle;
glIsEnabledi :: (target: GLenum, index: GLuint) -> GLboolean #foreign angle;
glDrawElementsBaseVertex :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #foreign angle;
glDrawRangeElementsBaseVertex :: (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) -> void #foreign angle;
glDrawElementsInstancedBaseVertex :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) -> void #foreign angle;
glFramebufferTexture :: (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void #foreign angle;
glPrimitiveBoundingBox :: (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) -> void #foreign angle;
glGetGraphicsResetStatus :: () -> GLenum #foreign angle;
glReadnPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) -> void #foreign angle;
glGetnUniformfv :: (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> void #foreign angle;
glGetnUniformiv :: (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> void #foreign angle;
glGetnUniformuiv :: (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> void #foreign angle;
glMinSampleShading :: (value: GLfloat) -> void #foreign angle;
glPatchParameteri :: (pname: GLenum, value: GLint) -> void #foreign angle;
glTexParameterIiv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glTexParameterIuiv :: (target: GLenum, pname: GLenum, params: *GLuint) -> void #foreign angle;
glGetTexParameterIiv :: (target: GLenum, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetTexParameterIuiv :: (target: GLenum, pname: GLenum, params: *GLuint) -> void #foreign angle;
glSamplerParameterIiv :: (sampler: GLuint, pname: GLenum, param: *GLint) -> void #foreign angle;
glSamplerParameterIuiv :: (sampler: GLuint, pname: GLenum, param: *GLuint) -> void #foreign angle;
glGetSamplerParameterIiv :: (sampler: GLuint, pname: GLenum, params: *GLint) -> void #foreign angle;
glGetSamplerParameterIuiv :: (sampler: GLuint, pname: GLenum, params: *GLuint) -> void #foreign angle;
glTexBuffer :: (target: GLenum, internalformat: GLenum, buffer: GLuint) -> void #foreign angle;
glTexBufferRange :: (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void #foreign angle;
glTexStorage3DMultisample :: (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void #foreign angle;

#scope_file

